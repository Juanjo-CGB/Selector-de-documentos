%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: file-type-icons-1.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Rixwan
%%CreationDate: 5/11/2018
%%BoundingBox: 0 0 512 512
%%HiResBoundingBox: 0 0 512 512
%%CropBox: 0 0 512 512
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font Roboto-Light
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Roboto-Light
%%DocumentNeededFonts: Roboto-Light
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-05-11T15:21:07+05:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-05-11T15:21:07+05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-05-11T15:21:07+05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEB9AH0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAB9AAAAAEA&#xA;AQH0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AVz0F8UdirsVdirsVdirs&#xA;VdirsVfQvkL/AJQ7Sv8AjAP1nOK7Q/v5e99X7E/xTH/VT/MN2jsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVfLeegvijsVdirsVdirsVdirsVdir6F8hf8odpX/GAfrOcV2h/f&#xA;y976v2J/imP+qn+YbtHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+W89B&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:F51528F90455E811856CAA088180900D</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F51528F90455E811856CAA088180900D</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:AD91D181E854E811856CAA088180900D</stRef:instanceID>
            <stRef:documentID>xmp.did:AD91D181E854E811856CAA088180900D</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AD91D181E854E811856CAA088180900D</stEvt:instanceID>
                  <stEvt:when>2018-05-11T11:57:02+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F51528F90455E811856CAA088180900D</stEvt:instanceID>
                  <stEvt:when>2018-05-11T15:21:07+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>512.000000</stDim:w>
            <stDim:h>512.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Roboto-Light</stFnt:fontName>
                  <stFnt:fontFamily>Roboto</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 1.100141; 2013</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Roboto-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -512 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 512 li
512 512 li
512 0 li
cp
clp
512 512 mo
0 512 li
0 0 li
512 0 li
512 512 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
147 512 mo
0 512 li
0 0 li
147 0 li
147 512 li
cp
.703914 .0884413 0 0 cmyk
f
0 0 0 0 cmyk
%%IncludeResource: font Roboto-Light
/BZNAGX+Roboto-Light /Roboto-Light findfont ct_VMDictPut
/BZNAGX+Roboto-Light*1 
[69{/.notdef}rp /E /F 11{/.notdef}rp /R 173{/.notdef}rp]
BZNAGX+Roboto-Light nf
BZNAGX+Roboto-Light*1 [38.345 0 0 -38.345 0 0 ]msf
33.001 174.918 mo
(FREE)sh
%%IncludeResource: font Roboto-Light
/BZNAGX+Roboto-Light*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E /F 2{/.notdef}rp /I 2{/.notdef}rp 
/L 5{/.notdef}rp /R 173{/.notdef}rp]
BZNAGX+Roboto-Light nf
BZNAGX+Roboto-Light*1 [38.345 0 0 -38.345 0 0 ]msf
33.001 220.932 mo
(FILE )sh
%%IncludeResource: font Roboto-Light
/BZNAGX+Roboto-Light*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E /F 2{/.notdef}rp /I 2{/.notdef}rp 
/L 3{/.notdef}rp /P /.notdef /R /.notdef /T 4{/.notdef}rp 
/Y 166{/.notdef}rp]
BZNAGX+Roboto-Light nf
BZNAGX+Roboto-Light*1 [38.345 0 0 -38.345 0 0 ]msf
33.001 266.946 mo
(TYPE)
[23.0107 23.291 23.7227 0 ]xsh
%%IncludeResource: font Roboto-Light
/BZNAGX+Roboto-Light*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp 
/I 2{/.notdef}rp /L /.notdef /N /O /P /.notdef 
/R /.notdef /T 4{/.notdef}rp /Y 166{/.notdef}rp]
BZNAGX+Roboto-Light nf
BZNAGX+Roboto-Light*1 [38.345 0 0 -38.345 0 0 ]msf
33.001 312.96 mo
(ICON)sh
%%IncludeResource: font Roboto-Light
/BZNAGX+Roboto-Light*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp 
/I 2{/.notdef}rp /L /.notdef /N /O /P /.notdef 
/R /S /T 4{/.notdef}rp /Y 166{/.notdef}rp]
BZNAGX+Roboto-Light nf
BZNAGX+Roboto-Light*1 [38.345 0 0 -38.345 0 0 ]msf
33.001 358.974 mo
(SET)
[23.0483 22.4678 0 ]xsh
427.531 478.219 mo
455.511 478.219 li
469.453 464.137 li
469.617 420.887 li
427.531 420.887 li
427.531 478.219 li
cp
455.911 480.145 mo
426.567 480.145 li
426.035 480.145 425.605 479.715 425.605 479.182 cv
425.605 419.926 li
425.605 419.395 426.035 418.963 426.567 418.963 cv
470.583 418.963 li
470.839 418.963 471.085 419.064 471.266 419.246 cv
471.445 419.428 471.548 419.674 471.546 419.93 cv
471.378 464.537 li
471.377 464.791 471.277 465.031 471.1 465.211 cv
456.597 479.859 li
456.414 480.043 456.168 480.145 455.911 480.145 cv
cp
.703914 .0884413 0 0 cmyk
f
463.183 465.496 mo
458.583 465.496 456.874 467.23 456.874 471.895 cv
456.874 476.842 li
468.107 465.496 li
463.183 465.496 li
cp
455.911 480.145 mo
455.788 480.145 455.664 480.121 455.546 480.072 cv
455.186 479.924 454.948 479.572 454.948 479.182 cv
454.948 471.895 li
454.948 466.139 457.487 463.57 463.183 463.57 cv
470.414 463.57 li
470.803 463.57 471.153 463.803 471.303 464.162 cv
471.452 464.521 471.372 464.934 471.1 465.211 cv
456.597 479.859 li
456.411 480.045 456.164 480.145 455.911 480.145 cv
cp
f
426.661 419.926 mo
470.49 419.926 li
470.49 434.725 li
426.661 434.725 li
426.661 419.926 li
cp
ef
463.424 428.666 mo
463.443 428.703 li
463.461 429.609 463.183 430.328 462.621 430.855 cv
462.06 431.385 461.274 431.648 460.284 431.648 cv
459.275 431.648 458.453 431.328 457.836 430.668 cv
457.22 430.025 456.901 429.193 456.901 428.156 cv
456.901 426.494 li
456.901 425.477 457.201 424.645 457.816 423.984 cv
458.434 423.324 459.219 423.002 460.191 423.002 cv
461.22 423.002 462.023 423.268 462.602 423.795 cv
463.183 424.344 463.461 425.061 463.461 425.986 cv
463.443 426.023 li
461.816 426.023 li
461.816 425.457 461.687 425.041 461.426 424.74 cv
461.163 424.457 460.752 424.307 460.191 424.307 cv
459.688 424.307 459.294 424.514 459.013 424.91 cv
458.715 425.324 458.565 425.854 458.565 426.477 cv
458.565 428.156 li
458.565 428.799 458.715 429.326 459.033 429.742 cv
459.331 430.137 459.762 430.348 460.284 430.348 cv
460.809 430.348 461.182 430.213 461.443 429.93 cv
461.687 429.646 461.816 429.215 461.816 428.666 cv
463.424 428.666 li
cp
454.173 426.553 mo
454.173 425.891 454.005 425.363 453.687 424.928 cv
453.369 424.514 452.921 424.307 452.342 424.307 cv
451.781 424.307 451.332 424.514 451.016 424.928 cv
450.715 425.344 450.547 425.891 450.547 426.553 cv
450.547 428.082 li
450.547 428.742 450.715 429.289 451.033 429.723 cv
451.352 430.137 451.781 430.348 452.36 430.348 cv
452.921 430.348 453.369 430.137 453.687 429.723 cv
454.005 429.289 454.173 428.742 454.173 428.082 cv
454.173 426.553 li
cp
455.836 428.082 mo
455.836 429.119 455.519 429.969 454.864 430.648 cv
454.229 431.309 453.389 431.648 452.36 431.648 cv
451.332 431.648 450.491 431.309 449.855 430.648 cv
449.22 429.969 448.884 429.119 448.884 428.082 cv
448.884 426.57 li
448.884 425.533 449.202 424.684 449.855 424.021 cv
450.491 423.342 451.313 423.002 452.342 423.002 cv
453.369 423.002 454.229 423.342 454.864 424.021 cv
455.519 424.684 455.836 425.533 455.836 426.57 cv
455.836 428.082 li
cp
443.127 424.42 mo
443.127 430.234 li
444.229 430.234 li
444.847 430.234 445.313 430.025 445.649 429.609 cv
445.986 429.215 446.155 428.686 446.155 428.025 cv
446.155 426.629 li
446.155 425.967 445.986 425.438 445.649 425.023 cv
445.313 424.627 444.847 424.42 444.229 424.42 cv
443.127 424.42 li
cp
441.464 431.535 mo
441.464 423.117 li
444.323 423.117 li
445.351 423.117 446.174 423.455 446.846 424.098 cv
447.5 424.758 447.836 425.607 447.836 426.629 cv
447.836 428.025 li
447.836 429.063 447.5 429.895 446.846 430.555 cv
446.174 431.195 445.351 431.535 444.323 431.535 cv
441.464 431.535 li
cp
439.763 431.535 mo
438.1 431.535 li
438.1 430.045 li
439.763 430.045 li
439.763 431.535 li
cp
0 0 0 0 cmyk
f
463.237 444.957 mo
433.894 444.957 li
433.362 444.957 432.933 444.527 432.933 443.994 cv
432.933 443.463 433.362 443.031 433.894 443.031 cv
463.237 443.031 li
463.769 443.031 464.201 443.463 464.201 443.994 cv
464.201 444.527 463.769 444.957 463.237 444.957 cv
cp
.703914 .0884413 0 0 cmyk
f
463.237 451.752 mo
433.894 451.752 li
433.362 451.752 432.933 451.322 432.933 450.791 cv
432.933 450.258 433.362 449.826 433.894 449.826 cv
463.237 449.826 li
463.769 449.826 464.201 450.258 464.201 450.791 cv
464.201 451.322 463.769 451.752 463.237 451.752 cv
cp
f
463.237 458.547 mo
433.894 458.547 li
433.362 458.547 432.933 458.117 432.933 457.586 cv
432.933 457.055 433.362 456.623 433.894 456.623 cv
463.237 456.623 li
463.769 456.623 464.201 457.055 464.201 457.586 cv
464.201 458.117 463.769 458.547 463.237 458.547 cv
cp
f
448.565 465.326 mo
433.894 465.326 li
433.362 465.326 432.933 464.896 432.933 464.363 cv
432.933 463.832 433.362 463.4 433.894 463.4 cv
448.565 463.4 li
449.098 463.4 449.529 463.832 449.529 464.363 cv
449.529 464.896 449.098 465.326 448.565 465.326 cv
cp
f
348.622 478.238 mo
376.602 478.238 li
390.546 464.137 li
390.709 420.887 li
348.622 420.887 li
348.622 478.238 li
cp
377.004 480.164 mo
347.659 480.164 li
347.128 480.164 346.698 479.732 346.698 479.201 cv
346.698 419.926 li
346.698 419.395 347.128 418.963 347.659 418.963 cv
391.676 418.963 li
391.932 418.963 392.178 419.064 392.357 419.246 cv
392.538 419.428 392.64 419.674 392.639 419.93 cv
392.469 464.537 li
392.468 464.789 392.369 465.031 392.191 465.209 cv
377.688 479.877 li
377.508 480.061 377.261 480.164 377.004 480.164 cv
cp
f
384.273 465.496 mo
379.676 465.496 377.967 467.23 377.967 471.896 cv
377.967 476.857 li
389.2 465.496 li
384.273 465.496 li
cp
377.003 480.164 mo
376.88 480.164 376.756 480.141 376.638 480.092 cv
376.277 479.943 376.041 479.592 376.041 479.201 cv
376.041 471.896 li
376.041 466.139 378.58 463.57 384.273 463.57 cv
391.507 463.57 li
391.896 463.57 392.245 463.803 392.396 464.162 cv
392.544 464.521 392.464 464.934 392.191 465.209 cv
377.688 479.877 li
377.504 480.064 377.256 480.164 377.003 480.164 cv
cp
f
347.754 419.926 mo
391.583 419.926 li
391.583 434.744 li
347.754 434.744 li
347.754 419.926 li
cp
ef
383.021 428.043 mo
379.526 428.043 li
379.526 431.535 li
377.863 431.535 li
377.863 423.117 li
383.602 423.117 li
383.602 424.42 li
379.526 424.42 li
379.526 426.74 li
383.021 426.74 li
383.021 428.043 li
cp
371.863 424.42 mo
371.863 430.234 li
372.967 430.234 li
373.565 430.234 374.031 430.025 374.368 429.629 cv
374.704 429.215 374.873 428.686 374.873 428.025 cv
374.873 426.629 li
374.873 425.967 374.704 425.438 374.368 425.043 cv
374.031 424.627 373.565 424.42 372.967 424.42 cv
371.863 424.42 li
cp
370.182 431.535 mo
370.182 423.117 li
373.041 423.117 li
374.069 423.117 374.91 423.455 375.564 424.115 cv
376.219 424.758 376.555 425.607 376.555 426.646 cv
376.555 428.025 li
376.555 429.063 376.219 429.912 375.564 430.555 cv
374.91 431.215 374.069 431.535 373.041 431.535 cv
370.182 431.535 li
cp
364.219 427.174 mo
365.883 427.174 li
366.351 427.174 366.687 427.061 366.93 426.799 cv
367.173 426.553 367.284 426.211 367.284 425.816 cv
367.284 425.42 367.173 425.08 366.93 424.816 cv
366.705 424.551 366.351 424.42 365.883 424.42 cv
364.219 424.42 li
364.219 427.174 li
cp
364.219 428.477 mo
364.219 431.535 li
362.557 431.535 li
362.557 423.117 li
365.883 423.117 li
366.836 423.117 367.584 423.381 368.145 423.871 cv
368.687 424.361 368.967 425.004 368.967 425.816 cv
368.967 426.607 368.687 427.268 368.145 427.76 cv
367.584 428.232 366.836 428.477 365.883 428.477 cv
364.219 428.477 li
cp
360.854 431.535 mo
359.191 431.535 li
359.191 430.064 li
360.854 430.064 li
360.854 431.535 li
cp
0 0 0 0 cmyk
f
378.761 458.605 mo
378.442 459.041 377.771 459.041 377.527 459.041 cv
376.985 459.041 376.798 458.719 375.976 458.076 cv
376.647 458.002 377.284 457.982 377.807 457.982 cv
378.704 457.982 378.854 458.115 378.984 458.172 cv
378.966 458.246 378.909 458.379 378.761 458.605 cv
378.761 458.605 li
cp
365.714 459.078 mo
366.725 456.625 367.695 453.887 368.406 451.357 cv
369.546 453.414 370.91 455.414 372.274 457.02 cv
370.125 457.529 367.826 458.266 365.714 459.078 cv
365.714 459.078 li
cp
367.789 442.711 mo
367.845 442.691 368.854 443.844 367.901 445.996 cv
366.443 444.506 367.695 442.748 367.789 442.711 cv
367.789 442.711 li
cp
359.49 466.139 mo
359.023 465.76 359.043 465.516 359.061 465.422 cv
359.116 464.855 359.996 463.854 362.163 462.627 cv
360.519 465.686 359.641 466.082 359.49 466.139 cv
359.49 466.139 li
cp
377.602 456.244 mo
376.667 456.244 375.527 456.379 374.2 456.625 cv
372.35 454.623 370.424 451.734 369.06 448.885 cv
370.405 443.127 369.733 442.314 369.434 441.938 cv
369.116 441.523 368.668 440.861 368.163 440.861 cv
367.938 440.861 367.359 440.955 367.135 441.029 cv
366.537 441.238 366.238 441.691 365.977 442.277 cv
365.266 443.975 366.256 446.844 367.247 449.072 cv
366.388 452.547 364.948 456.68 363.416 460.061 cv
359.585 461.834 357.547 463.57 357.378 465.232 cv
357.304 465.836 357.454 466.723 358.5 467.516 cv
358.78 467.742 359.116 467.855 359.473 467.855 cv
360.37 467.855 361.248 467.176 362.294 465.703 cv
363.043 464.627 363.864 463.174 364.705 461.361 cv
367.416 460.172 370.762 459.078 373.639 458.475 cv
375.228 460.021 376.667 460.814 377.901 460.814 cv
378.797 460.814 379.583 460.398 380.144 459.588 cv
380.723 458.775 380.854 458.02 380.536 457.398 cv
380.144 456.625 379.19 456.244 377.602 456.244 cv
377.602 456.244 li
cp
.703914 .0884413 0 0 cmyk
f
269.715 478.238 mo
297.695 478.238 li
311.638 464.154 li
311.801 420.887 li
269.715 420.887 li
269.715 478.238 li
cp
298.096 480.164 mo
268.752 480.164 li
268.221 480.164 267.789 479.732 267.789 479.201 cv
267.789 419.926 li
267.789 419.395 268.221 418.963 268.752 418.963 cv
312.767 418.963 li
313.022 418.963 313.27 419.064 313.45 419.246 cv
313.631 419.428 313.73 419.674 313.729 419.93 cv
313.562 464.557 li
313.56 464.809 313.461 465.051 313.283 465.229 cv
298.78 479.877 li
298.599 480.061 298.353 480.164 298.096 480.164 cv
cp
f
305.366 465.516 mo
300.769 465.516 299.059 467.244 299.059 471.895 cv
299.059 476.859 li
310.29 465.516 li
305.366 465.516 li
cp
298.096 480.164 mo
297.972 480.164 297.848 480.139 297.729 480.092 cv
297.368 479.941 297.133 479.592 297.133 479.201 cv
297.133 471.895 li
297.133 466.152 299.672 463.59 305.366 463.59 cv
312.599 463.59 li
312.987 463.59 313.338 463.824 313.488 464.18 cv
313.637 464.539 313.557 464.953 313.283 465.229 cv
298.78 479.877 li
298.596 480.064 298.347 480.164 298.096 480.164 cv
cp
f
268.846 419.926 mo
312.674 419.926 li
312.674 434.744 li
268.846 434.744 li
268.846 419.926 li
cp
ef
303.235 430.326 mo
306.692 430.326 li
306.692 431.555 li
301.665 431.555 li
301.665 423.684 li
303.235 423.684 li
303.235 430.326 li
cp
294.151 423.684 mo
296.152 429.477 li
296.17 429.477 li
298.171 423.684 li
300.208 423.684 li
300.208 431.555 li
298.655 431.555 li
298.655 429.193 li
298.806 425.738 li
298.769 425.721 li
296.694 431.555 li
295.646 431.555 li
293.572 425.738 li
293.535 425.758 li
293.685 429.193 li
293.685 431.555 li
292.115 431.555 li
292.115 423.684 li
294.151 423.684 li
cp
291.255 424.908 mo
289.049 424.908 li
289.049 431.555 li
287.498 431.555 li
287.498 424.908 li
285.292 424.908 li
285.292 423.684 li
291.255 423.684 li
291.255 424.908 li
cp
284.414 431.555 mo
282.862 431.555 li
282.862 428.287 li
279.686 428.287 li
279.686 431.555 li
278.135 431.555 li
278.135 423.684 li
279.686 423.684 li
279.686 427.061 li
282.862 427.061 li
282.862 423.684 li
284.414 423.684 li
284.414 431.555 li
cp
276.49 431.555 mo
274.825 431.555 li
274.825 430.063 li
276.49 430.063 li
276.49 431.555 li
cp
0 0 0 0 cmyk
f
296.582 460.078 mo
296.24 460.078 295.9 459.943 295.647 459.676 cv
295.162 459.16 295.185 458.348 295.699 457.861 cv
302.022 451.883 li
295.698 445.889 li
295.183 445.4 295.162 444.588 295.65 444.074 cv
296.137 443.559 296.95 443.539 297.464 444.025 cv
304.765 450.945 li
304.776 450.957 304.787 450.969 304.799 450.98 cv
304.903 451.086 304.987 451.203 305.048 451.33 cv
305.048 451.33 li
305.048 451.33 li
305.132 451.506 305.173 451.697 305.173 451.889 cv
305.173 452.076 305.131 452.266 305.046 452.441 cv
304.985 452.57 304.902 452.688 304.798 452.793 cv
304.786 452.803 304.774 452.814 304.763 452.824 cv
297.463 459.729 li
297.215 459.961 296.898 460.078 296.582 460.078 cv
cp
284.918 460.078 mo
284.602 460.078 284.284 459.961 284.036 459.727 cv
276.753 452.824 li
276.744 452.814 276.734 452.807 276.726 452.797 cv
276.618 452.689 276.532 452.57 276.47 452.438 cv
276.387 452.262 276.346 452.072 276.346 451.883 cv
276.347 451.697 276.387 451.51 276.468 451.338 cv
276.53 451.207 276.615 451.082 276.725 450.975 cv
276.733 450.965 276.742 450.957 276.752 450.949 cv
284.034 444.027 li
284.548 443.537 285.361 443.559 285.85 444.074 cv
286.338 444.588 286.317 445.4 285.803 445.889 cv
279.494 451.883 li
285.802 457.863 li
286.317 458.35 286.339 459.162 285.851 459.678 cv
285.599 459.943 285.26 460.078 284.918 460.078 cv
cp
.703914 .0884413 0 0 cmyk
f
190.806 478.219 mo
218.786 478.219 li
232.729 464.137 li
232.893 420.887 li
190.806 420.887 li
190.806 478.219 li
cp
219.188 480.145 mo
189.844 480.145 li
189.312 480.145 188.881 479.715 188.881 479.182 cv
188.881 419.926 li
188.881 419.395 189.312 418.963 189.844 418.963 cv
233.859 418.963 li
234.115 418.963 234.36 419.064 234.542 419.246 cv
234.722 419.428 234.823 419.674 234.822 419.93 cv
234.653 464.537 li
234.652 464.791 234.552 465.031 234.375 465.211 cv
219.872 479.859 li
219.691 480.043 219.444 480.145 219.188 480.145 cv
cp
f
226.458 465.496 mo
221.859 465.496 220.15 467.23 220.15 471.896 cv
220.15 476.842 li
231.382 465.496 li
226.458 465.496 li
cp
219.188 480.145 mo
219.064 480.145 218.94 480.121 218.821 480.072 cv
218.46 479.924 218.225 479.572 218.225 479.182 cv
218.225 471.896 li
218.225 466.139 220.764 463.57 226.458 463.57 cv
233.69 463.57 li
234.08 463.57 234.429 463.803 234.579 464.162 cv
234.729 464.521 234.648 464.934 234.375 465.211 cv
219.872 479.859 li
219.688 480.045 219.439 480.145 219.188 480.145 cv
cp
f
189.937 419.926 mo
233.766 419.926 li
233.766 434.744 li
189.937 434.744 li
189.937 419.926 li
cp
ef
222.402 429.346 mo
222.402 429.006 222.29 428.76 222.065 428.553 cv
221.841 428.363 221.43 428.176 220.869 428.006 cv
219.879 427.723 219.131 427.383 218.627 426.984 cv
218.122 426.59 217.86 426.041 217.86 425.344 cv
217.86 424.664 218.159 424.098 218.739 423.664 cv
219.318 423.229 220.047 423.002 220.963 423.002 cv
221.878 423.002 222.627 423.248 223.187 423.738 cv
223.766 424.23 224.047 424.834 224.028 425.551 cv
224.028 425.59 li
222.402 425.59 li
222.402 425.211 222.271 424.891 222.01 424.664 cv
221.767 424.42 221.393 424.307 220.925 424.307 cv
220.477 424.307 220.141 424.398 219.897 424.607 cv
219.654 424.797 219.523 425.061 219.523 425.363 cv
219.523 425.646 219.654 425.873 219.917 426.061 cv
220.178 426.25 220.627 426.439 221.281 426.629 cv
222.197 426.891 222.888 427.232 223.355 427.666 cv
223.841 428.082 224.065 428.629 224.065 429.326 cv
224.065 430.045 223.785 430.611 223.224 431.025 cv
222.664 431.441 221.916 431.648 221 431.648 cv
220.084 431.648 219.299 431.422 218.627 430.951 cv
217.954 430.479 217.617 429.818 217.636 428.969 cv
217.654 428.93 li
219.281 428.93 li
219.281 429.422 219.431 429.799 219.729 430.025 cv
220.029 430.252 220.458 430.365 221 430.365 cv
221.449 430.365 221.804 430.271 222.047 430.102 cv
222.29 429.895 222.402 429.646 222.402 429.346 cv
222.402 429.346 li
cp
214.963 429.346 mo
214.963 429.006 214.851 428.76 214.627 428.553 cv
214.403 428.363 214.01 428.176 213.431 428.006 cv
212.44 427.723 211.692 427.383 211.188 426.984 cv
210.683 426.59 210.422 426.041 210.422 425.344 cv
210.422 424.664 210.72 424.098 211.3 423.664 cv
211.879 423.229 212.627 423.002 213.524 423.002 cv
214.44 423.002 215.188 423.248 215.767 423.738 cv
216.347 424.23 216.627 424.834 216.608 425.551 cv
216.589 425.59 li
214.963 425.59 li
214.963 425.211 214.833 424.891 214.589 424.664 cv
214.328 424.42 213.973 424.307 213.505 424.307 cv
213.057 424.307 212.701 424.398 212.459 424.607 cv
212.216 424.797 212.103 425.061 212.103 425.363 cv
212.103 425.646 212.235 425.873 212.496 426.061 cv
212.757 426.25 213.207 426.439 213.842 426.629 cv
214.757 426.891 215.449 427.232 215.935 427.666 cv
216.403 428.082 216.646 428.629 216.646 429.326 cv
216.646 430.045 216.365 430.611 215.805 431.025 cv
215.225 431.441 214.496 431.648 213.562 431.648 cv
212.664 431.648 211.86 431.422 211.188 430.951 cv
210.515 430.479 210.198 429.818 210.216 428.969 cv
210.216 428.93 li
211.842 428.93 li
211.842 429.422 211.991 429.799 212.309 430.025 cv
212.608 430.252 213.02 430.365 213.562 430.365 cv
214.029 430.365 214.365 430.271 214.608 430.102 cv
214.851 429.895 214.963 429.646 214.963 429.346 cv
214.963 429.346 li
cp
209.281 428.666 mo
209.281 428.703 li
209.3 429.609 209.02 430.328 208.459 430.855 cv
207.898 431.385 207.113 431.648 206.123 431.648 cv
205.113 431.648 204.31 431.328 203.674 430.668 cv
203.058 430.025 202.74 429.193 202.74 428.156 cv
202.74 426.494 li
202.74 425.477 203.039 424.645 203.656 423.984 cv
204.272 423.324 205.058 423.002 206.03 423.002 cv
207.057 423.002 207.86 423.268 208.44 423.795 cv
209.02 424.344 209.318 425.061 209.3 425.986 cv
209.281 426.023 li
207.656 426.023 li
207.656 425.457 207.524 425.043 207.263 424.74 cv
207.001 424.457 206.59 424.307 206.03 424.307 cv
205.543 424.307 205.132 424.514 204.852 424.91 cv
204.553 425.324 204.403 425.854 204.403 426.477 cv
204.403 428.156 li
204.403 428.799 204.553 429.326 204.87 429.742 cv
205.17 430.137 205.6 430.348 206.123 430.348 cv
206.646 430.348 207.039 430.213 207.282 429.93 cv
207.524 429.646 207.656 429.215 207.656 428.666 cv
209.281 428.666 li
cp
201.3 431.535 mo
199.619 431.535 li
199.619 430.064 li
201.3 430.064 li
201.3 431.535 li
cp
0 0 0 0 cmyk
f
206.758 460.869 mo
205.696 460.869 204.598 460.869 203.802 460.064 cv
203.206 459.459 202.937 458.553 202.955 457.215 cv
202.974 455.074 li
202.974 455.066 202.974 455.057 202.974 455.049 cv
202.975 455.039 202.975 455.029 202.975 455.021 cv
203.012 454.291 li
203.052 453.148 202.788 452.215 202.268 451.676 cv
201.955 451.352 201.567 451.188 201.114 451.188 cv
200.583 451.188 200.151 450.756 200.151 450.223 cv
200.151 449.691 200.583 449.262 201.114 449.262 cv
201.567 449.262 201.955 449.098 202.268 448.771 cv
202.788 448.234 203.052 447.301 203.011 446.143 cv
202.975 445.428 li
202.975 445.42 202.975 445.408 202.974 445.4 cv
202.974 445.393 202.974 445.383 202.974 445.373 cv
202.955 443.209 li
202.937 441.887 203.204 440.986 203.799 440.383 cv
204.595 439.578 205.694 439.578 206.758 439.578 cv
207.291 439.578 207.721 440.008 207.721 440.539 cv
207.721 441.072 207.291 441.502 206.758 441.502 cv
206.06 441.502 205.4 441.502 205.169 441.736 cv
205.056 441.852 204.866 442.195 204.88 443.188 cv
204.936 446.061 li
205.011 448.234 204.28 449.461 203.653 450.109 cv
203.615 450.148 203.577 450.188 203.538 450.223 cv
203.577 450.262 203.615 450.299 203.653 450.338 cv
204.28 450.988 205.011 452.215 204.936 454.373 cv
204.899 455.105 li
204.88 457.236 li
204.866 458.248 205.058 458.594 205.173 458.711 cv
205.403 458.945 206.062 458.945 206.758 458.945 cv
207.291 458.945 207.721 459.377 207.721 459.908 cv
207.721 460.439 207.291 460.869 206.758 460.869 cv
cp
216.925 460.869 mo
216.394 460.869 215.963 460.439 215.963 459.908 cv
215.963 459.377 216.394 458.945 216.925 458.945 cv
217.626 458.945 218.288 458.945 218.52 458.711 cv
218.636 458.596 218.83 458.248 218.822 457.234 cv
218.767 454.363 li
218.691 452.213 219.424 450.982 220.051 450.334 cv
220.087 450.297 220.123 450.26 220.161 450.223 cv
220.123 450.189 220.087 450.152 220.051 450.115 cv
219.424 449.465 218.691 448.236 218.767 446.076 cv
218.822 443.186 li
218.829 442.195 218.637 441.85 218.523 441.734 cv
218.292 441.502 217.628 441.502 216.925 441.502 cv
216.394 441.502 215.963 441.072 215.963 440.539 cv
215.963 440.008 216.394 439.578 216.925 439.578 cv
217.992 439.578 219.093 439.578 219.889 440.379 cv
220.484 440.977 220.757 441.877 220.748 443.209 cv
220.71 445.389 li
220.71 445.395 220.71 445.396 220.71 445.4 cv
220.691 446.133 li
220.65 447.303 220.916 448.238 221.437 448.777 cv
221.746 449.098 222.127 449.262 222.57 449.262 cv
223.102 449.262 223.532 449.691 223.532 450.223 cv
223.532 450.756 223.102 451.188 222.57 451.188 cv
222.127 451.188 221.746 451.35 221.437 451.67 cv
220.916 452.211 220.65 453.145 220.691 454.307 cv
220.71 455.051 li
220.71 455.053 220.71 455.055 220.71 455.059 cv
220.71 455.059 li
220.748 457.211 li
220.757 458.563 220.483 459.467 219.886 460.068 cv
219.09 460.869 217.99 460.869 216.925 460.869 cv
cp
.703914 .0884413 0 0 cmyk
f
427.531 384.07 mo
455.511 384.07 li
469.453 369.986 li
469.617 326.719 li
427.531 326.719 li
427.531 384.07 li
cp
455.911 385.994 mo
426.567 385.994 li
426.035 385.994 425.605 385.564 425.605 385.033 cv
425.605 325.758 li
425.605 325.225 426.035 324.795 426.567 324.795 cv
470.583 324.795 li
470.839 324.795 471.085 324.896 471.266 325.078 cv
471.445 325.258 471.548 325.504 471.546 325.762 cv
471.378 370.389 li
471.377 370.641 471.277 370.881 471.1 371.063 cv
456.597 385.711 li
456.414 385.893 456.168 385.994 455.911 385.994 cv
cp
f
463.183 371.346 mo
458.583 371.346 456.874 373.076 456.874 377.727 cv
456.874 382.691 li
468.107 371.346 li
463.183 371.346 li
cp
455.911 385.994 mo
455.788 385.994 455.664 385.971 455.546 385.924 cv
455.186 385.775 454.948 385.424 454.948 385.033 cv
454.948 377.727 li
454.948 371.982 457.487 369.422 463.183 369.422 cv
470.414 369.422 li
470.803 369.422 471.153 369.654 471.303 370.014 cv
471.452 370.373 471.372 370.785 471.1 371.063 cv
456.597 385.711 li
456.411 385.896 456.164 385.994 455.911 385.994 cv
cp
f
426.661 325.758 mo
470.49 325.758 li
470.49 340.576 li
426.661 340.576 li
426.661 325.758 li
cp
ef
454.883 337.367 mo
453.22 337.367 li
453.22 328.965 li
454.883 328.965 li
454.883 337.367 li
cp
447.575 334.271 mo
449.669 334.271 li
448.641 330.93 li
448.603 330.93 li
447.575 334.271 li
cp
450.08 335.553 mo
447.164 335.553 li
446.604 337.367 li
444.902 337.367 li
447.781 328.965 li
449.48 328.965 li
452.342 337.367 li
450.659 337.367 li
450.08 335.553 li
cp
443.931 337.367 mo
442.249 337.367 li
442.249 335.895 li
443.931 335.895 li
443.931 337.367 li
cp
0 0 0 0 cmyk
f
460.79 350.73 mo
462.658 350.73 li
462.658 352.619 li
460.79 352.619 li
460.79 350.73 li
cp
451.389 354.525 mo
445.762 354.525 li
445.762 348.824 li
451.389 348.824 li
451.389 354.525 li
cp
436.361 352.619 mo
434.493 352.619 li
434.493 350.73 li
436.361 350.73 li
436.361 352.619 li
cp
464.527 354.525 mo
464.527 348.824 li
458.901 348.824 li
458.901 350.73 li
453.276 350.73 li
453.276 346.938 li
443.874 346.938 li
443.874 350.73 li
438.249 350.73 li
438.249 348.824 li
432.604 348.824 li
432.604 354.525 li
438.249 354.525 li
438.249 352.619 li
441.576 352.619 li
437.276 355.129 434.493 359.814 434.493 364.947 cv
434.493 365.477 434.903 365.91 435.427 365.91 cv
435.95 365.91 436.361 365.477 436.361 364.947 cv
436.361 359.982 439.389 355.469 443.874 353.582 cv
443.874 356.414 li
453.276 356.414 li
453.276 353.582 li
457.743 355.469 460.79 359.982 460.79 364.947 cv
460.79 365.477 461.199 365.91 461.724 365.91 cv
462.247 365.91 462.658 365.477 462.658 364.947 cv
462.658 359.814 459.854 355.129 455.575 352.619 cv
458.901 352.619 li
458.901 354.525 li
464.527 354.525 li
cp
.703914 .0884413 0 0 cmyk
f
348.622 384.07 mo
376.603 384.07 li
390.546 369.986 li
390.709 326.719 li
348.622 326.719 li
348.622 384.07 li
cp
377.004 385.994 mo
347.659 385.994 li
347.128 385.994 346.698 385.564 346.698 385.031 cv
346.698 325.758 li
346.698 325.225 347.128 324.795 347.659 324.795 cv
391.676 324.795 li
391.932 324.795 392.178 324.896 392.357 325.078 cv
392.538 325.258 392.64 325.504 392.639 325.762 cv
392.469 370.387 li
392.468 370.639 392.369 370.881 392.191 371.061 cv
377.688 385.709 li
377.507 385.893 377.261 385.994 377.004 385.994 cv
cp
f
384.273 371.346 mo
379.676 371.346 377.967 373.076 377.967 377.727 cv
377.967 382.691 li
389.198 371.346 li
384.273 371.346 li
cp
377.003 385.994 mo
376.88 385.994 376.756 385.971 376.638 385.924 cv
376.277 385.773 376.041 385.422 376.041 385.031 cv
376.041 377.727 li
376.041 371.982 378.58 369.422 384.273 369.422 cv
391.507 369.422 li
391.896 369.422 392.245 369.654 392.396 370.014 cv
392.544 370.373 392.464 370.785 392.191 371.061 cv
377.688 385.709 li
377.504 385.896 377.256 385.994 377.003 385.994 cv
cp
f
347.754 325.758 mo
391.583 325.758 li
391.583 340.576 li
347.754 340.576 li
347.754 325.758 li
cp
ef
379.078 335.328 mo
379.078 335.025 378.966 334.779 378.761 334.609 cv
378.556 334.422 378.182 334.252 377.658 334.082 cv
376.723 333.818 376.013 333.496 375.546 333.119 cv
375.078 332.76 374.835 332.252 374.835 331.609 cv
374.835 330.967 375.115 330.439 375.657 330.021 cv
376.199 329.607 376.891 329.418 377.732 329.418 cv
378.593 329.418 379.283 329.645 379.825 330.098 cv
380.368 330.551 380.63 331.117 380.611 331.797 cv
380.592 331.836 li
379.078 331.836 li
379.078 331.477 378.966 331.174 378.724 330.967 cv
378.48 330.74 378.144 330.627 377.714 330.627 cv
377.284 330.627 376.966 330.723 376.742 330.91 cv
376.518 331.1 376.406 331.326 376.406 331.609 cv
376.406 331.873 376.518 332.1 376.76 332.27 cv
377.004 332.439 377.433 332.609 378.031 332.797 cv
378.892 333.043 379.546 333.365 379.976 333.762 cv
380.424 334.158 380.647 334.666 380.647 335.309 cv
380.647 335.988 380.386 336.518 379.845 336.914 cv
379.321 337.291 378.629 337.498 377.771 337.498 cv
376.929 337.498 376.181 337.271 375.546 336.818 cv
374.93 336.385 374.611 335.764 374.629 334.969 cv
374.648 334.949 li
376.162 334.949 li
376.162 335.404 376.312 335.764 376.592 335.971 cv
376.872 336.195 377.265 336.291 377.771 336.291 cv
378.199 336.291 378.518 336.215 378.741 336.025 cv
378.966 335.857 379.078 335.629 379.078 335.328 cv
379.078 335.328 li
cp
370.518 336.158 mo
373.976 336.158 li
373.976 337.385 li
368.967 337.385 li
368.967 329.514 li
370.518 329.514 li
370.518 336.158 li
cp
364.743 332.307 mo
366.2 329.514 li
368.014 329.514 li
365.714 333.422 li
368.145 337.385 li
366.256 337.385 li
364.761 334.553 li
363.267 337.385 li
361.434 337.385 li
363.809 333.422 li
361.49 329.514 li
363.304 329.514 li
364.743 332.307 li
cp
360.351 337.385 mo
358.687 337.385 li
358.687 335.895 li
360.351 335.895 li
360.351 337.385 li
cp
0 0 0 0 cmyk
f
352.668 351.779 mo
386.649 351.779 li
386.649 347.777 li
352.668 347.777 li
352.668 351.779 li
cp
387.451 353.383 mo
351.865 353.383 li
351.423 353.383 351.063 353.023 351.063 352.58 cv
351.063 346.975 li
351.063 346.531 351.423 346.172 351.865 346.172 cv
387.451 346.172 li
387.895 346.172 388.254 346.531 388.254 346.975 cv
388.254 352.58 li
388.254 353.023 387.895 353.383 387.451 353.383 cv
cp
.703914 .0884413 0 0 cmyk
f
352.668 357.404 mo
386.649 357.404 li
386.649 353.383 li
352.668 353.383 li
352.668 357.404 li
cp
387.451 359.01 mo
351.865 359.01 li
351.423 359.01 351.063 358.65 351.063 358.207 cv
351.063 352.58 li
351.063 352.139 351.423 351.779 351.865 351.779 cv
387.451 351.779 li
387.895 351.779 388.254 352.139 388.254 352.58 cv
388.254 358.207 li
388.254 358.65 387.895 359.01 387.451 359.01 cv
cp
f
352.668 363.031 mo
386.649 363.031 li
386.649 359.01 li
352.668 359.01 li
352.668 363.031 li
cp
387.451 364.635 mo
351.865 364.635 li
351.423 364.635 351.063 364.275 351.063 363.832 cv
351.063 358.207 li
351.063 357.764 351.423 357.404 351.865 357.404 cv
387.451 357.404 li
387.895 357.404 388.254 357.764 388.254 358.207 cv
388.254 363.832 li
388.254 364.275 387.895 364.635 387.451 364.635 cv
cp
f
363.619 363.031 mo
375.696 363.031 li
375.696 347.777 li
363.619 347.777 li
363.619 363.031 li
cp
376.499 364.635 mo
362.817 364.635 li
362.375 364.635 362.016 364.275 362.016 363.832 cv
362.016 346.975 li
362.016 346.531 362.375 346.172 362.817 346.172 cv
376.499 346.172 li
376.941 346.172 377.301 346.531 377.301 346.975 cv
377.301 363.832 li
377.301 364.275 376.941 364.635 376.499 364.635 cv
cp
f
269.715 384.07 mo
297.692 384.07 li
311.638 369.967 li
311.801 326.719 li
269.715 326.719 li
269.715 384.07 li
cp
298.096 385.994 mo
268.752 385.994 li
268.221 385.994 267.789 385.564 267.789 385.031 cv
267.789 325.758 li
267.789 325.225 268.221 324.795 268.752 324.795 cv
312.767 324.795 li
313.022 324.795 313.27 324.896 313.45 325.078 cv
313.631 325.258 313.73 325.504 313.729 325.762 cv
313.562 370.367 li
313.56 370.621 313.461 370.863 313.283 371.041 cv
298.78 385.709 li
298.6 385.893 298.353 385.994 298.096 385.994 cv
cp
f
305.366 371.328 mo
300.769 371.328 299.059 373.063 299.059 377.727 cv
299.059 382.689 li
310.293 371.328 li
305.366 371.328 li
cp
298.096 385.994 mo
297.973 385.994 297.848 385.971 297.729 385.924 cv
297.368 385.775 297.133 385.422 297.133 385.031 cv
297.133 377.727 li
297.133 371.969 299.672 369.402 305.366 369.402 cv
312.599 369.402 li
312.987 369.402 313.338 369.635 313.488 369.992 cv
313.637 370.352 313.557 370.764 313.283 371.041 cv
298.78 385.709 li
298.597 385.896 298.347 385.994 298.096 385.994 cv
cp
f
268.846 325.758 mo
312.674 325.758 li
312.674 340.574 li
268.846 340.574 li
268.846 325.758 li
cp
ef
302.095 336.291 mo
301.853 336.611 301.496 336.875 301.011 337.121 cv
300.506 337.365 299.89 337.479 299.142 337.479 cv
298.189 337.479 297.422 337.178 296.824 336.592 cv
296.208 335.988 295.908 335.213 295.908 334.252 cv
295.908 332.629 li
295.908 331.664 296.208 330.891 296.787 330.305 cv
297.366 329.701 298.114 329.4 299.012 329.4 cv
299.964 329.4 300.693 329.625 301.198 330.098 cv
301.702 330.57 301.965 331.174 301.965 331.93 cv
301.965 331.967 li
300.488 331.967 li
300.45 331.551 300.32 331.23 300.095 330.986 cv
299.852 330.74 299.516 330.609 299.067 330.609 cv
298.582 330.609 298.207 330.797 297.908 331.174 cv
297.609 331.551 297.479 332.023 297.479 332.607 cv
297.479 334.252 li
297.479 334.855 297.628 335.328 297.928 335.705 cv
298.227 336.082 298.638 336.271 299.142 336.271 cv
299.516 336.271 299.796 336.234 300.02 336.158 cv
300.245 336.082 300.413 335.988 300.525 335.875 cv
300.525 334.422 li
299.142 334.422 li
299.142 333.326 li
302.095 333.326 li
302.095 336.291 li
cp
290.545 333.309 mo
292.077 333.309 li
292.526 333.309 292.843 333.176 293.067 332.949 cv
293.292 332.705 293.404 332.4 293.404 332.023 cv
293.404 331.646 293.292 331.344 293.067 331.1 cv
292.843 330.854 292.526 330.723 292.077 330.723 cv
290.545 330.723 li
290.545 333.309 li
cp
290.545 334.516 mo
290.545 337.365 li
288.976 337.365 li
288.976 329.514 li
292.077 329.514 li
292.975 329.514 293.685 329.738 294.189 330.191 cv
294.713 330.664 294.956 331.27 294.956 332.023 cv
294.956 332.779 294.713 333.383 294.189 333.836 cv
293.685 334.289 292.975 334.516 292.077 334.516 cv
290.545 334.516 li
cp
286.002 329.514 mo
287.555 329.514 li
287.555 335.006 li
287.555 335.76 287.311 336.365 286.824 336.818 cv
286.32 337.252 285.703 337.479 284.956 337.479 cv
284.153 337.479 283.499 337.271 283.03 336.875 cv
282.563 336.479 282.34 335.895 282.34 335.121 cv
282.358 335.082 li
283.872 335.082 li
283.872 335.498 283.965 335.799 284.171 335.988 cv
284.358 336.178 284.638 336.271 284.956 336.271 cv
285.255 336.271 285.498 336.158 285.703 335.932 cv
285.891 335.705 286.002 335.404 286.002 335.006 cv
286.002 329.514 li
cp
281.087 337.365 mo
279.424 337.365 li
279.424 335.895 li
281.087 335.895 li
281.087 337.365 li
cp
0 0 0 0 cmyk
f
276.527 346.258 mo
275.09 346.258 273.92 347.443 273.92 348.9 cv
273.92 350.367 275.09 351.563 276.527 351.563 cv
277.975 351.563 279.153 350.367 279.153 348.9 cv
279.153 347.443 277.975 346.258 276.527 346.258 cv
cp
276.527 353.488 mo
274.027 353.488 271.994 351.43 271.994 348.9 cv
271.994 346.381 274.027 344.332 276.527 344.332 cv
279.037 344.332 281.078 346.381 281.078 348.9 cv
281.078 351.43 279.037 353.488 276.527 353.488 cv
cp
.703914 .0884413 0 0 cmyk
f
275.128 365.023 mo
307.466 365.023 li
307.45 355.688 li
300.83 347.781 li
290.898 356.496 li
290.559 356.793 290.057 356.814 289.692 356.547 cv
284.97 353.066 li
275.128 365.023 li
cp
308.431 366.947 mo
273.088 366.947 li
272.715 366.947 272.377 366.732 272.218 366.395 cv
272.059 366.059 272.107 365.66 272.344 365.373 cv
284.063 351.139 li
284.389 350.742 284.966 350.672 285.378 350.975 cv
290.212 354.537 li
300.302 345.686 li
300.496 345.514 300.753 345.424 301.01 345.447 cv
301.269 345.469 301.508 345.592 301.675 345.791 cv
309.15 354.719 li
309.294 354.893 309.375 355.109 309.375 355.336 cv
309.394 365.982 li
309.394 366.238 309.292 366.484 309.111 366.664 cv
308.932 366.846 308.687 366.947 308.431 366.947 cv
cp
f
190.806 384.07 mo
218.786 384.07 li
232.729 369.986 li
232.893 326.719 li
190.806 326.719 li
190.806 384.07 li
cp
219.188 385.994 mo
189.844 385.994 li
189.312 385.994 188.881 385.564 188.881 385.031 cv
188.881 325.758 li
188.881 325.225 189.312 324.795 189.844 324.795 cv
233.859 324.795 li
234.115 324.795 234.36 324.896 234.542 325.078 cv
234.722 325.258 234.823 325.504 234.822 325.762 cv
234.653 370.387 li
234.652 370.639 234.552 370.881 234.375 371.061 cv
219.872 385.709 li
219.691 385.893 219.444 385.994 219.188 385.994 cv
cp
f
226.458 371.346 mo
221.859 371.346 220.15 373.076 220.15 377.727 cv
220.15 382.691 li
231.382 371.346 li
226.458 371.346 li
cp
219.188 385.994 mo
219.064 385.994 218.94 385.971 218.821 385.924 cv
218.46 385.773 218.225 385.422 218.225 385.031 cv
218.225 377.727 li
218.225 371.982 220.764 369.422 226.458 369.422 cv
233.69 369.422 li
234.08 369.422 234.429 369.654 234.579 370.014 cv
234.729 370.373 234.648 370.785 234.375 371.061 cv
219.872 385.709 li
219.688 385.896 219.439 385.994 219.188 385.994 cv
cp
f
189.937 325.758 mo
233.766 325.758 li
233.766 340.574 li
189.937 340.574 li
189.937 325.758 li
cp
ef
223.318 330.74 mo
221.112 330.74 li
221.112 337.365 li
219.561 337.365 li
219.561 330.74 li
217.375 330.74 li
217.375 329.514 li
223.318 329.514 li
223.318 330.74 li
cp
212.384 333.309 mo
213.917 333.309 li
214.347 333.309 214.683 333.195 214.907 332.949 cv
215.131 332.705 215.243 332.4 215.243 332.043 cv
215.243 331.666 215.131 331.344 214.907 331.1 cv
214.683 330.854 214.347 330.74 213.917 330.74 cv
212.384 330.74 li
212.384 333.309 li
cp
212.384 334.516 mo
212.384 337.365 li
210.814 337.365 li
210.814 329.514 li
213.917 329.514 li
214.813 329.514 215.505 329.738 216.029 330.213 cv
216.533 330.664 216.795 331.27 216.795 332.023 cv
216.795 332.779 216.533 333.383 216.029 333.836 cv
215.505 334.289 214.813 334.516 213.917 334.516 cv
212.384 334.516 li
cp
205.245 333.309 mo
206.796 333.309 li
207.226 333.309 207.543 333.195 207.768 332.949 cv
207.992 332.705 208.104 332.4 208.104 332.043 cv
208.104 331.666 207.992 331.344 207.786 331.1 cv
207.562 330.854 207.226 330.74 206.796 330.74 cv
205.245 330.74 li
205.245 333.309 li
cp
205.245 334.516 mo
205.245 337.365 li
203.693 337.365 li
203.693 329.514 li
206.796 329.514 li
207.674 329.514 208.384 329.738 208.908 330.213 cv
209.413 330.664 209.674 331.27 209.674 332.023 cv
209.674 332.779 209.413 333.383 208.908 333.836 cv
208.384 334.289 207.674 334.516 206.796 334.516 cv
205.245 334.516 li
cp
202.048 337.365 mo
200.385 337.365 li
200.385 335.895 li
202.048 335.895 li
202.048 337.365 li
cp
0 0 0 0 cmyk
f
204.402 370.799 mo
204.243 370.799 204.081 370.76 203.932 370.676 cv
203.468 370.416 203.303 369.83 203.563 369.365 cv
206.909 363.398 li
207.169 362.936 207.755 362.771 208.22 363.031 cv
208.683 363.291 208.849 363.877 208.588 364.342 cv
205.243 370.309 li
205.066 370.621 204.739 370.799 204.402 370.799 cv
cp
219.3 370.799 mo
218.963 370.799 218.636 370.621 218.46 370.309 cv
215.114 364.342 li
214.854 363.877 215.02 363.291 215.483 363.031 cv
215.947 362.771 216.534 362.936 216.793 363.398 cv
220.139 369.365 li
220.399 369.83 220.234 370.416 219.771 370.676 cv
219.621 370.76 219.46 370.799 219.3 370.799 cv
cp
.703914 .0884413 0 0 cmyk
f
211.86 347.881 mo
211.329 347.881 210.898 347.449 210.898 346.918 cv
210.898 344.861 li
210.898 344.33 211.329 343.896 211.86 343.896 cv
212.393 343.896 212.823 344.33 212.823 344.861 cv
212.823 346.918 li
212.823 347.449 212.393 347.881 211.86 347.881 cv
cp
f
197.273 362.908 mo
226.429 362.908 li
226.429 347.881 li
197.273 347.881 li
197.273 362.908 li
cp
227.392 364.834 mo
196.311 364.834 li
195.779 364.834 195.348 364.402 195.348 363.871 cv
195.348 346.918 li
195.348 346.387 195.779 345.955 196.311 345.955 cv
227.392 345.955 li
227.924 345.955 228.354 346.387 228.354 346.918 cv
228.354 363.871 li
228.354 364.402 227.924 364.834 227.392 364.834 cv
cp
f
223.318 360.529 mo
222.786 360.529 222.355 360.098 222.355 359.566 cv
222.355 351.355 li
222.355 350.824 222.786 350.393 223.318 350.393 cv
223.85 350.393 224.281 350.824 224.281 351.355 cv
224.281 359.566 li
224.281 360.098 223.85 360.529 223.318 360.529 cv
cp
f
220.234 360.529 mo
219.704 360.529 219.273 360.1 219.271 359.57 cv
219.252 354.756 li
219.25 354.225 219.68 353.791 220.211 353.789 cv
220.212 353.789 220.214 353.789 220.215 353.789 cv
220.745 353.789 221.176 354.219 221.178 354.748 cv
221.196 359.563 li
221.199 360.094 220.77 360.527 220.238 360.529 cv
220.236 360.529 220.235 360.529 220.234 360.529 cv
cp
f
217.131 360.529 mo
216.6 360.529 216.168 360.098 216.168 359.566 cv
216.168 357.15 li
216.168 356.617 216.6 356.188 217.131 356.188 cv
217.664 356.188 218.094 356.617 218.094 357.15 cv
218.094 359.566 li
218.094 360.098 217.664 360.529 217.131 360.529 cv
cp
f
209.786 352.316 mo
200.329 352.316 li
199.797 352.316 199.367 351.887 199.367 351.355 cv
199.367 350.824 199.797 350.393 200.329 350.393 cv
209.786 350.393 li
210.318 350.393 210.749 350.824 210.749 351.355 cv
210.749 351.887 210.318 352.316 209.786 352.316 cv
cp
f
206.104 356.434 mo
200.329 356.434 li
199.797 356.434 199.367 356.002 199.367 355.469 cv
199.367 354.938 199.797 354.508 200.329 354.508 cv
206.104 354.508 li
206.636 354.508 207.067 354.938 207.067 355.469 cv
207.067 356.002 206.636 356.434 206.104 356.434 cv
cp
f
212.01 360.529 mo
200.329 360.529 li
199.797 360.529 199.367 360.098 199.367 359.566 cv
199.367 359.033 199.797 358.604 200.329 358.604 cv
212.01 358.604 li
212.542 358.604 212.973 359.033 212.973 359.566 cv
212.973 360.098 212.542 360.529 212.01 360.529 cv
cp
f
427.531 289.883 mo
455.511 289.883 li
469.453 275.799 li
469.617 232.551 li
427.531 232.551 li
427.531 289.883 li
cp
455.911 291.807 mo
426.567 291.807 li
426.035 291.807 425.605 291.377 425.605 290.844 cv
425.605 231.589 li
425.605 231.057 426.035 230.626 426.567 230.626 cv
470.583 230.626 li
470.839 230.626 471.085 230.728 471.266 230.91 cv
471.445 231.09 471.548 231.336 471.546 231.592 cv
471.378 276.199 li
471.377 276.453 471.277 276.693 471.1 276.873 cv
456.597 291.523 li
456.414 291.705 456.168 291.807 455.911 291.807 cv
cp
f
463.183 277.158 mo
458.583 277.158 456.874 278.895 456.874 283.559 cv
456.874 288.504 li
468.107 277.158 li
463.183 277.158 li
cp
455.911 291.807 mo
455.788 291.807 455.664 291.783 455.546 291.734 cv
455.186 291.586 454.948 291.234 454.948 290.844 cv
454.948 283.559 li
454.948 277.801 457.487 275.232 463.183 275.232 cv
470.414 275.232 li
470.803 275.232 471.153 275.467 471.303 275.824 cv
471.452 276.184 471.372 276.598 471.1 276.873 cv
456.597 291.523 li
456.411 291.709 456.164 291.807 455.911 291.807 cv
cp
f
426.661 231.589 mo
470.49 231.589 li
470.49 246.407 li
426.661 246.407 li
426.661 231.589 li
cp
ef
456.884 240.008 mo
458.677 240.008 li
458.677 237.158 li
458.64 237.158 li
458.509 237.384 li
456.884 240.008 li
cp
460.229 240.008 mo
461.107 240.008 li
461.107 241.216 li
460.229 241.216 li
460.229 242.916 li
458.677 242.916 li
458.677 241.216 li
455.5 241.216 li
455.426 240.272 li
458.659 235.062 li
460.229 235.062 li
460.229 240.008 li
cp
450.286 238.856 mo
451.818 238.856 li
452.267 238.856 452.585 238.724 452.809 238.498 cv
453.033 238.252 453.145 237.951 453.145 237.572 cv
453.145 237.195 453.033 236.894 452.809 236.648 cv
452.585 236.402 452.267 236.271 451.818 236.271 cv
450.286 236.271 li
450.286 238.856 li
cp
450.286 240.064 mo
450.286 242.916 li
448.715 242.916 li
448.715 235.062 li
451.818 235.062 li
452.715 235.062 453.426 235.289 453.931 235.76 cv
454.453 236.214 454.697 236.818 454.697 237.572 cv
454.697 238.328 454.453 238.933 453.931 239.385 cv
453.426 239.837 452.715 240.064 451.818 240.064 cv
450.286 240.064 li
cp
441.222 235.062 mo
443.202 240.857 li
443.221 240.857 li
445.22 235.062 li
447.257 235.062 li
447.257 242.916 li
445.707 242.916 li
445.707 240.574 li
445.855 237.101 li
445.819 237.101 li
443.744 242.916 li
442.697 242.916 li
440.623 237.12 li
440.586 237.12 li
440.734 240.574 li
440.734 242.916 li
439.185 242.916 li
439.185 235.062 li
441.222 235.062 li
cp
437.595 242.916 mo
436.043 242.916 li
436.043 241.537 li
437.595 241.537 li
437.595 242.916 li
cp
0 0 0 0 cmyk
f
448.565 250.154 mo
441.608 250.154 435.949 255.875 435.949 262.906 cv
435.949 269.938 441.608 275.658 448.565 275.658 cv
455.534 275.658 461.202 269.938 461.202 262.906 cv
461.202 255.875 455.534 250.154 448.565 250.154 cv
cp
448.565 277.262 mo
440.724 277.262 434.344 270.822 434.344 262.906 cv
434.344 254.99 440.724 248.55 448.565 248.55 cv
456.419 248.55 462.806 254.99 462.806 262.906 cv
462.806 270.822 456.419 277.262 448.565 277.262 cv
cp
.703914 .0884413 0 0 cmyk
f
444.977 256.686 mo
444.941 256.686 444.901 256.718 444.901 256.771 cv
444.901 269.043 li
444.901 269.068 444.911 269.1 444.93 269.139 cv
444.92 269.115 444.959 269.123 444.978 269.123 cv
444.989 269.123 445.006 269.121 445.022 269.113 cv
450.155 266.115 li
450.186 266.09 450.22 266.066 450.256 266.047 cv
455.525 262.969 li
455.574 262.904 455.552 262.859 455.519 262.842 cv
450.312 259.807 li
450.268 259.781 450.228 259.752 450.189 259.719 cv
445.042 256.729 li
445.019 256.716 444.997 256.702 444.977 256.686 cv
cp
444.978 270.729 mo
444.376 270.729 443.817 270.41 443.519 269.9 cv
443.363 269.588 443.297 269.316 443.297 269.043 cv
443.297 256.771 li
443.297 255.839 444.042 255.081 444.959 255.081 cv
445.294 255.081 445.608 255.177 445.877 255.358 cv
451.081 258.381 li
451.124 258.406 451.165 258.436 451.204 258.469 cv
456.335 261.457 li
457.132 261.934 457.399 262.959 456.939 263.746 cv
456.8 263.994 456.587 264.209 456.331 264.357 cv
451.183 267.361 li
451.151 267.387 451.118 267.41 451.082 267.432 cv
445.813 270.51 li
445.545 270.654 445.264 270.729 444.978 270.729 cv
cp
f
348.622 289.902 mo
376.603 289.902 li
390.546 275.818 li
390.709 232.551 li
348.622 232.551 li
348.622 289.902 li
cp
377.004 291.828 mo
347.659 291.828 li
347.128 291.828 346.698 291.396 346.698 290.865 cv
346.698 231.589 li
346.698 231.057 347.128 230.626 347.659 230.626 cv
391.676 230.626 li
391.932 230.626 392.178 230.728 392.357 230.91 cv
392.538 231.09 392.64 231.336 392.639 231.592 cv
392.469 276.219 li
392.468 276.473 392.369 276.713 392.191 276.893 cv
377.688 291.541 li
377.507 291.725 377.261 291.828 377.004 291.828 cv
cp
f
384.273 277.178 mo
379.676 277.178 377.967 278.908 377.967 283.559 cv
377.967 288.523 li
389.198 277.178 li
384.273 277.178 li
cp
377.003 291.828 mo
376.88 291.828 376.756 291.803 376.638 291.754 cv
376.277 291.605 376.041 291.254 376.041 290.865 cv
376.041 283.559 li
376.041 277.814 378.58 275.254 384.273 275.254 cv
391.507 275.254 li
391.896 275.254 392.245 275.486 392.396 275.846 cv
392.544 276.203 392.464 276.617 392.191 276.893 cv
377.688 291.541 li
377.504 291.729 377.256 291.828 377.003 291.828 cv
cp
f
347.754 231.589 mo
391.583 231.589 li
391.583 246.407 li
347.754 246.407 li
347.754 231.589 li
cp
ef
364.378 254.668 mo
364.378 258.658 li
377.909 256.889 li
377.909 252.911 li
364.378 254.668 li
cp
374.615 267.176 mo
372.919 267.176 370.939 267.955 370.939 270.154 cv
370.939 271.82 372.502 273.176 374.424 273.176 cv
376.347 273.176 377.909 271.82 377.909 270.154 cv
377.909 268.314 li
377.145 267.605 375.918 267.176 374.615 267.176 cv
cp
359.901 270.816 mo
357.979 270.816 356.416 272.172 356.416 273.838 cv
356.416 275.514 357.979 276.877 359.901 276.877 cv
362.02 276.877 362.498 275.109 362.527 273.629 cv
362.549 273.084 362.521 272.668 362.492 272.264 cv
362.48 272.104 362.471 271.947 362.462 271.793 cv
361.813 271.168 360.897 270.816 359.901 270.816 cv
cp
359.901 278.801 mo
356.918 278.801 354.491 276.574 354.491 273.838 cv
354.491 271.111 356.918 268.891 359.901 268.891 cv
360.812 268.891 361.683 269.094 362.453 269.469 cv
362.453 254.242 li
362.453 253.528 362.969 252.929 363.679 252.819 cv
378.226 250.928 li
378.278 250.92 378.348 250.915 378.416 250.915 cv
378.771 250.915 379.104 251.046 379.357 251.288 cv
379.661 251.56 379.835 251.946 379.835 252.354 cv
379.835 270.154 li
379.835 272.881 377.407 275.102 374.424 275.102 cv
371.441 275.102 369.014 272.881 369.014 270.154 cv
369.014 267.268 371.317 265.25 374.615 265.25 cv
375.81 265.25 376.949 265.52 377.909 266.004 cv
377.909 258.832 li
364.378 260.6 li
364.378 271.402 li
364.378 271.643 364.396 271.879 364.413 272.131 cv
364.442 272.564 364.477 273.055 364.452 273.686 cv
364.391 276.834 362.647 278.801 359.901 278.801 cv
cp
f
378.442 238.329 mo
379.321 238.329 li
379.676 238.329 379.957 238.234 380.144 238.045 cv
380.312 237.837 380.404 237.572 380.404 237.233 cv
380.404 236.912 380.312 236.667 380.144 236.478 cv
379.957 236.29 379.694 236.195 379.358 236.195 cv
379.078 236.195 378.816 236.271 378.629 236.44 cv
378.424 236.611 378.33 236.836 378.33 237.12 cv
376.816 237.12 li
376.798 237.082 li
376.779 236.478 377.021 235.969 377.508 235.572 cv
377.994 235.176 378.593 234.987 379.321 234.987 cv
380.125 234.987 380.76 235.176 381.246 235.553 cv
381.732 235.95 381.956 236.497 381.956 237.214 cv
381.956 237.554 381.863 237.875 381.638 238.177 cv
381.433 238.479 381.134 238.724 380.76 238.895 cv
381.189 239.045 381.526 239.29 381.75 239.593 cv
381.976 239.914 382.087 240.291 382.087 240.707 cv
382.087 241.424 381.826 241.99 381.302 242.406 cv
380.798 242.802 380.125 243.01 379.321 243.01 cv
378.593 243.01 377.976 242.821 377.452 242.424 cv
376.948 242.047 376.686 241.5 376.705 240.801 cv
376.723 240.782 li
378.237 240.782 li
378.237 241.065 378.33 241.311 378.556 241.519 cv
378.761 241.707 379.041 241.802 379.358 241.802 cv
379.714 241.802 380.013 241.707 380.218 241.5 cv
380.424 241.311 380.536 241.027 380.536 240.688 cv
380.536 240.291 380.424 239.99 380.218 239.801 cv
380.013 239.593 379.714 239.499 379.321 239.499 cv
378.442 239.499 li
378.442 238.329 li
cp
371.49 238.856 mo
373.023 238.856 li
373.471 238.856 373.789 238.743 374.014 238.498 cv
374.237 238.272 374.35 237.969 374.35 237.592 cv
374.35 237.214 374.237 236.912 374.014 236.667 cv
373.807 236.421 373.471 236.308 373.023 236.308 cv
371.49 236.308 li
371.49 238.856 li
cp
371.49 240.064 mo
371.49 242.896 li
369.938 242.896 li
369.938 235.1 li
373.023 235.1 li
373.919 235.1 374.629 235.327 375.135 235.78 cv
375.657 236.233 375.92 236.836 375.92 237.592 cv
375.92 238.329 375.657 238.933 375.135 239.385 cv
374.629 239.839 373.919 240.064 373.023 240.064 cv
371.49 240.064 li
cp
362.426 235.1 mo
364.407 240.838 li
364.425 240.838 li
366.424 235.1 li
368.48 235.1 li
368.48 242.896 li
366.91 242.896 li
366.91 240.574 li
367.061 237.12 li
367.022 237.12 li
364.948 242.896 li
363.901 242.896 li
361.827 237.139 li
361.79 237.139 li
361.939 240.574 li
361.939 242.896 li
360.388 242.896 li
360.388 235.1 li
362.426 235.1 li
cp
358.8 242.896 mo
357.248 242.896 li
357.248 241.519 li
358.8 241.519 li
358.8 242.896 li
cp
0 0 0 0 cmyk
f
269.715 289.9 mo
297.695 289.9 li
311.638 275.818 li
311.801 232.551 li
269.715 232.551 li
269.715 289.9 li
cp
298.096 291.826 mo
268.752 291.826 li
268.221 291.826 267.789 291.395 267.789 290.863 cv
267.789 231.589 li
267.789 231.057 268.221 230.626 268.752 230.626 cv
312.767 230.626 li
313.022 230.626 313.27 230.728 313.45 230.91 cv
313.631 231.09 313.73 231.336 313.729 231.592 cv
313.562 276.219 li
313.56 276.473 313.461 276.713 313.283 276.893 cv
298.78 291.541 li
298.599 291.723 298.353 291.826 298.096 291.826 cv
cp
.703914 .0884413 0 0 cmyk
f
305.366 277.178 mo
300.769 277.178 299.059 278.906 299.059 283.559 cv
299.059 288.523 li
310.29 277.178 li
305.366 277.178 li
cp
298.096 291.826 mo
297.972 291.826 297.848 291.803 297.729 291.754 cv
297.368 291.605 297.133 291.254 297.133 290.863 cv
297.133 283.559 li
297.133 277.814 299.672 275.252 305.366 275.252 cv
312.599 275.252 li
312.987 275.252 313.338 275.486 313.488 275.844 cv
313.637 276.203 313.557 276.617 313.283 276.893 cv
298.78 291.541 li
298.596 291.727 298.347 291.826 298.096 291.826 cv
cp
f
268.846 231.589 mo
312.674 231.589 li
312.674 246.407 li
268.846 246.407 li
268.846 231.589 li
cp
ef
301.702 236.573 mo
299.498 236.573 li
299.498 243.217 li
297.945 243.217 li
297.945 236.573 li
295.759 236.573 li
295.759 235.345 li
301.702 235.345 li
301.702 236.573 li
cp
292.115 238.139 mo
293.572 235.345 li
295.386 235.345 li
293.067 239.252 li
295.516 243.217 li
293.628 243.217 li
292.133 240.386 li
290.619 243.217 li
288.806 243.217 li
291.18 239.252 li
288.862 235.345 li
290.676 235.345 li
292.115 238.139 li
cp
288.489 236.573 mo
286.303 236.573 li
286.303 243.217 li
284.731 243.217 li
284.731 236.573 li
282.545 236.573 li
282.545 235.345 li
288.489 235.345 li
288.489 236.573 li
cp
281.48 243.217 mo
279.815 243.217 li
279.815 241.726 li
281.48 241.726 li
281.48 243.217 li
cp
0 0 0 0 cmyk
f
305.422 256.639 mo
295.74 256.639 li
295.208 256.639 294.778 256.208 294.778 255.676 cv
294.778 255.143 295.208 254.713 295.74 254.713 cv
305.422 254.713 li
305.954 254.713 306.385 255.143 306.385 255.676 cv
306.385 256.208 305.954 256.639 305.422 256.639 cv
cp
.703914 .0884413 0 0 cmyk
f
305.422 263.436 mo
276.078 263.436 li
275.546 263.436 275.115 263.004 275.115 262.473 cv
275.115 261.941 275.546 261.51 276.078 261.51 cv
305.422 261.51 li
305.954 261.51 306.385 261.941 306.385 262.473 cv
306.385 263.004 305.954 263.436 305.422 263.436 cv
cp
f
305.422 270.23 mo
287.498 270.23 li
286.966 270.23 286.535 269.801 286.535 269.268 cv
286.535 268.736 286.966 268.305 287.498 268.305 cv
305.422 268.305 li
305.954 268.305 306.385 268.736 306.385 269.268 cv
306.385 269.801 305.954 270.23 305.422 270.23 cv
cp
f
290.75 277.008 mo
276.078 277.008 li
275.546 277.008 275.115 276.576 275.115 276.045 cv
275.115 275.514 275.546 275.082 276.078 275.082 cv
290.75 275.082 li
291.282 275.082 291.712 275.514 291.712 276.045 cv
291.712 276.576 291.282 277.008 290.75 277.008 cv
cp
f
289.479 256.639 mo
276.078 256.639 li
275.546 256.639 275.115 256.208 275.115 255.676 cv
275.115 255.143 275.546 254.713 276.078 254.713 cv
289.479 254.713 li
290.011 254.713 290.442 255.143 290.442 255.676 cv
290.442 256.208 290.011 256.639 289.479 256.639 cv
cp
f
283.293 270.23 mo
276.078 270.23 li
275.546 270.23 275.115 269.801 275.115 269.268 cv
275.115 268.736 275.546 268.305 276.078 268.305 cv
283.293 268.305 li
283.824 268.305 284.256 268.736 284.256 269.268 cv
284.256 269.801 283.824 270.23 283.293 270.23 cv
cp
f
190.806 289.883 mo
218.786 289.883 li
232.729 275.799 li
232.893 232.551 li
190.806 232.551 li
190.806 289.883 li
cp
219.188 291.807 mo
189.844 291.807 li
189.312 291.807 188.881 291.377 188.881 290.844 cv
188.881 231.589 li
188.881 231.057 189.312 230.626 189.844 230.626 cv
233.859 230.626 li
234.115 230.626 234.36 230.728 234.542 230.91 cv
234.722 231.09 234.823 231.336 234.822 231.592 cv
234.653 276.199 li
234.652 276.453 234.552 276.693 234.375 276.873 cv
219.872 291.523 li
219.691 291.705 219.444 291.807 219.188 291.807 cv
cp
f
226.458 277.158 mo
221.859 277.158 220.15 278.895 220.15 283.559 cv
220.15 288.504 li
231.382 277.158 li
226.458 277.158 li
cp
219.188 291.807 mo
219.064 291.807 218.94 291.783 218.821 291.734 cv
218.46 291.586 218.225 291.234 218.225 290.844 cv
218.225 283.559 li
218.225 277.801 220.764 275.232 226.458 275.232 cv
233.69 275.232 li
234.08 275.232 234.429 275.467 234.579 275.824 cv
234.729 276.184 234.648 276.598 234.375 276.873 cv
219.872 291.523 li
219.688 291.709 219.439 291.807 219.188 291.807 cv
cp
f
189.937 231.589 mo
233.766 231.589 li
233.766 246.407 li
189.937 246.407 li
189.937 231.589 li
cp
ef
219.037 236.554 mo
219.037 241.99 li
220.065 241.99 li
220.627 241.99 221.075 241.802 221.393 241.405 cv
221.71 241.027 221.859 240.537 221.859 239.914 cv
221.859 238.611 li
221.859 238.007 221.71 237.516 221.393 237.12 cv
221.075 236.743 220.627 236.554 220.065 236.554 cv
219.037 236.554 li
cp
217.486 243.198 mo
217.486 235.345 li
220.159 235.345 li
221.093 235.345 221.878 235.647 222.495 236.271 cv
223.112 236.875 223.43 237.667 223.43 238.63 cv
223.43 239.933 li
223.43 240.895 223.112 241.669 222.495 242.292 cv
221.878 242.896 221.093 243.198 220.159 243.198 cv
217.486 243.198 li
cp
214.739 241.141 mo
214.739 240.838 214.627 240.612 214.421 240.424 cv
214.215 240.234 213.842 240.064 213.3 239.914 cv
212.384 239.63 211.674 239.31 211.207 238.951 cv
210.739 238.573 210.496 238.064 210.496 237.422 cv
210.496 236.78 210.758 236.251 211.318 235.836 cv
211.86 235.44 212.552 235.232 213.393 235.232 cv
214.253 235.232 214.945 235.458 215.486 235.912 cv
216.01 236.384 216.271 236.95 216.253 237.61 cv
216.253 237.648 li
214.739 237.648 li
214.739 237.29 214.608 237.006 214.384 236.78 cv
214.141 236.554 213.805 236.44 213.356 236.44 cv
212.945 236.44 212.627 236.535 212.403 236.724 cv
212.179 236.912 212.047 237.139 212.047 237.441 cv
212.047 237.705 212.179 237.913 212.421 238.082 cv
212.664 238.252 213.094 238.441 213.692 238.63 cv
214.552 238.856 215.188 239.178 215.637 239.574 cv
216.084 239.97 216.29 240.499 216.29 241.141 cv
216.29 241.802 216.029 242.33 215.505 242.727 cv
214.982 243.123 214.291 243.312 213.431 243.312 cv
212.589 243.312 211.842 243.085 211.207 242.651 cv
210.59 242.217 210.272 241.593 210.291 240.801 cv
210.31 240.763 li
211.823 240.763 li
211.823 241.235 211.954 241.575 212.253 241.782 cv
212.533 242.009 212.926 242.123 213.431 242.123 cv
213.86 242.123 214.178 242.028 214.403 241.858 cv
214.627 241.669 214.739 241.443 214.739 241.141 cv
214.739 241.141 li
cp
204.964 239.14 mo
206.515 239.14 li
206.945 239.14 207.282 239.008 207.506 238.781 cv
207.73 238.536 207.842 238.234 207.842 237.856 cv
207.842 237.478 207.73 237.177 207.506 236.931 cv
207.282 236.686 206.945 236.554 206.515 236.554 cv
204.964 236.554 li
204.964 239.14 li
cp
204.964 240.348 mo
204.964 243.198 li
203.413 243.198 li
203.413 235.345 li
206.515 235.345 li
207.413 235.345 208.104 235.572 208.627 236.025 cv
209.132 236.497 209.394 237.101 209.394 237.856 cv
209.394 238.593 209.132 239.197 208.627 239.668 cv
208.104 240.121 207.413 240.348 206.515 240.348 cv
204.964 240.348 li
cp
201.824 243.198 mo
200.273 243.198 li
200.273 241.82 li
201.824 241.82 li
201.824 243.198 li
cp
0 0 0 0 cmyk
f
206.889 273.516 mo
207.068 273.645 li
208.782 271.131 210.946 268.529 213.046 266.004 cv
216.686 261.625 220.429 257.121 222.018 252.936 cv
218.372 255.91 215.029 261.137 211.78 266.217 cv
210.107 268.834 208.518 271.318 206.889 273.516 cv
cp
207.319 275.971 mo
207.12 275.971 206.924 275.908 206.759 275.791 cv
204.965 274.508 li
204.752 274.355 204.61 274.123 204.572 273.863 cv
204.534 273.605 204.603 273.342 204.763 273.135 cv
206.552 270.818 208.303 268.08 210.158 265.182 cv
214.146 258.943 218.27 252.494 223.176 249.828 cv
223.499 249.653 223.893 249.676 224.193 249.889 cv
224.493 250.101 224.645 250.466 224.585 250.829 cv
223.713 256.183 219.042 261.801 214.526 267.234 cv
212.122 270.125 209.851 272.857 208.128 275.529 cv
207.986 275.75 207.759 275.902 207.5 275.953 cv
207.439 275.963 207.379 275.971 207.319 275.971 cv
cp
.703914 .0884413 0 0 cmyk
f
203.728 277.02 mo
201.262 278.051 201.176 279.016 201.04 280.555 cv
200.957 281.498 200.858 282.607 200.197 283.797 cv
202.658 283.764 203.669 282.547 204.422 281.404 cv
205.006 280.463 205.091 279.01 204.912 277.867 cv
203.728 277.02 li
cp
200.09 285.725 mo
200.09 285.725 200.09 285.725 200.09 285.725 cv
199.509 285.725 198.884 285.672 198.232 285.566 cv
197.878 285.51 197.585 285.26 197.472 284.918 cv
197.358 284.58 197.444 284.203 197.694 283.945 cv
198.918 282.682 199.017 281.566 199.122 280.385 cv
199.281 278.594 199.46 276.564 203.522 275.031 cv
203.822 274.918 204.161 274.963 204.422 275.15 cv
206.347 276.527 li
206.541 276.666 206.675 276.871 206.727 277.104 cv
207.042 278.549 207.054 280.814 206.044 282.443 cv
205.028 283.982 203.447 285.725 200.09 285.725 cv
cp
f
427.531 195.733 mo
455.511 195.733 li
469.453 181.649 li
469.617 138.384 li
427.531 138.384 li
427.531 195.733 li
cp
455.911 197.658 mo
426.567 197.658 li
426.035 197.658 425.605 197.227 425.605 196.696 cv
425.605 137.421 li
425.605 136.889 426.035 136.458 426.567 136.458 cv
470.583 136.458 li
470.839 136.458 471.085 136.56 471.266 136.742 cv
471.445 136.923 471.548 137.168 471.546 137.425 cv
471.378 182.051 li
471.377 182.303 471.277 182.544 471.1 182.724 cv
456.597 197.373 li
456.414 197.556 456.168 197.658 455.911 197.658 cv
cp
f
463.183 183.009 mo
458.583 183.009 456.874 184.739 456.874 189.39 cv
456.874 194.355 li
468.107 183.009 li
463.183 183.009 li
cp
455.911 197.658 mo
455.788 197.658 455.664 197.634 455.546 197.586 cv
455.186 197.438 454.948 197.085 454.948 196.696 cv
454.948 189.39 li
454.948 183.646 457.487 181.084 463.183 181.084 cv
470.414 181.084 li
470.803 181.084 471.153 181.317 471.303 181.676 cv
471.452 182.035 471.372 182.448 471.1 182.724 cv
456.597 197.373 li
456.411 197.559 456.164 197.658 455.911 197.658 cv
cp
f
426.661 137.421 mo
470.49 137.421 li
470.49 152.24 li
426.661 152.24 li
426.661 137.421 li
cp
ef
460.657 147.955 mo
460.416 148.275 460.061 148.54 459.575 148.785 cv
459.088 149.03 458.453 149.144 457.705 149.144 cv
456.771 149.144 455.985 148.86 455.389 148.256 cv
454.789 147.652 454.473 146.879 454.473 145.935 cv
454.473 144.292 li
454.473 143.348 454.771 142.574 455.352 141.97 cv
455.931 141.366 456.678 141.064 457.593 141.064 cv
458.528 141.064 459.257 141.31 459.762 141.762 cv
460.267 142.235 460.527 142.839 460.527 143.613 cv
460.527 143.631 li
459.051 143.631 li
459.033 143.216 458.901 142.895 458.659 142.649 cv
458.416 142.405 458.08 142.292 457.631 142.292 cv
457.145 142.292 456.771 142.48 456.472 142.839 cv
456.173 143.216 456.043 143.688 456.043 144.273 cv
456.043 145.935 li
456.043 146.52 456.191 147.01 456.49 147.369 cv
456.79 147.747 457.201 147.936 457.705 147.936 cv
458.08 147.936 458.359 147.897 458.583 147.823 cv
458.81 147.747 458.977 147.652 459.088 147.54 cv
459.088 146.105 li
457.705 146.105 li
457.705 145.009 li
460.657 145.009 li
460.657 147.955 li
cp
453.22 149.03 mo
451.67 149.03 li
448.528 143.669 li
448.49 143.669 li
448.49 149.03 li
446.921 149.03 li
446.921 141.177 li
448.49 141.177 li
451.63 146.539 li
451.67 146.539 li
451.67 141.177 li
453.22 141.177 li
453.22 149.03 li
cp
441.371 144.971 mo
442.903 144.971 li
443.333 144.971 443.669 144.859 443.894 144.613 cv
444.117 144.367 444.229 144.065 444.229 143.707 cv
444.229 143.33 444.117 143.009 443.894 142.763 cv
443.669 142.518 443.333 142.405 442.903 142.405 cv
441.371 142.405 li
441.371 144.971 li
cp
441.371 146.18 mo
441.371 149.03 li
439.801 149.03 li
439.801 141.177 li
442.903 141.177 li
443.8 141.177 444.49 141.404 445.015 141.875 cv
445.52 142.329 445.782 142.933 445.782 143.688 cv
445.782 144.443 445.52 145.047 445.015 145.501 cv
444.49 145.953 443.8 146.18 442.903 146.18 cv
441.371 146.18 li
cp
438.155 149.03 mo
436.492 149.03 li
436.492 147.558 li
438.155 147.558 li
438.155 149.03 li
cp
0 0 0 0 cmyk
f
443.65 165.793 mo
443.65 162.471 li
440.38 162.471 li
440.38 165.793 li
443.65 165.793 li
cp
446.94 169.097 mo
446.94 165.793 li
443.65 165.793 li
443.65 169.097 li
446.94 169.097 li
cp
450.21 172.401 mo
450.21 169.097 li
446.94 169.097 li
446.94 172.401 li
450.21 172.401 li
cp
453.48 175.723 mo
453.48 172.401 li
450.21 172.401 li
450.21 175.723 li
453.48 175.723 li
cp
443.65 172.401 mo
443.65 169.097 li
440.38 169.097 li
440.38 172.401 li
443.65 172.401 li
cp
446.94 175.723 mo
446.94 172.401 li
443.65 172.401 li
443.65 175.723 li
446.94 175.723 li
cp
453.48 169.097 mo
453.48 172.401 li
456.771 172.401 li
456.771 169.097 li
453.48 169.097 li
cp
450.21 165.793 mo
450.21 169.097 li
453.48 169.097 li
453.48 165.793 li
450.21 165.793 li
cp
446.94 162.471 mo
446.94 165.793 li
450.21 165.793 li
450.21 162.471 li
446.94 162.471 li
cp
443.65 159.167 mo
443.65 162.471 li
446.94 162.471 li
446.94 159.167 li
443.65 159.167 li
cp
453.48 162.471 mo
453.48 165.793 li
456.771 165.793 li
456.771 162.471 li
453.48 162.471 li
cp
450.21 159.167 mo
450.21 162.471 li
453.48 162.471 li
453.48 159.167 li
450.21 159.167 li
cp
437.109 155.864 mo
440.38 155.864 li
440.38 159.167 li
443.65 159.167 li
443.65 155.864 li
446.94 155.864 li
446.94 159.167 li
450.21 159.167 li
450.21 155.864 li
453.48 155.864 li
453.48 159.167 li
456.771 159.167 li
456.771 155.864 li
460.043 155.864 li
460.043 159.167 li
456.771 159.167 li
456.771 162.471 li
460.043 162.471 li
460.043 165.793 li
456.771 165.793 li
456.771 169.097 li
460.043 169.097 li
460.043 172.401 li
456.771 172.401 li
456.771 175.723 li
460.043 175.723 li
460.043 179.026 li
456.771 179.026 li
456.771 175.723 li
453.48 175.723 li
453.48 179.026 li
450.21 179.026 li
450.21 175.723 li
446.94 175.723 li
446.94 179.026 li
443.65 179.026 li
443.65 175.723 li
440.38 175.723 li
440.38 179.026 li
437.109 179.026 li
437.109 175.723 li
440.38 175.723 li
440.38 172.401 li
437.109 172.401 li
437.109 169.097 li
440.38 169.097 li
440.38 165.793 li
437.109 165.793 li
437.109 162.471 li
440.38 162.471 li
440.38 159.167 li
437.109 159.167 li
437.109 155.864 li
cp
.703914 .0884413 0 0 cmyk
ef
348.622 195.714 mo
376.603 195.714 li
390.546 181.631 li
390.709 138.384 li
348.622 138.384 li
348.622 195.714 li
cp
377.004 197.639 mo
347.659 197.639 li
347.128 197.639 346.698 197.208 346.698 196.677 cv
346.698 137.421 li
346.698 136.889 347.128 136.458 347.659 136.458 cv
391.676 136.458 li
391.932 136.458 392.178 136.56 392.357 136.742 cv
392.538 136.923 392.64 137.168 392.639 137.425 cv
392.469 182.032 li
392.468 182.285 392.369 182.526 392.191 182.706 cv
377.688 197.354 li
377.507 197.537 377.261 197.639 377.004 197.639 cv
cp
f
384.273 182.991 mo
379.676 182.991 377.967 184.725 377.967 189.391 cv
377.967 194.336 li
389.198 182.991 li
384.273 182.991 li
cp
377.003 197.639 mo
376.88 197.639 376.756 197.616 376.638 197.567 cv
376.277 197.418 376.041 197.067 376.041 196.677 cv
376.041 189.391 li
376.041 183.633 378.58 181.065 384.273 181.065 cv
391.507 181.065 li
391.896 181.065 392.245 181.298 392.396 181.657 cv
392.544 182.016 392.464 182.429 392.191 182.706 cv
377.688 197.354 li
377.504 197.54 377.256 197.639 377.003 197.639 cv
cp
f
347.754 137.421 mo
391.583 137.421 li
391.583 152.221 li
347.754 152.221 li
347.754 137.421 li
cp
ef
374.724 144.953 mo
376.256 144.953 li
376.686 144.953 377.021 144.84 377.246 144.595 cv
377.47 144.368 377.582 144.066 377.582 143.688 cv
377.582 143.311 377.47 143.009 377.246 142.744 cv
377.021 142.5 376.705 142.386 376.256 142.386 cv
374.724 142.386 li
374.724 144.953 li
cp
374.724 146.18 mo
374.724 149.03 li
373.153 149.03 li
373.153 141.177 li
376.256 141.177 li
377.153 141.177 377.863 141.404 378.368 141.857 cv
378.872 142.31 379.135 142.933 379.135 143.669 cv
379.135 144.425 378.872 145.028 378.368 145.482 cv
377.863 145.953 377.153 146.18 376.256 146.18 cv
374.724 146.18 li
cp
371.603 149.03 mo
370.051 149.03 li
370.051 141.177 li
371.603 141.177 li
371.603 149.03 li
cp
365.079 147.804 mo
368.873 147.804 li
368.873 149.03 li
363.191 149.03 li
363.191 148.2 li
366.893 142.386 li
363.191 142.386 li
363.191 141.177 li
368.78 141.177 li
368.78 141.952 li
365.079 147.804 li
cp
361.864 149.03 mo
360.182 149.03 li
360.182 147.54 li
361.864 147.54 li
361.864 149.03 li
cp
0 0 0 0 cmyk
f
364.648 156.959 mo
357.398 156.959 li
356.865 156.959 356.436 156.528 356.436 155.997 cv
356.436 155.465 356.865 155.034 357.398 155.034 cv
364.648 155.034 li
365.182 155.034 365.611 155.465 365.611 155.997 cv
365.611 156.528 365.182 156.959 364.648 156.959 cv
cp
.703914 .0884413 0 0 cmyk
f
364.648 161.036 mo
357.398 161.036 li
356.865 161.036 356.436 160.605 356.436 160.074 cv
356.436 159.542 356.865 159.111 357.398 159.111 cv
364.648 159.111 li
365.182 159.111 365.611 159.542 365.611 160.074 cv
365.611 160.605 365.182 161.036 364.648 161.036 cv
cp
f
361.024 178.158 mo
360.491 178.158 360.062 177.728 360.062 177.196 cv
360.062 150.88 li
360.062 150.348 360.491 149.917 361.024 149.917 cv
361.556 149.917 361.985 150.348 361.985 150.88 cv
361.985 177.196 li
361.985 177.728 361.556 178.158 361.024 178.158 cv
cp
f
364.648 165.113 mo
357.398 165.113 li
356.865 165.113 356.436 164.683 356.436 164.151 cv
356.436 163.619 356.865 163.188 357.398 163.188 cv
364.648 163.188 li
365.182 163.188 365.611 163.619 365.611 164.151 cv
365.611 164.683 365.182 165.113 364.648 165.113 cv
cp
f
364.648 169.191 mo
357.398 169.191 li
356.865 169.191 356.436 168.761 356.436 168.229 cv
356.436 167.697 356.865 167.266 357.398 167.266 cv
364.648 167.266 li
365.182 167.266 365.611 167.697 365.611 168.229 cv
365.611 168.761 365.182 169.191 364.648 169.191 cv
cp
f
364.648 173.25 mo
357.398 173.25 li
356.865 173.25 356.436 172.819 356.436 172.287 cv
356.436 171.755 356.865 171.325 357.398 171.325 cv
364.648 171.325 li
365.182 171.325 365.611 171.755 365.611 172.287 cv
365.611 172.819 365.182 173.25 364.648 173.25 cv
cp
f
357.975 178.158 mo
356.951 186.972 li
356.848 187.876 357.154 188.783 357.813 189.522 cv
358.614 190.42 359.815 190.957 361.024 190.957 cv
362.222 190.957 363.413 190.422 364.213 189.526 cv
364.873 188.786 365.18 187.878 365.076 186.971 cv
364.053 178.158 li
357.975 178.158 li
cp
361.024 192.882 mo
359.275 192.882 357.539 192.105 356.376 190.803 cv
355.347 189.649 354.872 188.211 355.038 186.751 cv
356.16 177.085 li
356.217 176.6 356.629 176.233 357.117 176.233 cv
364.911 176.233 li
365.399 176.233 365.812 176.6 365.867 177.085 cv
366.988 186.75 li
367.155 188.212 366.68 189.652 365.649 190.808 cv
364.491 192.107 362.762 192.882 361.024 192.882 cv
cp
f
359.821 185.785 mo
359.674 186.678 li
359.637 186.916 359.709 187.147 359.895 187.365 cv
360.162 187.678 360.604 187.881 361.024 187.881 cv
361.432 187.881 361.867 187.68 362.132 187.369 cv
362.26 187.218 362.402 186.975 362.354 186.676 cv
362.207 185.785 li
359.821 185.785 li
cp
361.024 189.806 mo
360.034 189.806 359.064 189.36 358.429 188.612 cv
357.877 187.964 357.644 187.167 357.773 186.367 cv
358.056 184.665 li
358.132 184.2 358.533 183.86 359.005 183.86 cv
363.023 183.86 li
363.495 183.86 363.896 184.201 363.974 184.666 cv
364.254 186.365 li
364.384 187.167 364.151 187.966 363.599 188.616 cv
362.964 189.361 362.002 189.806 361.024 189.806 cv
cp
f
269.715 195.733 mo
297.695 195.733 li
311.638 181.649 li
311.801 138.384 li
269.715 138.384 li
269.715 195.733 li
cp
298.096 197.659 mo
268.752 197.659 li
268.221 197.659 267.789 197.228 267.789 196.696 cv
267.789 137.421 li
267.789 136.889 268.221 136.458 268.752 136.458 cv
312.767 136.458 li
313.022 136.458 313.27 136.56 313.45 136.742 cv
313.631 136.923 313.73 137.168 313.729 137.425 cv
313.562 182.051 li
313.56 182.303 313.461 182.544 313.283 182.724 cv
298.78 197.374 li
298.599 197.556 298.353 197.659 298.096 197.659 cv
cp
f
305.366 183.009 mo
300.769 183.009 299.059 184.739 299.059 189.391 cv
299.059 194.355 li
310.29 183.009 li
305.366 183.009 li
cp
298.096 197.659 mo
297.973 197.659 297.848 197.635 297.729 197.586 cv
297.368 197.438 297.133 197.086 297.133 196.696 cv
297.133 189.391 li
297.133 183.646 299.672 181.084 305.366 181.084 cv
312.599 181.084 li
312.987 181.084 313.338 181.317 313.488 181.676 cv
313.637 182.035 313.557 182.448 313.283 182.724 cv
298.78 197.374 li
298.596 197.56 298.347 197.659 298.096 197.659 cv
cp
f
268.846 137.421 mo
312.674 137.421 li
312.674 152.24 li
268.846 152.24 li
268.846 137.421 li
cp
ef
298.693 145.765 mo
297.833 145.765 li
297.833 149.049 li
296.264 149.049 li
296.264 141.177 li
297.833 141.177 li
297.833 144.406 li
298.507 144.406 li
300.563 141.177 li
302.487 141.177 li
299.852 144.859 li
302.692 149.049 li
300.786 149.049 li
298.693 145.765 li
cp
290.693 144.972 mo
292.245 144.972 li
292.675 144.972 293.011 144.859 293.236 144.613 cv
293.46 144.387 293.572 144.066 293.572 143.708 cv
293.572 143.33 293.46 143.009 293.236 142.764 cv
293.011 142.518 292.675 142.405 292.245 142.405 cv
290.693 142.405 li
290.693 144.972 li
cp
290.693 146.199 mo
290.693 149.049 li
289.144 149.049 li
289.144 141.177 li
292.245 141.177 li
293.143 141.177 293.833 141.424 294.357 141.876 cv
294.861 142.329 295.124 142.933 295.124 143.689 cv
295.124 144.443 294.861 145.047 294.357 145.501 cv
293.833 145.973 293.143 146.199 292.245 146.199 cv
290.693 146.199 li
cp
283.965 146.143 mo
285.929 146.143 li
284.956 143.027 li
284.938 143.027 li
283.965 146.143 li
cp
286.303 147.351 mo
283.573 147.351 li
283.05 149.049 li
281.48 149.049 li
284.153 141.177 li
285.741 141.177 li
288.414 149.049 li
286.844 149.049 li
286.303 147.351 li
cp
280.489 149.049 mo
278.825 149.049 li
278.825 147.559 li
280.489 147.559 li
280.489 149.049 li
cp
0 0 0 0 cmyk
f
270.527 173.874 mo
272.732 169.079 278.283 166.738 283.255 168.625 cv
288.227 170.532 290.862 175.987 289.404 181.047 cv
270.527 173.874 li
cp
288.339 170.306 mo
291.292 167.927 li
291.629 167.663 291.685 167.171 291.423 166.833 cv
291.162 166.474 290.676 166.417 290.339 166.7 cv
287.198 169.191 li
286.228 168.342 285.087 167.644 283.797 167.153 cv
282.526 166.681 281.218 166.454 279.91 166.417 cv
279.2 162.471 li
279.125 162.037 278.714 161.754 278.303 161.83 cv
277.872 161.905 277.593 162.32 277.666 162.736 cv
278.34 166.492 li
274.153 167.001 270.359 169.777 268.771 174.043 cv
268.752 174.081 li
268.752 174.553 li
268.827 174.779 268.977 174.968 269.219 175.044 cv
289.609 182.802 li
290.002 182.954 290.451 182.765 290.619 182.35 cv
292.188 178.083 291.162 173.477 288.339 170.306 cv
288.339 170.306 li
cp
.703914 .0884413 0 0 cmyk
ef
289.329 183.539 mo
268.939 175.78 li
268.883 175.761 268.809 175.742 268.752 175.742 cv
268.752 178.537 li
269.125 177.536 li
288.059 184.747 li
283.592 196.696 li
285.255 196.696 li
289.778 184.558 li
289.928 184.162 289.741 183.708 289.329 183.539 cv
289.329 183.539 li
cp
ef
293.217 189.145 mo
292.993 189.749 292.32 190.07 291.722 189.824 cv
291.105 189.599 290.806 188.918 291.029 188.314 cv
294.881 178.026 li
295.104 177.403 295.778 177.102 296.376 177.328 cv
296.975 177.554 297.291 178.234 297.049 178.857 cv
293.217 189.145 li
cp
296.918 175.855 mo
295.516 175.327 293.946 176.044 293.423 177.459 cv
289.572 187.748 li
289.049 189.183 289.76 190.769 291.162 191.297 cv
292.563 191.844 294.151 191.127 294.676 189.693 cv
298.507 179.404 li
299.049 177.989 298.339 176.403 296.918 175.855 cv
296.918 175.855 li
cp
ef
278.19 170.494 mo
278.77 170.721 279.05 171.363 278.845 171.929 cv
278.621 172.514 277.984 172.797 277.424 172.589 cv
276.844 172.363 276.564 171.721 276.771 171.155 cv
276.994 170.57 277.629 170.287 278.19 170.494 cv
278.19 170.494 li
cp
ef
285.834 173.401 mo
286.396 173.627 286.694 174.27 286.471 174.835 cv
286.265 175.421 285.629 175.704 285.049 175.497 cv
284.489 175.271 284.19 174.628 284.414 174.062 cv
284.619 173.477 285.255 173.194 285.834 173.401 cv
285.834 173.401 li
cp
ef
190.806 195.733 mo
218.786 195.733 li
232.729 181.65 li
232.893 138.384 li
190.806 138.384 li
190.806 195.733 li
cp
219.188 197.659 mo
189.844 197.659 li
189.312 197.659 188.881 197.228 188.881 196.696 cv
188.881 137.421 li
188.881 136.889 189.312 136.458 189.844 136.458 cv
233.859 136.458 li
234.115 136.458 234.36 136.56 234.542 136.742 cv
234.722 136.923 234.823 137.168 234.822 137.425 cv
234.653 182.051 li
234.652 182.304 234.552 182.545 234.375 182.725 cv
219.872 197.374 li
219.691 197.556 219.444 197.659 219.188 197.659 cv
cp
f
226.458 183.01 mo
221.859 183.01 220.15 184.739 220.15 189.391 cv
220.15 194.355 li
231.382 183.01 li
226.458 183.01 li
cp
219.188 197.659 mo
219.064 197.659 218.94 197.635 218.821 197.586 cv
218.46 197.438 218.225 197.086 218.225 196.696 cv
218.225 189.391 li
218.225 183.646 220.764 181.085 226.458 181.085 cv
233.69 181.085 li
234.08 181.085 234.429 181.318 234.579 181.677 cv
234.729 182.035 234.648 182.449 234.375 182.725 cv
219.872 197.374 li
219.688 197.56 219.439 197.659 219.188 197.659 cv
cp
f
189.937 137.421 mo
233.766 137.421 li
233.766 152.24 li
189.937 152.24 li
189.937 137.421 li
cp
ef
224.85 147.974 mo
224.626 148.276 224.252 148.54 223.766 148.786 cv
223.28 149.03 222.664 149.144 221.916 149.144 cv
220.963 149.144 220.178 148.861 219.58 148.256 cv
218.981 147.652 218.683 146.879 218.683 145.935 cv
218.683 144.293 li
218.683 143.349 218.963 142.575 219.542 141.971 cv
220.122 141.367 220.869 141.065 221.785 141.065 cv
222.739 141.065 223.449 141.31 223.953 141.763 cv
224.458 142.235 224.72 142.858 224.738 143.613 cv
224.72 143.651 li
223.261 143.651 li
223.224 143.217 223.093 142.895 222.851 142.65 cv
222.627 142.405 222.271 142.292 221.823 142.292 cv
221.355 142.292 220.963 142.481 220.664 142.839 cv
220.383 143.217 220.234 143.689 220.234 144.273 cv
220.234 145.935 li
220.234 146.521 220.383 147.011 220.683 147.37 cv
221 147.747 221.393 147.936 221.916 147.936 cv
222.271 147.936 222.57 147.898 222.795 147.823 cv
223 147.747 223.168 147.652 223.28 147.54 cv
223.28 146.105 li
221.916 146.105 li
221.916 145.01 li
224.85 145.01 li
224.85 147.974 li
cp
211.356 141.177 mo
213.356 146.974 li
213.375 146.974 li
215.375 141.177 li
217.412 141.177 li
217.412 149.049 li
215.86 149.049 li
215.86 146.689 li
216.01 143.235 li
215.973 143.217 li
213.898 149.049 li
212.852 149.049 li
210.777 143.235 li
210.739 143.254 li
210.889 146.689 li
210.889 149.049 li
209.318 149.049 li
209.318 141.177 li
211.356 141.177 li
cp
203.711 142.405 mo
203.711 147.823 li
204.74 147.823 li
205.3 147.823 205.749 147.634 206.066 147.257 cv
206.384 146.879 206.534 146.37 206.534 145.766 cv
206.534 144.443 li
206.534 143.839 206.384 143.349 206.066 142.971 cv
205.749 142.593 205.3 142.405 204.74 142.405 cv
203.711 142.405 li
cp
202.16 149.049 mo
202.16 141.177 li
204.833 141.177 li
205.786 141.177 206.572 141.499 207.188 142.103 cv
207.805 142.726 208.104 143.499 208.104 144.462 cv
208.104 145.766 li
208.104 146.728 207.805 147.521 207.188 148.125 cv
206.572 148.729 205.786 149.049 204.833 149.049 cv
202.16 149.049 li
cp
200.516 149.049 mo
198.852 149.049 li
198.852 147.559 li
200.516 147.559 li
200.516 149.049 li
cp
0 0 0 0 cmyk
f
200.758 170.485 mo
200.641 170.485 200.552 170.6 200.552 170.702 cv
200.552 174.78 li
200.552 174.903 200.641 174.997 200.758 174.997 cv
222.944 174.997 li
223.062 174.997 223.151 174.903 223.151 174.78 cv
223.151 170.702 li
223.151 170.6 223.062 170.485 222.944 170.485 cv
200.758 170.485 li
cp
222.944 176.602 mo
200.758 176.602 li
199.76 176.602 198.947 175.785 198.947 174.78 cv
198.947 170.702 li
198.947 169.697 199.76 168.88 200.758 168.88 cv
222.944 168.88 li
223.942 168.88 224.755 169.697 224.755 170.702 cv
224.755 174.78 li
224.755 175.785 223.942 176.602 222.944 176.602 cv
cp
197.878 166.879 mo
197.832 167.401 197.786 168.185 197.786 168.663 cv
197.786 177.574 li
197.786 177.697 197.875 177.791 197.993 177.791 cv
225.71 177.791 li
225.828 177.791 225.917 177.697 225.917 177.574 cv
225.917 168.663 li
225.917 168.192 225.887 167.398 225.841 166.866 cv
220.581 156.24 li
220.538 156.152 220.511 156.059 220.501 155.962 cv
220.485 155.803 220.32 155.666 220.197 155.666 cv
203.936 155.666 li
203.807 155.666 203.628 155.806 203.613 155.962 cv
203.603 156.066 203.572 156.167 203.523 156.26 cv
197.878 166.879 li
cp
225.71 179.395 mo
197.993 179.395 li
196.994 179.395 196.181 178.578 196.181 177.574 cv
196.181 168.663 li
196.181 168.067 196.242 167.108 196.297 166.562 cv
196.308 166.459 196.338 166.358 196.387 166.267 cv
202.043 155.626 li
202.219 154.749 203.033 154.062 203.936 154.062 cv
220.197 154.062 li
221.111 154.062 221.907 154.743 222.075 155.641 cv
227.345 166.288 li
227.387 166.374 227.414 166.467 227.424 166.562 cv
227.484 167.15 227.521 168.111 227.521 168.663 cv
227.521 177.574 li
227.521 178.578 226.708 179.395 225.71 179.395 cv
cp
.703914 .0884413 0 0 cmyk
f
220.925 173.76 mo
220.365 173.76 219.917 173.308 219.917 172.741 cv
219.917 172.193 220.365 171.741 220.925 171.741 cv
221.467 171.741 221.916 172.193 221.916 172.741 cv
221.916 173.308 221.467 173.76 220.925 173.76 cv
220.925 173.76 li
cp
217.486 173.76 mo
216.925 173.76 216.477 173.308 216.477 172.741 cv
216.477 172.193 216.925 171.741 217.486 171.741 cv
218.029 171.741 218.477 172.193 218.477 172.741 cv
218.477 173.308 218.029 173.76 217.486 173.76 cv
217.486 173.76 li
cp
213.842 171.721 mo
202.777 171.721 li
202.235 171.721 201.768 172.193 201.768 172.741 cv
201.768 173.308 202.235 173.76 202.777 173.76 cv
213.842 173.76 li
214.403 173.76 214.851 173.308 214.851 172.741 cv
214.851 172.193 214.403 171.721 213.842 171.721 cv
213.842 171.721 li
cp
ef
427.531 101.565 mo
455.511 101.565 li
469.453 87.4814 li
469.617 44.2344 li
427.531 44.2344 li
427.531 101.565 li
cp
455.911 103.49 mo
426.567 103.49 li
426.035 103.49 425.605 103.06 425.605 102.528 cv
425.605 43.2715 li
425.605 42.7402 426.035 42.3096 426.567 42.3096 cv
470.583 42.3096 li
470.839 42.3096 471.085 42.4111 471.266 42.5928 cv
471.445 42.7734 471.548 43.0195 471.546 43.2759 cv
471.378 87.8828 li
471.377 88.1353 471.277 88.3765 471.1 88.5562 cv
456.597 103.205 li
456.414 103.388 456.168 103.49 455.911 103.49 cv
cp
f
463.183 88.8418 mo
458.583 88.8418 456.874 90.5767 456.874 95.2412 cv
456.874 100.187 li
468.107 88.8418 li
463.183 88.8418 li
cp
455.911 103.49 mo
455.788 103.49 455.664 103.466 455.546 103.418 cv
455.186 103.269 454.948 102.918 454.948 102.528 cv
454.948 95.2412 li
454.948 89.4839 457.487 86.916 463.183 86.916 cv
470.414 86.916 li
470.803 86.916 471.153 87.1499 471.303 87.5078 cv
471.452 87.8667 471.372 88.2798 471.1 88.5562 cv
456.597 103.205 li
456.411 103.391 456.164 103.49 455.911 103.49 cv
cp
f
426.661 43.2715 mo
470.49 43.2715 li
470.49 58.0908 li
426.661 58.0908 li
426.661 43.2715 li
cp
ef
460.715 49.8027 mo
462.173 47.0288 li
463.985 47.0288 li
461.687 50.9165 li
464.115 54.8813 li
462.229 54.8813 li
460.733 52.0503 li
459.237 54.8813 li
457.407 54.8813 li
459.779 50.9165 li
457.463 47.0288 li
459.275 47.0288 li
460.715 49.8027 li
cp
456.846 52.2007 mo
456.863 52.2383 li
456.884 53.0884 456.621 53.749 456.099 54.2393 cv
455.575 54.749 454.846 54.9946 453.911 54.9946 cv
452.977 54.9946 452.211 54.6924 451.63 54.0889 cv
451.033 53.4658 450.752 52.6914 450.752 51.729 cv
450.752 50.1812 li
450.752 49.2183 451.033 48.4443 451.612 47.8213 cv
452.173 47.2173 452.921 46.915 453.819 46.915 cv
454.789 46.915 455.537 47.1602 456.079 47.6699 cv
456.621 48.1611 456.884 48.8413 456.863 49.7085 cv
456.863 49.728 li
455.352 49.728 li
455.352 49.2183 455.219 48.8213 454.977 48.5381 cv
454.734 48.2739 454.341 48.1235 453.819 48.1235 cv
453.351 48.1235 452.996 48.3115 452.715 48.7085 cv
452.436 49.0859 452.305 49.5771 452.305 50.1621 cv
452.305 51.729 li
452.305 52.3325 452.453 52.8242 452.734 53.2017 cv
453.033 53.5786 453.407 53.7681 453.911 53.7681 cv
454.397 53.7681 454.752 53.6353 454.995 53.3901 cv
455.219 53.1074 455.331 52.7295 455.331 52.2007 cv
456.846 52.2007 li
cp
448.192 50.2378 mo
448.192 49.6152 448.042 49.105 447.744 48.7275 cv
447.444 48.3311 447.033 48.1235 446.491 48.1235 cv
445.968 48.1235 445.558 48.3311 445.258 48.7085 cv
444.978 49.105 444.829 49.6152 444.829 50.2378 cv
444.829 51.6533 li
444.829 52.2769 444.978 52.7861 445.258 53.1821 cv
445.558 53.5786 445.968 53.7681 446.491 53.7681 cv
447.033 53.7681 447.444 53.5786 447.744 53.1821 cv
448.042 52.7861 448.192 52.2769 448.192 51.6533 cv
448.192 50.2378 li
cp
449.762 51.6533 mo
449.762 52.6162 449.463 53.4282 448.847 54.0508 cv
448.248 54.6733 447.463 54.9946 446.491 54.9946 cv
445.538 54.9946 444.771 54.6733 444.175 54.0508 cv
443.575 53.4282 443.276 52.6162 443.276 51.6533 cv
443.276 50.2378 li
443.276 49.2935 443.558 48.4819 444.154 47.8594 cv
444.754 47.2363 445.538 46.915 446.491 46.915 cv
447.463 46.915 448.248 47.2363 448.847 47.8594 cv
449.463 48.4819 449.762 49.2935 449.762 50.2378 cv
449.762 51.6533 li
cp
437.894 48.2373 mo
437.894 53.6729 li
438.921 53.6729 li
439.483 53.6729 439.912 53.4849 440.229 53.0884 cv
440.548 52.7104 440.717 52.2202 440.717 51.5967 cv
440.717 50.2939 li
440.717 49.6904 440.548 49.1987 440.229 48.8032 cv
439.912 48.4253 439.483 48.2373 438.921 48.2373 cv
437.894 48.2373 li
cp
436.323 54.8813 mo
436.323 47.0288 li
438.996 47.0288 li
439.95 47.0288 440.734 47.3306 441.352 47.9541 cv
441.968 48.5576 442.286 49.3506 442.286 50.3125 cv
442.286 51.6157 li
442.286 52.5781 441.968 53.3521 441.352 53.9756 cv
440.734 54.5796 439.95 54.8813 438.996 54.8813 cv
436.323 54.8813 li
cp
434.697 54.8813 mo
433.016 54.8813 li
433.016 53.4087 li
434.697 53.4087 li
434.697 54.8813 li
cp
0 0 0 0 cmyk
f
463.237 68.3223 mo
433.894 68.3223 li
433.362 68.3223 432.933 67.8911 432.933 67.3594 cv
432.933 66.8271 433.362 66.397 433.894 66.397 cv
463.237 66.397 li
463.769 66.397 464.201 66.8271 464.201 67.3594 cv
464.201 67.8911 463.769 68.3223 463.237 68.3223 cv
cp
.703914 .0884413 0 0 cmyk
f
463.237 75.0991 mo
433.894 75.0991 li
433.362 75.0991 432.933 74.6685 432.933 74.1362 cv
432.933 73.6045 433.362 73.1738 433.894 73.1738 cv
463.237 73.1738 li
463.769 73.1738 464.201 73.6045 464.201 74.1362 cv
464.201 74.6685 463.769 75.0991 463.237 75.0991 cv
cp
f
463.237 81.895 mo
433.894 81.895 li
433.362 81.895 432.933 81.4644 432.933 80.9321 cv
432.933 80.4004 433.362 79.9692 433.894 79.9692 cv
463.237 79.9692 li
463.769 79.9692 464.201 80.4004 464.201 80.9321 cv
464.201 81.4644 463.769 81.895 463.237 81.895 cv
cp
f
448.565 88.6909 mo
433.894 88.6909 li
433.362 88.6909 432.933 88.2603 432.933 87.7285 cv
432.933 87.1968 433.362 86.7656 433.894 86.7656 cv
448.565 86.7656 li
449.098 86.7656 449.529 87.1968 449.529 87.7285 cv
449.529 88.2603 449.098 88.6909 448.565 88.6909 cv
cp
f
348.622 101.565 mo
376.603 101.565 li
390.546 87.4824 li
390.709 44.2344 li
348.622 44.2344 li
348.622 101.565 li
cp
377.004 103.491 mo
347.659 103.491 li
347.128 103.491 346.698 103.06 346.698 102.528 cv
346.698 43.2715 li
346.698 42.7402 347.128 42.3096 347.659 42.3096 cv
391.676 42.3096 li
391.932 42.3096 392.178 42.4111 392.357 42.5928 cv
392.538 42.7739 392.64 43.0195 392.639 43.2749 cv
392.469 87.8838 li
392.468 88.1357 392.369 88.3774 392.191 88.5571 cv
377.688 103.206 li
377.507 103.389 377.261 103.491 377.004 103.491 cv
cp
f
384.273 88.8423 mo
379.676 88.8423 377.967 90.5771 377.967 95.2412 cv
377.967 100.188 li
389.198 88.8423 li
384.273 88.8423 li
cp
377.003 103.491 mo
376.88 103.491 376.756 103.467 376.638 103.419 cv
376.277 103.27 376.041 102.918 376.041 102.528 cv
376.041 95.2412 li
376.041 89.4844 378.58 86.9175 384.273 86.9175 cv
391.507 86.9175 li
391.896 86.9175 392.245 87.1504 392.396 87.5093 cv
392.544 87.8672 392.464 88.2813 392.191 88.5571 cv
377.688 103.206 li
377.504 103.392 377.256 103.491 377.003 103.491 cv
cp
f
347.754 43.2715 mo
391.583 43.2715 li
391.583 58.0913 li
347.754 58.0913 li
347.754 43.2715 li
cp
ef
380.891 49.8037 mo
382.349 47.0293 li
384.181 47.0293 li
381.863 50.9175 li
384.312 54.8818 li
382.423 54.8818 li
380.91 52.0503 li
379.414 54.8818 li
377.602 54.8818 li
379.957 50.9175 li
377.658 47.0293 li
379.451 47.0293 li
380.891 49.8037 li
cp
375.414 52.8242 mo
375.414 52.522 375.303 52.2769 375.098 52.1064 cv
374.892 51.9175 374.518 51.7471 373.976 51.5967 cv
373.06 51.3135 372.35 50.9927 371.882 50.6343 cv
371.416 50.2563 371.172 49.7466 371.172 49.105 cv
371.172 48.4639 371.452 47.9341 371.995 47.5195 cv
372.537 47.123 373.228 46.9155 374.069 46.9155 cv
374.93 46.9155 375.621 47.1421 376.162 47.5952 cv
376.686 48.0669 376.948 48.6333 376.929 49.2944 cv
376.929 49.3315 li
375.414 49.3315 li
375.414 48.9731 375.303 48.6904 375.06 48.4639 cv
374.816 48.2373 374.48 48.1235 374.031 48.1235 cv
373.621 48.1235 373.303 48.2178 373.079 48.4067 cv
372.854 48.5947 372.723 48.8213 372.723 49.1245 cv
372.723 49.3887 372.854 49.5957 373.097 49.7656 cv
373.34 49.9355 373.771 50.125 374.368 50.3125 cv
375.228 50.5396 375.863 50.8608 376.312 51.2568 cv
376.76 51.6533 376.966 52.1821 376.966 52.8242 cv
376.966 53.4849 376.705 54.0137 376.181 54.4092 cv
375.657 54.8062 374.967 54.9956 374.106 54.9956 cv
373.265 54.9956 372.518 54.7686 371.882 54.335 cv
371.266 53.8813 370.947 53.2773 370.967 52.4839 cv
370.985 52.4468 li
372.499 52.4468 li
372.499 52.9185 372.63 53.2578 372.929 53.4658 cv
373.209 53.6919 373.603 53.8052 374.106 53.8052 cv
374.536 53.8052 374.854 53.7114 375.078 53.541 cv
375.303 53.3521 375.414 53.126 375.414 52.8242 cv
375.414 52.8242 li
cp
366.854 53.6733 mo
370.313 53.6733 li
370.313 54.8818 li
365.285 54.8818 li
365.285 47.0293 li
366.854 47.0293 li
366.854 53.6733 li
cp
361.08 49.8037 mo
362.537 47.0293 li
364.35 47.0293 li
362.051 50.9175 li
364.48 54.8818 li
362.594 54.8818 li
361.098 52.0503 li
359.603 54.8818 li
357.771 54.8818 li
360.145 50.9175 li
357.827 47.0293 li
359.641 47.0293 li
361.08 49.8037 li
cp
356.687 54.8818 mo
355.023 54.8818 li
355.023 53.4087 li
356.687 53.4087 li
356.687 54.8818 li
cp
0 0 0 0 cmyk
f
352.668 69.2944 mo
386.649 69.2944 li
386.649 65.2739 li
352.668 65.2739 li
352.668 69.2944 li
cp
387.451 70.8989 mo
351.865 70.8989 li
351.423 70.8989 351.063 70.5396 351.063 70.0967 cv
351.063 64.4717 li
351.063 64.0283 351.423 63.6689 351.865 63.6689 cv
387.451 63.6689 li
387.895 63.6689 388.254 64.0283 388.254 64.4717 cv
388.254 70.0967 li
388.254 70.5396 387.895 70.8989 387.451 70.8989 cv
cp
.703914 .0884413 0 0 cmyk
f
352.668 74.9014 mo
386.649 74.9014 li
386.649 70.8989 li
352.668 70.8989 li
352.668 74.9014 li
cp
387.451 76.5063 mo
351.865 76.5063 li
351.423 76.5063 351.063 76.147 351.063 75.7036 cv
351.063 70.0967 li
351.063 69.6538 351.423 69.2944 351.865 69.2944 cv
387.451 69.2944 li
387.895 69.2944 388.254 69.6538 388.254 70.0967 cv
388.254 75.7036 li
388.254 76.147 387.895 76.5063 387.451 76.5063 cv
cp
f
352.668 80.5264 mo
386.649 80.5264 li
386.649 76.5063 li
352.668 76.5063 li
352.668 80.5264 li
cp
387.451 82.1309 mo
351.865 82.1309 li
351.423 82.1309 351.063 81.7715 351.063 81.3286 cv
351.063 75.7036 li
351.063 75.2607 351.423 74.9014 351.865 74.9014 cv
387.451 74.9014 li
387.895 74.9014 388.254 75.2607 388.254 75.7036 cv
388.254 81.3286 li
388.254 81.7715 387.895 82.1309 387.451 82.1309 cv
cp
f
363.619 80.5264 mo
375.696 80.5264 li
375.696 65.2739 li
363.619 65.2739 li
363.619 80.5264 li
cp
376.499 82.1309 mo
362.817 82.1309 li
362.375 82.1309 362.016 81.7715 362.016 81.3286 cv
362.016 64.4717 li
362.016 64.0283 362.375 63.6689 362.817 63.6689 cv
376.499 63.6689 li
376.941 63.6689 377.301 64.0283 377.301 64.4717 cv
377.301 81.3286 li
377.301 81.7715 376.941 82.1309 376.499 82.1309 cv
cp
f
269.715 101.565 mo
297.695 101.565 li
311.638 87.481 li
311.801 44.2344 li
269.715 44.2344 li
269.715 101.565 li
cp
298.096 103.491 mo
268.752 103.491 li
268.221 103.491 267.789 103.06 267.789 102.528 cv
267.789 43.2715 li
267.789 42.7402 268.221 42.3096 268.752 42.3096 cv
312.767 42.3096 li
313.022 42.3096 313.27 42.4111 313.45 42.5928 cv
313.631 42.7739 313.73 43.0195 313.729 43.2749 cv
313.562 87.8828 li
313.56 88.1353 313.461 88.3774 313.283 88.5562 cv
298.78 103.205 li
298.599 103.388 298.353 103.491 298.096 103.491 cv
cp
f
305.366 88.8418 mo
300.769 88.8418 299.059 90.5767 299.059 95.2412 cv
299.059 100.187 li
310.29 88.8418 li
305.366 88.8418 li
cp
298.096 103.491 mo
297.973 103.491 297.848 103.467 297.729 103.419 cv
297.368 103.27 297.133 102.918 297.133 102.528 cv
297.133 95.2412 li
297.133 89.4839 299.672 86.916 305.366 86.916 cv
312.599 86.916 li
312.987 86.916 313.338 87.1504 313.488 87.5078 cv
313.637 87.8667 313.557 88.2798 313.283 88.5562 cv
298.78 103.205 li
298.596 103.392 298.347 103.491 298.096 103.491 cv
cp
f
268.846 43.2715 mo
312.674 43.2715 li
312.674 58.0718 li
268.846 58.0718 li
268.846 43.2715 li
cp
ef
302.319 49.8027 mo
303.776 47.0288 li
305.608 47.0288 li
303.291 50.9165 li
305.74 54.8813 li
303.852 54.8813 li
302.356 52.0503 li
300.843 54.8813 li
299.029 54.8813 li
301.384 50.9165 li
299.086 47.0288 li
300.899 47.0288 li
302.319 49.8027 li
cp
298.712 48.2373 mo
296.506 48.2373 li
296.506 54.8813 li
294.956 54.8813 li
294.956 48.2373 li
292.77 48.2373 li
292.77 47.0288 li
298.712 47.0288 li
298.712 48.2373 li
cp
287.779 50.8037 mo
289.312 50.8037 li
289.741 50.8037 290.077 50.6904 290.302 50.4453 cv
290.525 50.2192 290.638 49.9165 290.638 49.5391 cv
290.638 49.1616 290.525 48.8594 290.302 48.5947 cv
290.077 48.3501 289.76 48.2373 289.312 48.2373 cv
287.779 48.2373 li
287.779 50.8037 li
cp
287.779 52.0313 mo
287.779 54.8813 li
286.208 54.8813 li
286.208 47.0288 li
289.312 47.0288 li
290.207 47.0288 290.918 47.2549 291.423 47.7075 cv
291.928 48.1807 292.188 48.7847 292.188 49.52 cv
292.188 50.2759 291.928 50.8794 291.423 51.333 cv
290.918 51.8042 290.207 52.0313 289.312 52.0313 cv
287.779 52.0313 li
cp
280.639 50.8037 mo
282.19 50.8037 li
282.619 50.8037 282.957 50.6904 283.181 50.4453 cv
283.404 50.2192 283.517 49.9165 283.517 49.5391 cv
283.517 49.1616 283.404 48.8594 283.181 48.5947 cv
282.957 48.3501 282.619 48.2373 282.19 48.2373 cv
280.639 48.2373 li
280.639 50.8037 li
cp
280.639 52.0313 mo
280.639 54.8813 li
279.088 54.8813 li
279.088 47.0288 li
282.19 47.0288 li
283.087 47.0288 283.779 47.2549 284.302 47.7075 cv
284.808 48.1807 285.068 48.7847 285.068 49.52 cv
285.068 50.2759 284.808 50.8794 284.302 51.333 cv
283.779 51.8042 283.087 52.0313 282.19 52.0313 cv
280.639 52.0313 li
cp
277.442 54.8813 mo
275.78 54.8813 li
275.78 53.3901 li
277.442 53.3901 li
277.442 54.8813 li
cp
0 0 0 0 cmyk
f
283.31 88.2949 mo
283.15 88.2949 282.988 88.2554 282.84 88.1704 cv
282.375 87.9102 282.212 87.3228 282.472 86.8599 cv
285.817 80.9136 li
286.077 80.4497 286.666 80.2847 287.129 80.5464 cv
287.593 80.8071 287.757 81.394 287.496 81.8574 cv
284.149 87.8037 li
283.974 88.1177 283.646 88.2949 283.31 88.2949 cv
cp
298.209 88.2949 mo
297.872 88.2949 297.545 88.1177 297.368 87.8037 cv
294.022 81.8574 li
293.763 81.394 293.927 80.8071 294.391 80.5464 cv
294.853 80.2847 295.44 80.4497 295.701 80.9136 cv
299.047 86.8599 li
299.308 87.3228 299.144 87.9102 298.68 88.1704 cv
298.529 88.2554 298.368 88.2949 298.209 88.2949 cv
cp
.703914 .0884413 0 0 cmyk
f
290.769 65.3774 mo
290.237 65.3774 289.806 64.9463 289.806 64.4141 cv
289.806 62.3569 li
289.806 61.8252 290.237 61.3945 290.769 61.3945 cv
291.3 61.3945 291.731 61.8252 291.731 62.3569 cv
291.731 64.4141 li
291.731 64.9463 291.3 65.3774 290.769 65.3774 cv
cp
f
276.182 80.4229 mo
305.338 80.4229 li
305.338 65.3774 li
276.182 65.3774 li
276.182 80.4229 li
cp
306.301 82.3481 mo
275.219 82.3481 li
274.688 82.3481 274.256 81.917 274.256 81.3853 cv
274.256 64.4141 li
274.256 63.8828 274.688 63.4526 275.219 63.4526 cv
306.301 63.4526 li
306.832 63.4526 307.264 63.8828 307.264 64.4141 cv
307.264 81.3853 li
307.264 81.917 306.832 82.3481 306.301 82.3481 cv
cp
f
302.227 78.0444 mo
301.693 78.0444 301.264 77.6128 301.264 77.0811 cv
301.264 68.8701 li
301.264 68.3379 301.693 67.9067 302.227 67.9067 cv
302.758 67.9067 303.189 68.3379 303.189 68.8701 cv
303.189 77.0811 li
303.189 77.6128 302.758 78.0444 302.227 78.0444 cv
cp
f
299.142 78.0444 mo
298.612 78.0444 298.181 77.6152 298.179 77.085 cv
298.161 72.2524 li
298.158 71.7202 298.588 71.2876 299.119 71.2861 cv
299.637 71.311 300.084 71.7134 300.085 72.2446 cv
300.104 77.0767 li
300.106 77.6089 299.678 78.0415 299.146 78.0444 cv
299.145 78.0444 299.144 78.0444 299.142 78.0444 cv
cp
f
296.04 78.0444 mo
295.507 78.0444 295.077 77.6128 295.077 77.0811 cv
295.077 74.665 li
295.077 74.1333 295.507 73.7026 296.04 73.7026 cv
296.571 73.7026 297.003 74.1333 297.003 74.665 cv
297.003 77.0811 li
297.003 77.6128 296.571 78.0444 296.04 78.0444 cv
cp
f
288.694 69.832 mo
279.236 69.832 li
278.705 69.832 278.275 69.4019 278.275 68.8701 cv
278.275 68.3379 278.705 67.9067 279.236 67.9067 cv
288.694 67.9067 li
289.226 67.9067 289.657 68.3379 289.657 68.8701 cv
289.657 69.4019 289.226 69.832 288.694 69.832 cv
cp
f
285.012 73.9287 mo
279.236 73.9287 li
278.705 73.9287 278.275 73.4985 278.275 72.9663 cv
278.275 72.4346 278.705 72.0029 279.236 72.0029 cv
285.012 72.0029 li
285.544 72.0029 285.975 72.4346 285.975 72.9663 cv
285.975 73.4985 285.544 73.9287 285.012 73.9287 cv
cp
f
279.236 78.0444 mo
278.706 78.0444 278.275 77.6143 278.275 77.0825 cv
278.274 76.5513 278.704 76.1187 279.235 76.1187 cv
290.917 76.0996 li
290.918 76.0996 li
291.449 76.0996 291.88 76.5298 291.88 77.0605 cv
291.882 77.5918 291.451 78.0244 290.92 78.0249 cv
279.239 78.0444 li
279.238 78.0444 279.238 78.0444 279.236 78.0444 cv
cp
f
190.806 101.565 mo
218.786 101.565 li
232.729 87.481 li
232.893 44.2344 li
190.806 44.2344 li
190.806 101.565 li
cp
219.188 103.491 mo
189.844 103.491 li
189.312 103.491 188.881 103.06 188.881 102.528 cv
188.881 43.2715 li
188.881 42.7402 189.312 42.3096 189.844 42.3096 cv
233.859 42.3096 li
234.115 42.3096 234.36 42.4111 234.542 42.5928 cv
234.722 42.7739 234.823 43.0195 234.822 43.2749 cv
234.653 87.8828 li
234.652 88.1353 234.552 88.3774 234.375 88.5562 cv
219.872 103.205 li
219.691 103.388 219.444 103.491 219.188 103.491 cv
cp
f
226.458 88.8418 mo
221.859 88.8418 220.15 90.5767 220.15 95.2412 cv
220.15 100.187 li
231.382 88.8418 li
226.458 88.8418 li
cp
219.188 103.491 mo
219.064 103.491 218.94 103.467 218.821 103.419 cv
218.46 103.27 218.225 102.918 218.225 102.528 cv
218.225 95.2412 li
218.225 89.4839 220.764 86.916 226.458 86.916 cv
233.69 86.916 li
234.08 86.916 234.429 87.1504 234.579 87.5078 cv
234.729 87.8667 234.648 88.2798 234.375 88.5562 cv
219.872 103.205 li
219.688 103.392 219.439 103.491 219.188 103.491 cv
cp
f
189.937 43.2715 mo
233.766 43.2715 li
233.766 58.0908 li
189.937 58.0908 li
189.937 43.2715 li
cp
ef
219.075 50.5205 mo
220.421 50.5205 li
220.869 50.5205 221.187 50.4263 221.412 50.2378 cv
221.617 50.0674 221.729 49.7847 221.729 49.4067 cv
221.729 49.0483 221.617 48.7651 221.412 48.5576 cv
221.187 48.3496 220.869 48.2373 220.458 48.2373 cv
219.075 48.2373 li
219.075 50.5205 li
cp
219.075 51.7471 mo
219.075 54.8813 li
217.523 54.8813 li
217.523 47.0288 li
220.458 47.0288 li
221.337 47.0288 222.029 47.2363 222.533 47.6328 cv
223.037 48.0479 223.28 48.6143 223.28 49.3506 cv
223.28 49.7461 223.187 50.1055 222.963 50.3887 cv
222.757 50.6904 222.458 50.9165 222.047 51.1064 cv
222.514 51.2383 222.832 51.4639 223.037 51.7852 cv
223.243 52.1064 223.337 52.5029 223.337 52.9746 cv
223.337 53.541 li
223.337 53.7681 223.374 53.9941 223.43 54.2393 cv
223.486 54.4658 223.58 54.6553 223.729 54.7681 cv
223.729 54.8813 li
222.122 54.8813 li
221.973 54.7681 221.878 54.5796 221.841 54.2964 cv
221.804 54.0322 221.785 53.7856 221.785 53.541 cv
221.785 52.9746 li
221.785 52.5977 221.673 52.2769 221.467 52.0684 cv
221.244 51.8423 220.944 51.7471 220.571 51.7471 cv
219.075 51.7471 li
cp
212.347 51.9741 mo
214.309 51.9741 li
213.337 48.8594 li
213.318 48.8594 li
212.347 51.9741 li
cp
214.683 53.1821 mo
211.954 53.1821 li
211.431 54.8813 li
209.86 54.8813 li
212.533 47.0288 li
214.122 47.0288 li
216.795 54.8813 li
215.225 54.8813 li
214.683 53.1821 li
cp
204.833 50.5205 mo
206.179 50.5205 li
206.628 50.5205 206.945 50.4263 207.169 50.2378 cv
207.375 50.0674 207.487 49.7847 207.487 49.4067 cv
207.487 49.0483 207.375 48.7651 207.169 48.5576 cv
206.945 48.3496 206.628 48.2373 206.216 48.2373 cv
204.833 48.2373 li
204.833 50.5205 li
cp
204.833 51.7471 mo
204.833 54.8813 li
203.282 54.8813 li
203.282 47.0288 li
206.216 47.0288 li
207.094 47.0288 207.786 47.2363 208.291 47.6328 cv
208.796 48.0479 209.039 48.6143 209.039 49.3506 cv
209.039 49.7461 208.945 50.1055 208.721 50.3887 cv
208.515 50.6904 208.216 50.9165 207.805 51.1064 cv
208.272 51.2383 208.59 51.4639 208.796 51.7852 cv
209.001 52.1064 209.094 52.5029 209.094 52.9746 cv
209.094 53.541 li
209.094 53.7681 209.132 53.9941 209.188 54.2393 cv
209.244 54.4658 209.338 54.6553 209.487 54.7681 cv
209.487 54.8813 li
207.879 54.8813 li
207.73 54.7681 207.637 54.5796 207.6 54.2964 cv
207.562 54.0322 207.543 53.7856 207.543 53.541 cv
207.543 52.9746 li
207.543 52.5977 207.431 52.2769 207.226 52.0684 cv
207.001 51.8423 206.702 51.7471 206.328 51.7471 cv
204.833 51.7471 li
cp
201.637 54.8813 mo
199.974 54.8813 li
199.974 53.4087 li
201.637 53.4087 li
201.637 54.8813 li
cp
0 0 0 0 cmyk
f
206.833 62.8096 mo
199.582 62.8096 li
199.049 62.8096 198.619 62.3789 198.619 61.8472 cv
198.619 61.3149 199.049 60.8843 199.582 60.8843 cv
206.833 60.8843 li
207.365 60.8843 207.795 61.3149 207.795 61.8472 cv
207.795 62.3789 207.365 62.8096 206.833 62.8096 cv
cp
.703914 .0884413 0 0 cmyk
f
206.833 66.8877 mo
199.582 66.8877 li
199.049 66.8877 198.619 66.4565 198.619 65.9248 cv
198.619 65.3926 199.049 64.9619 199.582 64.9619 cv
206.833 64.9619 li
207.365 64.9619 207.795 65.3926 207.795 65.9248 cv
207.795 66.4565 207.365 66.8877 206.833 66.8877 cv
cp
f
203.208 84.0093 mo
202.675 84.0093 202.245 83.5776 202.245 83.0464 cv
202.245 56.731 li
202.245 56.1997 202.675 55.7686 203.208 55.7686 cv
203.739 55.7686 204.17 56.1997 204.17 56.731 cv
204.17 83.0464 li
204.17 83.5776 203.739 84.0093 203.208 84.0093 cv
cp
f
206.833 70.9653 mo
199.582 70.9653 li
199.049 70.9653 198.619 70.5337 198.619 70.002 cv
198.619 69.4697 199.049 69.0396 199.582 69.0396 cv
206.833 69.0396 li
207.365 69.0396 207.795 69.4697 207.795 70.002 cv
207.795 70.5337 207.365 70.9653 206.833 70.9653 cv
cp
f
206.833 75.0425 mo
199.582 75.0425 li
199.049 75.0425 198.619 74.6118 198.619 74.0796 cv
198.619 73.5483 199.049 73.1172 199.582 73.1172 cv
206.833 73.1172 li
207.365 73.1172 207.795 73.5483 207.795 74.0796 cv
207.795 74.6118 207.365 75.0425 206.833 75.0425 cv
cp
f
206.833 79.1196 mo
199.582 79.1196 li
199.049 79.1196 198.619 78.6895 198.619 78.1572 cv
198.619 77.626 199.049 77.1943 199.582 77.1943 cv
206.833 77.1943 li
207.365 77.1943 207.795 77.626 207.795 78.1572 cv
207.795 78.6895 207.365 79.1196 206.833 79.1196 cv
cp
f
200.158 84.0093 mo
199.135 92.8228 li
199.031 93.7319 199.34 94.644 200.005 95.3896 cv
200.808 96.2896 202.005 96.8262 203.208 96.8262 cv
204.399 96.8262 205.588 96.291 206.389 95.3936 cv
207.055 94.6475 207.364 93.7329 207.26 92.8218 cv
206.237 84.0093 li
200.158 84.0093 li
cp
203.208 98.752 mo
201.465 98.752 199.73 97.9741 198.568 96.6709 cv
197.533 95.5112 197.055 94.0654 197.223 92.603 cv
198.345 82.9351 li
198.401 82.4497 198.812 82.084 199.301 82.084 cv
207.094 82.084 li
207.583 82.084 207.994 82.4497 208.051 82.9351 cv
209.173 92.6006 li
209.341 94.0669 208.862 95.5137 207.825 96.6758 cv
206.666 97.9761 204.938 98.752 203.208 98.752 cv
cp
f
202.007 91.6353 mo
201.858 92.5459 li
201.811 92.8315 201.949 93.0664 202.073 93.2114 cv
202.34 93.5269 202.786 93.731 203.208 93.731 cv
203.618 93.731 204.056 93.5288 204.321 93.2158 cv
204.445 93.0688 204.584 92.8335 204.538 92.5474 cv
204.389 91.6353 li
202.007 91.6353 li
cp
203.208 95.6558 mo
202.215 95.6558 201.242 95.2085 200.604 94.4585 cv
200.058 93.8135 199.828 93.0239 199.958 92.2344 cv
200.238 90.5176 li
200.314 90.0518 200.717 89.7104 201.188 89.7104 cv
205.208 89.7104 li
205.679 89.7104 206.082 90.0522 206.158 90.5176 cv
206.438 92.2358 li
206.567 93.0244 206.337 93.8154 205.789 94.4624 cv
205.154 95.21 204.188 95.6558 203.208 95.6558 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/BZNAGX+Roboto-Light*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Rixwan) ()
%%Title: (file-type-icons-1.eps)
%%CreationDate: 5/11/2018 3:21 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N:ZTnB#^9;=dK<moFe,'1l_:U^j0nB<2fnlugi6Yfi,r:r*s3L[DQ.@iODJ$c<k4m_EAs/e:P,_J2<L'B.K*PV_I^<3r
%So(n7>0E:nP?IE\08';+^u,.dhh).el3C11I'H#=dVhOuhL;A&M7VMj.rKL@CRP+(E\k%+5(d4bHEgq[fn5n->,SK/CSaup47DDu
%^Q,%'<#o9n\)X%olZ#m?FW0@J`lf8'g*bD4gFb;emGa`EpJ5rN!$+PB*Y8>%@IXTuh%-^]Xob-d?,JGV^RcNnJPCVJ/B`W0KSJ_O
%R>"EAd940;l]cbh<qFKYes"kY=M'>c]?G_SQ@MKp^BOBe;i#2MIb\ERb,A5-a5180X'!O2[1VZO='in>O.dfrJ*_)c+9D#I'bgUS
%'taAkr3MZn1Ce25J%pMN=KI$cA/lD7[eL*iV$7K6TM?\XO.o**0)$QQ!QQn"DJ"V$8,nJq$j4G$`O)tC)1nLa7[S=(plcMI#alS*
%:LKOjs$TFToWoV;\X%LQQ)dc;O*IhV408Gk,O:d6rkm]IIN3Le2X;b=*ap32O53hoMP5=gGqgr#n8#u%^I=!SEp#"=JZQ??4q>V:
%-85l-gZs<`<;mW+5[1m`]lqmfC;$C&Y1P]EX<;#)aM@FuBb:KN(buo]TOF)fbA5'HYQ@\0n)H+hK<Xcdl=]eP=pX^.A<Df?o1m!!
%UtE.3!W*[qOq"dJ6LbTT.o>*g78:T-dlPV>C@f9_mN,i\gWaKIe\E?lia9/[fUFQbimo"I<W.W#K.?`b5Q:EAO8mnllApCp(NlFk
%36Hp2l<1%_1Wf\n<k%ss<lVKUXi+qa)m.\!OQoPp<_jSK`GrTIX[D]\eahBreD^FYhcD?$%`h-lNrE4!8"JL^X5>KfX/h#@Ei7Gm
%4mU^0W]Q5U^"'f5*!KA%!`1!;\UuA"2G$?V?eA/PI6`.[;6sHoT!(TmqG4:9=//c_p=6*=mT`"gh18&Ka/s$_g?QYM;X,.K%9Gbn
%lVRm8mUfM3m;`B_iAms(I]!i:/&1!qhWegQFV-K,b95lC(T`MbX-H`_(U(/DX[S4qZegA]I;9Sm?a#^SAuiCeri:Gg2-2l8PMj@D
%C85%MD?3sMOB1+U^C+EB];rV0>MVIsXkr?Ep<G`s,l^oJoR"u#UCXYFY7am<_"^iFQ)IlIA'ir1Xetpr3n,R%/,bi]'En3kO++VA
%hr#U&bAiNL_81$/%'A&"aTGM-@kHiMdEF?Ejs9U[,[`L=]pe+i=P]k#=1@F(W+B31Hs;'/_b0=#-?caO40m(RmsOdc2$hb!Yn-Q\
%#CG/0H`U"io",+in9R1q[CXtL;'t-,K&3eoheF7JQ!\rI59?B)3Zp!dXB/+-[I.dt2-^phPdR^<XQd$lUeL,'8#mB@Nei*)Z.^Gq
%0iSn0n*6uRSX$3j:"3aB#h[O8%CTC/QKV7?qk1odaR?/%T618R1]$Ie5&7-ikYGQ7o8ES&,A-idn/qZlg1L3.I<fk_Kb[uIo,7ag
%0++Lg[[WNt=s%OJ'AXE@0FU.I-@T5p'P1JJki3aa/*J`cBBH/AO,e[s,Hd91_%Z%K5-V^j1[0%OILApEj$*D9][Q/TGFGqj+9,Qd
%<El@uk$:sNJMR*aWb1s"^VaCo1CI`85ij],bqo.,/<_[;gP]Pk"GPZg1@/*;QMq6kXl4cYHk/[O(e:S-L2Jr"7WGK2<@e`DbKOt:
%dnWj;IU$cV3uRl\em5;.]&,.Cb>dj993!S-MDd/F5,'e79jCO\q^GNDjkb8p.g@T_Q*ms5%Wn:nBrX;neMqEbokm,tW$ClZ.=2;G
%Zan[uh<adGkF&)G.oqU:"o(l.O?5W!c."Qo$P."QI[o9;o4>-o5c_<=l]koO&,BKh1ud7h;H+gB%r3oqPAKUV(Xplo&0b5O62?M-
%elS.tr3P1ZS:c,JmD(b"NL>\a]X<&!]S=X=^YXmuGdSH,FC?t\kN+V==L+lj<;!i43p6seb0&A5_)0f*L[UgeBA,_NAQA^iZNbo+
%^KZ!n*XVeU:p6OE;==?#o@&"tiNEI<HIZ[4R+/+-_YOQWCDlN<:8^3VVK*0I1`2QY_TJtJJ23ETikKfSOEUD=_).)UMj`,5*nhCO
%69iY5T9oD\?L=;E.+Tq.==NG60=O'o`10>2#c++_'V#jtBo)R8"W`(e2[R5sORR%+,ij,DEcLuhHt&*`V-Zk^$Po0F0eK\'[34=N
%RVJY1.'f"f\4#TCFJMU":@.X8i;S@I*f]=mqe@ZdAE=ILBKRa%Kn403Jf%@(;WKZ=LV5_c"62u<;E5.OVNK\&kt)J"NMif0DsUJM
%i+T#38hW<3<?Q(ej2o0R?a1:Ck[RRC"_@et;_"86'UVs!0O@=?8)ohgf(H)a@3S'\f]mZ1d<"HOUfciLBbn;Bj@!lr#;m]/mANqf
%=!IktWp"Qjn9T/?r^[NX2=^K/N`_WQZP:mML3c/*b4lIJ(8=uEII>6P*AMV:DRrB+'j&\K]5mp1>e+%9%*!5`\lJ4ES[kH4bal9`
%,VFeBR6bI<73HF7bKYIG\M#o9jlX;45BMCFgZ6PS,%bG7\J=EGG]W,*R!sO&/,C.&LZdc6ld+J%5rX`$%U8eOah7icIgYeXgT)*a
%T631dT?8\2Mbf55e$qVWV>?N2ga'"PkN.0%>;%qE7T28%G&n"1X/8b[eHtO61c2#UlI?3@olSYmlEs]o<pN5g.qZ[-ch0GqD'in@
%N7K5Fk,ZjOY<U?'q^mYIk#\'"2TX'99'0#fZZl;;>.G7d<m'Y48ednuKRZDpSk\,.O.&#6(qr^QF!K*2\D538Rb_;\R>.`bT1k2-
%,<^V4J$iM*kZS+h:M/,8!'_+qD`j*[:;N10-g2&PWMl2-Vqt*+)!TlQ8_P$YXa7<T8f&1F^:A,$nu5gPG/Hul4fK6hWF%u1h.FG[
%6T3QL':<Z7Rl-i$HFk0GV?'R3C):SplXGI?Q%fK)%1W$lBLoBj?]5?O,\V.oRtadMQ(Ys`[+`2VS)i[+]m&=hH>/2'WV,d"VT[Jm
%NH)X%fAPhMj1f(&[&pI^M=b+EO\Bd\GGEGdKUeQ(CFB'K]:Iu%UV3%eo(cSbX>rN,1Q%WXTCQu#:c%M/^f3ZVrJ,dkX]E*bM5%a`
%Ct-_uD;9km)eM"I4m5YO>48BJLaY5c?h:^rb,X#Iq<'@$1/eV*bj<HK&[L;A%e@X+buU`jNk%VX/5fF1L>4C=2HO3`Wk<5uID@ZU
%A*1r"^[W@__cbDlTX.Blm!I"&r1:\UNLQBp1OKQ'(1)qq-!=/2f@(RqZSL-Np"fT]8$-FnDLW#`qtG=3Vfl[sb/,sp#ms.mdEr[q
%g?T%Y^6e>=A^-Wo_\K'u`+inMc8<I5rDps)MB0)%H+DUeikm1AG;7N^W*T71;Y9'KCp%'9^<<-BGdT!M]C!+5M=<g0h/[ihQ^gM_
%W_9VI2A;[BHC-:*l&TH9O5gPD5Gk\]7DYtSLf;(<VMM4rc5QAFdjRsha0DNDY>Q"^Xl!$9`O*sO1m^dH1>bTZ=Ma@Jq@pm'p,"k=
%P_YB9of,]j@OIc&JDpZkjV0)/_:,RFA#^s`;FMs%<&srar+hO"PFQg0E[Tt]@jNKk;MobOCSe:A>>qZ_CRnKNc((J:PG4fcO[h7"
%RW>f>a4CSq:o&tD9Ys\$Qti)N:9;s@aCr#NBh"stkr8H?S-DQDNE1:%A>Lu.FRhi[YDJ5.'IM"!bdC.gJu@"!.T;Y"S#BssDUoc+
%6u;[rH>j6)Z`OB%P:0AgTN,mY8X)'MbY%Y>IM-4\ij5U0C[1*Zr$9FDS4#r4UML-qUAQrg##=R@R['^^`m:BT0J-qu/B\!\<G)N]
%U/Z$Z=d1b]bg3$-c_C=RX3LPnb*;]_@h,0ecEepu1ud"<[C>BO8fD/N`M/ssZRDfm@bPJ8D*<eT\P6^6dL\2bZi51:d`g^=RT*dB
%%BVA,Z(14BH)XP`bsu7:12b=]5hp$+-J=#UQ+o#^F&JZY.OVtk68XVd=.4s&XCV1<D99&$3pY*[($kOubfob6FnD+]f4ug;0\:)]
%]f+JX1SNF/4+PQ"[CNh+c"\gs+e<DV\Q6>6<gt%DF(9'ie`L'&[V.OH8*FIbqqKT>Oq]JB[p--o[/i7Z7b=8%rd5W\@)74/c)4E*
%Am?S@VDuB3Ld"@PL/0<].>nV!_g_Qf.,L$.^J97LD8:u>1k/^X"d:uEUGXeM_lP/&WAgkTXkk&rn7LZ^=$%o+$E4XtBOrP[>.9KZ
%BuZ>ocV$(I]JR)R(Q+V-'?*'Ob,!)sB5,RGTa]8#17>\;1"S!%A%M/J,6RtI_k5o&lgR:(B!-h]c3(UP`g:BqNGd?8L&Z_!4.5]N
%W?)tMR7$o:aSESqN.7:OA(i=1a:A3(Xd7Ym%\*GjnuYBneHOQIY<PWTrC_Ps8O\^WeBOd)8.c<C80_LY'9o[W1lOI"Pb>jaTGN]A
%L/IhW#o]>uVI@tV-"nuF79<4^l<*K(HfpBeQY%P3_,W7u#;]:oj:*DB]G6@c/8dj\F):"urT6';k52nP[f?5o;tA3-J#?<6cM)g$
%A,gcP0$/M@GCmY`q>Tj(_3sclcM)glD*?kgY[so6Zm=g]^/Gq)RI\/EI*[#Nk<%Sm]sb20<jW?8VF"(CSs5?8MW2/=kBPG7qUp-)
%$ER2\nR`-n#!\KBNLI^NXk.=dDNo&s_+SI=;%8l+R$cEc6C%:,2/k_,8nG='Pj?%t?YR'@gnI4d2+>"QL=eUT2NNqoN2V#TCfV`j
%oB0S\3C9%SWh"peVC5-Xr0?r]:)#S;_+K[;@I:(e[FTiY>B/.smmP_!<i=^m\Z\/WT1qW]"t@EWjhL,@IW*a-K8F:g8kqtc]bKNq
%1&NV7r(JV&i@n!":*+6Y(#q^.VA,Dm;;rL?-H.$jd;=oFb_$F)*IR(ZUC,XTSK#1$0VLYm'N2t#^ICW[ng@@!Xa"cns([0pIOtWO
%-hG-s4Rb*:]Z^I2o>&O3nFGHeLO%fh[K8*EbeaE74:4IGQ[.M#MET=3i8m"NQcZ5DgN1YQC'$q]gu4[c#h$,.po0<FgsUQ`\*#+*
%NJEH>WL7?[fgM83!RmWV+q5"QA.qm]-?AC8:#*1D05bX8M=`/"Vgj,Rlb37;I:U!=^,Slm6C[\fELr#$3YocjOGPF"Sslj@1Z<,o
%d+UJ*^i[1D0O80nkLl3afp=$3VR`7]_t.oVp#l78Rf=m0MJh%Jr"Q]Lk-soZ`[$rIlg-&AMQDid3f2<?In`\Fda4*8[8e\5h:#m!
%[9'D0lUF%-%@sGd;C0ZCSDPP0s"F3Ks($4iV_^#D,BJLl+L<jPEt<+'4>bMA*fQH45O6j!8'uRl8Zd36SVEO'.,?U+=`@:"XI*l4
%EmiTm'/TsC&Wt'US=i$DiY_8tbO[^5%!i!34H;-`50_<l0nNU@a%/S84H;/(T'i])q0<ri*ljYVOdX6Ek&H=tM.<36egmXZO>Q^X
%DM*F>l]`p5Er<LK:NMJ_I5dHHZMKE><;Fe:GpYmHM?q>JjL&^1%X[kTAQ7kLiB:\]UO&Hq$?`*8Ukh[-[&;Sqm(kOUR>NK-n>(jq
%Z7.R%S<gcaYnR*"8'OXE(N,oD1f(6!L1e%>c4^Z3'+N2"%?8o).3>)F[F3]&XXVlu[8*cb7O:m98PsLi'0jb55)gPO.EMCN`Z4iW
%BqH^gr4,SVTUQ;d*;)Ckr>9cBRmFki<p6o;WUlo5Bu\2^n8,f+-*MTe1l^+:RgshB,%bEsI&.uub)^nG+^t3XH`8=fACU#Gq1ca<
%gJI*n1WsBI3roYVa5U_V(8'Tjd0tchNW17>5=t`o`dPC>.UqhjrRV1s]t([42tuIshV?nUqp!u&$A2mWc.rSBmM6iSS,795j3OPm
%Jh_oW>RILnmbHTgS%E`_GOG$4RCdMh4<XAV\T=a+R2L3d`Ol?a>rj1,hk`DP[Aml1Egi8&ma'\nJ*sbY/<Rf6SgS'9]T\fT!r\'?
%"#ogs-0G"XkBS@c0X&CtM7Ypnlh;[GQqT1p#'6'CWk<KnQR`m<)$[M&j\!5\CFrP"XkW^fVhn=CEg)ZuP`J>\bWJKhc`Bg8+q!1#
%cD%ZJ1$u$eXUB(HZNNHjs)u\i[LTm5c8'm]FPEpI098]L@ATL:&4i%WPb@u#T'CWKbT?sp\Ot'2`!q/L.Jcr$)LlQZheLRiltLjZ
%_(R-(?&J5/h0u8&Y!cuX10K"m_#>i>;Es2&1[@s8LM:[PU(c!N1&&h?f,OZfH\&K`U^#CCO_lM(iGU0_h-/K'O[Mjh"EO(gPke:W
%dqVfR[irA2P8tem:uY.G9NlMHh<p\8##f@V>jEQfRB[6"(u'Z3CKT>X5FE@:.2GM&g[2c0X_)Z,!nAZ>UM+NZh4RV%[u#Q\7h5>7
%SnXt`Ra8$1q&4VG!r4d":3l]TD:TbeR-e:*MM:LCNI5#*:qY6'0IhKEJd-S5Bc(tN+[L`:eR$)2W%nYtbXnklgN1*:go:%n)c<U?
%).mWC9HTq!rq/"Kp\)f'OY5^BEL^Kl2XQE4)B.arj)iX%m>GJ#4Z-R_B>W8hYDp#"D4JQNo),c/Bf13S7`j!%GhcscAl9gj@1Jpa
%or@f>F=FQ+a*arZ'&C\hhr]2rVd5KFb"uB$]EU0c_p+.Vs#9:?&fFIsr@uPB'*W#7cVOM6oc1^6??%6-VEMQ$e_.WNY"cBo\6[\5
%D,'P?o/GYU3JV318&i\g8<U6@_P3Or//^A_AXWlbHiMKAfLaBf),;r,%D-6;7IAZsXSXAdB*L7cE%:sG3kDTGe@/n^A-U%cl;`G(
%k)&8h[&<SJ8o^>>en3=R)q;?2@7==G?]-taH=qj"O(fQl?MQG&kfuS<d`S?knIrb-dY8hWV'i?=MZ%/K?maFFD%a.UT.r+1?-Jnd
%`GEt3B&7uJ[PcIM+lqY@Q/JE4\_4*]GtDEOAc@!Vc.!\H[k@MsmE7(;&boa5:"GK!LH^HP%NTi<`UVa$q5<dE5@Smo7kASW#M4>+
%ks94-1etKK<V[IE@4jkoY?T8"W.f7#X`/Y<3ib44?iKiXlh3RB-=jmQ3k[mS<S[gEH.?a0fqcBVZn1:,X_,Q`JYLcCHP30mHD;KN
%ZA=Xr_gdNl2u(/^AOOI.SG0efD_L'FhZ<U1@iCckbbm*`VYUPqGef3NY<pKUl583K*f1g!c6pEN0`AcaP7D#"=l2(fkZQL.6SG\.
%%u+YHYFZ14drRpLF4[/%*)-HR)+I*UnbBrS0?6qn(GR]=:Xf&biR7gThsGP7OpYG<hYrM)9E+G$s7Rt\\?p3Kfs:D!Bt76@4k=Z8
%ih(UCnANC1LOZb()#X"(/]B!WMX-+>$#!&SbN4jo7K28iJQYW1*r]oE[UQ?'s3kWP!'7+`hW[A-dVj[#?RYZ!+V.=K"b>TkInd"=
%!,)blOIo#r"&N)P"TMIZ^T!JqqYJ%MQ0[giPD+e:m`EdqVn5-9Z%^'i_cZ)%p84>Wlcc[BPl5ij"Nn]cb!e-FD\2S0'O@:;!`/,V
%I+iB6O\dG6134<*?5#1F#h=k5:8.IW9Y&TIH#Sq,'m5JdUm`087XF'GE.+Rep+sBc^p;E4n472ghsIfi;kX,-<(,?LAMaL/%>B(p
%?;gf]H#ktE,h%8!TA)5g]<sl$5e^krPBZ&5jn>Wmf7X21;)u@Bi`'jg;BOC=]sC"-\d*S]'AAY`PGcZIS?]G\4Vl;rT+[#^4P(NF
%db$q8e:Ct*65$5cX]Fa;H;7[-0IoamXgco]T8en1;J.V31c6$OWC@YlV'gek_h<Q*D(>D0LjJ/4fN,b\1Z?+:be5J:OJJ%"XY`=u
%R&XA1'NJ!GheA?_RVK:$g?ipgWp4!@UJ^Gc$tA%9X#Gj"j15e8?VJ.J]:S,O_kB[Qm\l`?Fu$UWYE_*rGC*2brc^2$CMq0L1P39`
%72)3Y<kjt]la6NUX39)+Xgm/E111QS9749lQt_oA;('hp2u9d?RAi"J(?sdqFh?GF]=H:)]aDaYNWu9h$^NlfdoO"Xc)>ISYf^+/
%'oX].Z(Q;]>fN'mlU4Xh`YS!`R"XY6[QD(!WV9h;=hP>U$`cIYSfQIhW/1H7bKZ[@mU:^>g/.3]U2JKV).ei&^Nu=8C;!\4XiL+k
%Y=nJCMT_A2)#sPXV?fQCMjc?6<)50B75!X(_/A^2h/b#q,R0Zh#_]+Z8OVQj]md-o1-#7H:@@5XQ-.@XIebP;m'k\HNZF+E]^n\L
%Rsl5hcBP&q;*78-ND*&E$<&1P2ks'Uf4eNhp#V?:Rp9nBU\I9g#@3#FUWuW.90WqoS7L;NX&=t?V2<WHM'I,\Y\Bf\9IFUdoi!ab
%\Xd1oNWjL\7@c&Q'7LrgVPfPZDYE?5i(CPLOrlguTM&57Zq_)sO0P1UXf@nGJK4$)kYO>BhYiD)_ot>29tL:)Dj7!PU8;3u[9(k#
%JG/7CPo[9dH;2L'l/P0!iofKEla.WR7.#HY<O-:ui(mS$Yh%.!e&Ka_pTjGV+*:'9=+12o0Z0T\1>UHoEY'^?]aZFl@i'WG8iVH@
%.DHP-?"nG];0@\nAl`9JHHG'`k`qe_3Nd7C$:;Nlm7,WP^S/ok08g,_@:`i_)5A$*M8RjM74j:hVNqdaRoEl=.Eli?%h]R_._E_i
%nh;deND[ZTPiV\D-G!<6.A548CbW:1K4,7Sh&@?ln]WaEg\ZcXi"hV"a"CD*8q+%^iu+.62hGP@:eI&D)@(P"lF''dV.NH!hBWEj
%k?(W=ZJtPWnd&:2[na8H=;ep>3#h5:V/k413KD,olX&)qVa0Ib^sjDVf7=+&duCSiSM<QAJOeJ[dQ0Km:07YNTgjF)`MU.&J;es1
%3o+N$=rD0_)96E+8;!0s(2Acmc,!t"TTE!3Q,^#.fVb!Np!1U`n$LqePjsA<7YY6`IFbpLStaYOeS87L>mgIEAGJ^*F4%[#IMe'd
%lMKBC(1UNWPb-epbaIMTFS/qQ)RWUi>@<4T]"1Ed",%nn&^aRsYdV0W3*TsZe)3m5%BgS+o5^;sF%+c*[/nHsge?U`G'.W'Cp--i
%*&bh(G))ErMXsZ#[jr6ad*::qcp<AkHLNP+b\T8EA0Me$RTX_HL6nu#5h0CT0Pf+'m^7_al3@7?dN,G?JSerROhGAg'*>cGU'E0]
%RQ:>3.<N@GlAQ97r4Y20]MF@F+;7838hfalb$+]MpUKJmb?`[@=H#Ae0q+jUFmE\b@D;#'FaD3J4BL**-!Rd'*2P)dmP=/e<qdu^
%j"e_r-ehHupS]:$<YL5$LB312keNp52*Rjh3`d$`<3r]%*A$[M&:\Q$A.=K_o2b$mASDZ,7Vi#@?-X?Pb?ccO]TCcS23!a;kc1;W
%D/@%\@jp_Fg2Z6+'e5+VW\h=hata[rJX`f4>XhNr!u@6X.G2HE?:=iGA5O"gc7;mN(@0uEW%/%=MD5jK9oLUFK#IEK4Z.r!Q90,0
%#-ErPl@:Lu@VHlbW7#Cfa-ArcZ4<2L\8iVW']%Dbd<.W)GIgib@+)p=es[;LHTGHm$L:>Z$I_Q38W(rr-RfDg4W-/=C<^(n)NW9p
%XAHN-CL-YV#Kq8eVfGPd_a^[7jJq^s:iiE?AguH\<t0I7gPjG#(rNkp'`(.(hKHr\&/KqqV`CW_fYmX/P/-%&%LRC*bM^!#=)eU@
%76M&S1nfDV+%,?5.-;&hrI;5]aY4!CDcj9i-%k)s7he**jr4^ZaHspjnZCaR=^Z2B;-<=jDAD2MjeS))U1C<1\OtmYM=+B]:F3%>
%F?th9&'%cpi0JObX;Fp<eo+Tl&f+N(LJ"AX%.>(!/N9/>$g!7TA%`0;4>f:-n2>W\77SqnDh3CEc$WhW4Pnim]U8M/NUkZIFk*V/
%Uq`H6-$>8Q&(7s;[_6&J.uO(r:+]?i>qL*B,#QZJjXStjR<#XVA+,&eY0CqU<=)#S\ISLop&cpqQ#)A4E3A"6q^bHWM?epuT@#:$
%EV4JpM4eB<(WV:CqSAMO/+nY4\A6,$Vk#g8dph.uA@.6ss2lk4md1gJ-Xug=CBM%RT]1@0br0%rd?Ua%)R8>]8lKhC\(,:pc9&-t
%<+u6`AB3V_%EPa\/?FBhf\lHmZa\8V*P&E3MX+=^]]/h+*XDh+l;bi[kcEQ\]t.MTbDK]N($\;2iM][m\&Xc0%a]sMQEnZ9)Is`F
%9Mq)f<kgDM.*<<6X?d</X%.XHeT>mCnrtSIU.k#<b4*JB"r:\_WG^kEo;J)AQ@GXeQCAbV\jcHja>XT4VVK-4F4Jhj9U.qAme16K
%DnAt'r4C.d92thie^(Tgi%hEH-=TkHh-cM>Q0Z[g]ue"3BEGr=JVI_>9qX`"CLKYs-r[%BD`JJtflt2M?Q-oi7#L@;G5IPGm-mcV
%5[M(&N4$ma"$,X6Y?Nm7TmAZHDdMA@T^7Kf/>N>^Y&rsrEK4[@#S4pWVb2u:&I0d;`J>U(B=hjWVXDHi*pFPLr9-`h7k-+;TfZ>&
%3MP_7Vr#dI4Nq]o=TO/DfR:JkFdU3>WN'%mVVDEk;U6A8)'AO/?kXWT#`/ft*kf.j.EqF5QoI2_;N8IKTnWGY^dB2,PF;D6dZ-Vh
%@/t%iYX"5oqi0':\K2,2O!>sS49pj_,<@f%:\]gTNP`arr'uSW@3bS;8i9C62"iN+EX_UHV1ti!?P+&,Qq)Y73Z$MuE:r#KpXt#/
%*Z+1oPQ<2@Ek4,Wn;@E<=1?(J;d`'P&b-bOnedm8a*M^T)<q7elb8fW3uB*cS[O!EZ!M+VL/1*ZKX+0n'''r`aM8LAhq8dF2E4c4
%#;1&7k/2/YEOb^6CFH%7ZG2]=lr7D1Y1MrZBBOS>-2gH$j:jg6,P7lk_DiRQX@k>2UbYS5N)C#K3`kRQ:<U=Kq,c)1rZ`bhL%/nE
%#A1n#9%+48,n'Qa>s%I&cBV9id,1o%[_[6ZmXWlu"am+2?#P,!`biPh3l?**(?a__e#\)Y3iL3)[N:7H"6RL$Hl;('BbJ1P=b'CD
%bN5S<.GWUY\o;5%L\[L3^b('u>GWk<&"I9Z%mMX_*'\_U?@KZedXJ^8ZF/A2hDek(CYj>>]X,9?-snW?]D'"J0=JQ@CR]775M^IR
%Xd)(7g>2,f.t2Kmg'o*jNcWN#\qTU,ZXr1rk5*]rj3<SFG'C:ib$'L22V1TG3hk-IhU^A<2l4b.-T]K'T004iZIq`\QeEoh5<sjM
%U%i$?s7j6.q#4jJq7*`#CU?]>E;k4I92E6JrF3URJ%YG;IWQ"C'PbY2e"O2*pVWI"m`hZU\YFQGh<7o4Ebf#?2_Ktp2V5On`_p7@
%6,0r!]NTr"LgS,>0KBNK0?=&m]G\IkX)4F%o&p!B1Vo2l%gs,YoODt&fqW%X&TkURs*FCH"b1jnUTd\Q\[/[VI(u:8>e/HsSTnME
%p7[oDqnc6B]AgP-aIbOAlPmA>p;<`/f?<';2Y3!d(@tE'n^D\8n"$X`.ch'9;giAl<]XkfS&T3rn'pfU>H<7%=l"rW4F=H`=o-q"
%Pn"o85QV][f3b-(d#>I5m`T4F=aAM!HEt/sl8LmkWVc[0[q=eaPoXr1@a1-;<XLLlmsoKYUW>[.NTs\1^KQ@X2KtcEX=QkGZ+o1(
%1jg]7fZ`f#gcOA!%UI:Q:tYU)h0\GM>@3^ThGleB=f;#.:q]Yo%tLIRhW&rB/>'RbmnFHuolTM/d9GQ2qQ=!WbV/^6$`iBKLW)>J
%+$8,6LHg0_>,V]`A";E3ETf&K:Q$1i:E.@/Y?:Vuo(G"CS+XVO!==3n/3SEm]keFTSNYpH*C&4ZYC;!"Pt"^G)!]l1E^_c\C?q__
%_AC`+F5b4AQAQ[!gcJ_o'4NoQI*Wf$U\DHb4">Vb.b%L+rR``h+5PiF:>`blpE.%tS(l,)m2'MmocKYf^9!kk1L&.[UD(YoO'_M>
%p5-?PDTd<tgFF&R+.qW[hn@S5>3!G%0jf9D!Y:oPoDO;V9/RP+rb/sem?Ja-.M`f#Y8DHdYLsUT&a6X/DjI!./,s!&4nXEtk5%sD
%DXQ_"YCDtM!Tn-e&;0MeF%92P#W$-INu8P<5?8kr=l2-/'o_/89q13Oj4d&.!&F+iH"j;oIN9E3,]iXp'na?@kLk-i:OGKDFB6(+
%4jT\31eDRCQJ1Z^M@6gnfpo<eo[-jTs)ite,fpY%Ih5)gKno'7r4.#jZ+X,Z(6uPL4S[8IATP@e77#a_g!t<Q`8+YAT:KnErUn=f
%K:Mth3Z]8rr>5"97-/WbDm(^aL;S`l]SKnUTpa]`DKQ8Mc-ro$<VgYhXM7_6/,/so?\?J,D&LoGBD8_,o_+3$qsf!;i-r&!Sj*1/
%3?o5P5Zad_gb-,9QFF0oNc\(JI.;*B=tQh)CHp\PhQ&QCio[jRmcaTIIAl2VP,t=i^"dpN'd'URT5k1Eo1/<'Q\Sf%;X'^PcG`-;
%d0gK]gH&ssEVnSh(IFla$a78afu;4B-gspiIk.$MkJt-B%k?CG\VI_JUJGn!4^QeamAAG<Cdo.Q]ehXU/f*16il6%\5u[Fu%j%'[
%[_UUkWG^0Em;FX?q/NK:Sq16GTGMqR)0@Pn]Mp$K[^<ctXb$JSgiKsKIf(X=q!DXaru1%6D/R#-B;*DUGG#I=&%BcDrKH#Fs2\'P
%;IS'hJ2B/GQ*lB`aRk>#qI/F;?G>YGeBSiRe$!\2p;8ud[o'O(k4<t7'E@^SGkp-B@RR,0cckL)r%j0m<F8!IW[P^Yf.GL1H2<^'
%l5c1l2u)\Pp:4i[O4Y5K/[qu_o\GeLJT^Og]o>H=W%e4Y!6rRpDIKNrWZp"&2OLRU;g/2?r*l4S@!D=D:QjWUo`U^,8f>n+/V!f>
%mL`po<1@WWl58TFkk&8`oN,2QTkHoE:*6TJ!@$Tmi[0qg%PgL3cdpuE-6*XkAMY8-_hTFt*3CCEq[Wm@?mJ,rlm(SXWgj><<[Bcs
%K]l<`V:oJ/c\HUOF#Z$Q`t&RD2#U!Ha]_F<Q,s4_"J`nFUhjGtP,(amb><Z8%k,ekq=TE'9/B+XjGBTL$h"PblbJaM4FG#62F&^r
%AM%'*ZXe:NZ=tZ>"0GI02>^4CeW;)3p8J[2.Z_fp%@K!;ZA\TXNA+5+++tE&HEYZ_X+c;<:5l!;Kqo1,L.%Q%UXp/K2Crl$ERdXo
%4R`DnEKC+;L&_ORmc2&G->gW?\YFAPR`3NAd1Q-S2+q:@_H[aTca-O>g[9j)ign+m>h5"D5Ze":pVEFM>\kJ=H[D'^Im)K?Y$CmL
%aOW8o`c-;%UYQsH(0N[FG6bghUrPi./Y&po5%?M0rm'M9[HJq71#q-Q]136;rk*aMZ1.&/O"HouXck/Wcn+O#*e*LHU2_,j2U#\f
%9B99X]f+l6NKnG$f&3a4G8EJpU\_.,?!0?ph=?l6(!X-C[nb6VdGsU1b2a`Kl=E1Z]]%Gpk?q*WmW?VRr)[uj_mn@!0sg7F"n*K,
%Co+PNHgj%N*CBo9CjGd8^N!RXGV3MlrCc<"L$'Z(5q/`_8/u]P'-?_r$g#2-EOPIjO2K]W(YihQs)O#K>fA0meZEmTaPRaSf8It/
%='ON+BOUFQlcnRia'3I'I-HcmN*=+@_CFAA+mFLA]uh+6^ADK\3HRBFH$fm<bnpAk\9*tiHi"/g*i:BM;:Uk-4pPT^;pTeAkJ?bl
%fK8su^&^'cgk3dUNV3_*0-3M8ce`JGpnIn?>4+Olh`VFdV01sDZJO"8+(jOF=#SBGL[jL>I"(e,X;j@WZSp^t$+W-EoJco$>rZ>G
%"4kMNHhm9ZGLiG--RV4`^1;fQ/8Ba<Mqo[u<;(*fS1&1:2gjGmYb'WI5=h2$euF_^^nH(Bn>*b"il:]TXK9AoIf8j4??*U1a6@;$
%#TEf.YN>Y^T)uc*HF`]\IhPkD%uo2RX8NP>Ec58+^-e5lr,DSik%nou2#N:2l+U#0BB/12]r3a6[$[EeXoIgdTc#;I`Q_0@r2m<6
%Hi/h+=>uhRImXGpDq)Z%N`Ps^HgAY:e))q)jgX&-M/i=_2&EF1>*2#h3BshB*:qaiQT%!M?bRpP?<hY=FWH):Zs7IbEck20Sh/_Y
%7p><)NRP)Uc/U`U&(f*n%dU>;L>PSX2-kVZeF@"En?VZ\)jdqTEcYmj.4Zl\Eh^!ae(F53%r"V2R*E./Co]PWe^IXd#u5""(0e1o
%]j(4Zr35bV^j*Eg,<o"9MJ.N@n!cDCR#>ZpK2M4iVBTefE!JOXio5al?LH>KZc^;YafF%D6F@CX$P?XR$h!pKUQBtFO"F*WXZK=b
%/7?8fD9#H-[HQA_LpQBcrp!OS4YWSX_^=%\cjX^]p"SEJp;tnkT:l'oG;aqeI9hq-fX[51d)"T;#Jc:;#M5WTmF0UHoqZ.dqYLr:
%pj<B$SY6)G+7HWKPNt4Zl>P>0dIu2*dhArfeku1k(:Pee`oiku&AA0FGT8F7J@BISgY@&Ip0hC-;?+#b^3cKs]m78?Q9.'06HA-^
%KBHV>XUDJhd1$r$^cYaOm!L9G7LS:-ML_kd3#pNJi99.u_rAeOLE?j\@+eR#gg;\H>Zb5RP=K<f1,$oo>_$@<GLpX)&'p$<lG0]O
%d+r#Sm+(b$%`bVuZLrA3h>LYU2I1oC5.fkJ9#UlHB_NpeP5+Fl*Fn9]o*o#]>]M9r]DK9B>H9u7ZO=4uEirO>nD`sliY(A.-"poh
%9C('iX%L'Pm(]^)mgTt6O1m5Q:u#pTp"=Y>Hb&gs"?#G4\O3k$ja!Wqp^rhh/sX[-=h<4=[:T*&R5`I)pWrH7oC&7[#RK>bkhPt:
%-M<E%)!T9eRb>c_1:"^SA'F"+q^4bN+U\tVQ01:Zrck\FLeFm+OSM.j]m$AN48d[PfC.R?6,&o'>k@2TCR?6lfV%Tu[4:Q_\$g&6
%p=?ZZD6@fbFgIV4D.@"\ZP)t/6Z;,b0@e[.>52rWqd\-&35Eu3HfrcgfE,DEjBC_nO-+-JOc`ZYrUmM^5'6,DN[?5OT6U&`.1%YJ
%gIF7g4<T"AUelEe`C650%GotYpPSe%Qa:.MoBbDSr?p`&/mQ*2%53lkr-e1md8%6^;<V`M!PNmLmcN5CFLE'o4!t`b*7>8jI#i!S
%5aM,ie'cD*^LSo8cf<j$dSp2A$X@V!HsH[o8';+=\_Y49ru7&^mghA7eW0K0j\NRVrBg4N]!Am?qYPtY\\l1B]Xu-pSo<H+H2AgV
%0()aBf#,E;4Gm4dUT`PX]-Bi/aG[`\iPjDd\$16`gtl/Gs55J"jG+g]NP27XAYFBj(RDCcO(:MXRgYn]S-NH>*N^)l7ih((NES]=
%MEBWIhk!%\hKcN^\bEL5W3n\>+`\O=3dS5jRmZY&q:[W/9dAWSTZ,i!pm.=S`V],=f+#p:3%mCDqB,jO,P5+![drir=4Xui>hH"s
%UBC?1[Di#0[.+kOM>i\/&`kp5rHMa*E'*C+?n=J@T%c'1D",H:?#4C@D;WeiV6H!<:XrI)O[aQjU\FD_Z^l/=?G/Xi@1I"+8l8[)
%(9O@*Mq$QlWOZ;SS'^e"G&[f&*p*=;h'.fqL](I.='HNh$ul5H0WL-:0WL)<[G<,Jf%-UOG>_/gK_4l@))VG*gtq82F?XI%%-q'd
%%>`RoA%V<*itaO[["!nKb:PRC4=3eK5A\?Hr?t@"V'do\^=3u&bKuTXf\a>;Sd+'`ol+Q\J)!QEENllLgZV13oiT3$Ma_,+Nn`Fq
%r-V5e[&*\Bqpa8CUtbXV8rrq4Mou_#C#$VN*[>mU.eO.lHU"OIJ@asfDC=!SC?FJujf\=]4InR)ic];1@aG2Pn`$30mdth-naI]H
%pYS,F+q:daG!UUrB5,/dR4A]*p#GG9]gk`2_lkRlQ$^(MoC:@ZBY'QOehf3.><h!"Ll72&JNd2jiTLT(F88?*olg+i(7:qrh2e7-
%Pc-X*W[A0m(-eGso6RfnDf(-]\tW0o,[U./@=%I@s8Hgr(Hh0[E$Ke-\F=P#?/Bt`kcREk%i[e,_4ofYdiT#S01eMqX$fP0g!9i"
%m5&U5+SGX%:&+r0JLtBFerMkEMR`>hYc<*ppR"Nm0Zrq'$kL/k5:dR/cTp+nqa]3,@dK4i9Un@$@2EJ<fE*:/@lJVA]Er(hp:-N(
%L1GD<d_C-l$WaQWd8]`BKFHG0B!gZ)<3+lf[pRtqrj2N\r;!8U?$*pNDJm+l^D:.hg:/[-SHhAH40;V6\@oHPjXjT1rgP4O>5hA"
%V>p&eQJl"/G7_C,$'ebE^Y)n?J%+q4V%(k&DlZ#p]8ArUq]Gd3PC=1_G),h_:C:a;GB[Q-s1.P\rUG+Ogn_tTMAsMA(J:[-Um_q]
%M<hN$pGqph/j7n[mhY+@!qbPHhES*M2UGEAhuC9^,,/l'C?9-R.R2eIMHA#skO1XLDo10![T*0c'm]cNZsWb)V14LQ3$+4R[*i2C
%EbI0!!B2G"4r]X<lH1i?rnE-3oCT+7oj"66Y?$9V7IAl"U>C*%f7*)h%mN/V(&+T/IcZ`9S3)&_+"?o;(Rs;T5^_TO&`uJVIliBB
%X)2s"`l@>Q(.]a#D*?T4.Qjl;<]67.]\:L3b<&h`_`C[_ZW>dOUUVr]LmrkJ?t4%REdOuri4eO1#NUQ'kgQ$5YZ=/af#u+9n*&c6
%DL[.4g^[Q]mB?!)hh(9!q(SWB2t-.jVsdmDP_u)'<aK%tXgb_hhP.Wi]=:u;RlbPSaC-/!A%r%K@(5n:V#()2m?J3ufp6\qY@o+V
%s13TD4">=oHTti%T032cH3([^%5Z\1XQ;2)hlNHQ>s'Q`WIMFUM4:T&gj`FY)PcT%hrN*BX"/mp3.F%u"rPp\chE;)YI4KPS,JDk
%/WBpj#eDC+6lg\TGPh#GgJquDdI]pc-=0Y#dOg&"+%$CMO=+laeRX&>D7f`5qf8k8m*:(MgVOa7-cP8cb<%RKF\l%dno]@nn&9je
%pAXG.:_OSSm0Ed6ou9W,"2nmQ/OBi;of0^qG4/)(;bM"QZF%<W'Z03@>)'S0eD78iI0!?]IFu7U^>8d15<M"s:E'*'!b;)[YIUG"
%8e6:Es.935Drk,hs!G'BpH?*U!bJE+hF8GX1NqE8W>^.KR6aHK8j!$]TPiAcK7%pQ]uA,'B%,2/(in[WcXIAhFDI54nf%)/qea5G
%LXqq2EOV::[//%J:XScch+FTrq(ZirEMn)E_7*)04,q7Iqg>],bPfp3_&7L]j8hH0Joq$d4h!ajIG'fF-@^TebcI0L5J[<.>SdAV
%dF'I-7_Y6=22PPaQ!rpVhsM2/HOD3Ng#gCcL66/>5iK1-0cG6)"<YOT7t9Cqq8`O3fRC"%4!$>tbeTGa\,g_5%f:=(ru(i:iaqaH
%o.i1L8]S&&e&`G0,7#8Z[#;F3H6teR'*a1YrN\b2Ch$F6s0HIAO0fn7OEaO(mq3(3b1L<f%F"mg,N?kncXCWMg8Egh=&a,A4^1'0
%J18r_Xd&;THc?Q$[c:t9.iT=+#^nM75d?k?Jf`m)+T1EdDlU?<!Y()?Z0%*VK&=tj.j,=o9uHjE=r.%f`IAXZ7t8og*F1r)p.!No
%3SDcfbQNJuOX&!n4fen$D:=/f*,=AMN3qt65]l47G1uY$H.BWk[6bE-="qL3`\_QN+B,0%Vf$q(#HIS7prtL_+;!qp^^/,nc6,*L
%QOUXX/7>;3#)JRb#Rh[Olbbqng=BQIb(dX$\p[^F+Tdt#L?hTJVf$Ip#Pt+J^4WuUL%LF9[UiTEfC[P@462#;/0?'PDu]SSS##g5
%R[7/Zbe-.e'uU%N0e"'<A$;`lgb8kJ@\WG!S1H'E(H%fM)d1ea*=XSTe?E4O6X;@hH3UGr!81N4FFjP7$qr=<LMnL(H?M3Rgjj-5
%TQZ,Kb!oVH\E&2^;n\;)eEE;qedZF)/28i_K2=oudfi51-4CER5fBDI!?oVeSlG2X2[^na%!=,YVh2)3LCEa$45c2>$9CMGou.+)
%_1J6jA6g,Y\Kk#VqQN4]_nL%6&d">kR]1L>kV:.6%7V:-WZ-7Jj'gl#CdA0Q0c`GYL'(cb@X<Sh+IC,):FhTr.GtK#coVn&!5`E;
%TOSm6#$fXH23`Ct>_'\mqkah9iM^Dc1d&S=J>'""iM^'9o]>UI''`mLc%NXs4(T:+57#I6-@)1jUhRXm_ugoZiiR.P-khE*JWT!?
%!Wd7-=FQgV@ZZKOPE;#RKu+Z3+eM+?$=d]R+D$:qFTNm)51F9(\GB$_j_59mGWu*.'d@Qu^A^,LBY$+*Oa\QYjJ?6@4\No0C[j-6
%5Hr7<qZ7+Acr/J^;,bW9'657="p\PCPj6bR=U3!XJZ-QM]*,CuJ<Ua['=;2aee$,IhGFJ\n-@"pdVWP]j;kA6da4<#9'ed-<g/JG
%e8:e4S</'%_+-OC/.IRPW"04='GmKI%Du&FL)QtA]bNSCp1]7BoJcuN"@N/R1G/[(n"E^k53PF7gGn3pMp%#Hj!;bn,>QfD**"lG
%n-9M,cOL1!Pc+fhM!BgH!HZo!X[+efg90CKW#L>=U2hX&EF"d$^i?U]?3&dc/PbR2'H2UO@!2bS*nY9`^kE388V:sb/6If)LB7W3
%=KY"sd84):/2neWJA7<CCAe/+\?HgTl=>[$$YB[&Q:@0JN(1R4.RQ35CC<N14L$m!NZ!S1]`NjN=LR5qmTNZT?:G%;e&tY89UchD
%g(EnGcs_UE<-)0f5Uci-bts=7#pe#s2&Z2OTdEN$<1VqQ7lf>a":F0&HE^:^N<&%l^8pu4+9OYVHGd?(X?]q<BG8V;Qlr'E0IAOb
%PGUUqVhm`JM)@msJn]se5r&P'6(o+!V'kaPRrQkt!_tfMJIEM?FZb'2L47\`!^;%2+DC&Am2:ogdC8V!O:Y_.Fc:#\C.%[^\qA8e
%(kmF5J)GPU9IqJ)$=_N5V[>95MA7L8(^:eg7;^uK[qlHS44+q9R(-U&NO%.iK5K-.6lI.3oJ8&<!rPV6oHfar6;oNaq5NYBN))8[
%7nE;*e._t^+k.2-&R-,""o9Ktk!1SV:L"I-7KS:TK@'+d?f3ARaS'G>L>E;#cC`GrMG$eQlb$s/`/W,!63c+tk9Ut`+YG!g@+pHh
%6>TV<?m:u@2qY4LHihk`LWh,B@ucnO6:-9/riJF3LQ\>!=B7n,"1:T`63j(?@L_XZ,q=RC]-^m7aI^pQ"3>Y55;>qn7,LUKWIg;0
%W]J9!7([K$<!UqR9/:T[:6\D'TP5#q<ZFcV/^O$UPm!ai41o=t1!"B#e2'Eci@7c]8?r<(V`[dt-7=X^);9ms)Qm2em/U5t/fXR?
%Nil'+AO)`[WtP7E./)J-6&W>i<#oaUXb39S5YKS(VUR8Hfg%nW1ebW"R%^((^n:d6LOH4"0LnKc1I7b6qL)`g2.DqXP!-0>WAF=P
%2GO2_bW&WJoGVRTVA(R(P\<FV7VWFoJJjnO6GX5:(`foLa&X'E/C4&-k7*VVmtXZZ5*\Kg1CpCE2NYFLH"?O3&?Tf7U`:5Q\X7Mo
%'/pn"`je2AYg=T@N+3L[TG>SM+%HoUH8aA*lq<_+Y,*QTSL[=5+SWOaG7t.2TqNKAC'>bJ/u>6j>.&I[_?L+4"4-'S"Sc5`#,)V'
%U0WInJVaV/57E.&ed)PND0]s928+UjQ;_8IVQL19nibIRe:g(NP[6X40ENn)ct+gTZ_1!N?m+q6=Rqg]kIo;%T&[@!I<`:+V*dpJ
%</,+IGeBAaD$L;MZ#'&Jd7amQ[Yjn=OG5TS3*9X_%:5h3?/NPu0J<WfcV?_Z0l^*dMG0ZQ$Q#erHkp;@>NJ[Ffg1X=+40``]e"KH
%>YU#DP*"meNq.)ReM5c1o-LS&Zes#Q>iE2VUj0\k,j.1d0pGuNYS*JH`AS]H4Fe3X6X"&/V;[Zd)s'nZnH)E??D&3$73bB[G=Dg_
%VtJa\AXBrJF*o?hJqcmLnIeQ8?D<=R#Vjq1K>98Ogb?is6k/bqp$0m)dUc`-q.(!RQsdQ,'gH738P&JA7sUHog,NM.q!u%"O59uf
%i#'!JFZmNdNXi:bUH1o]edjof!$^HLJFuaJD'_.PaoP2L"RA(4:Nhkq-0@]pHpRWL+P-s;XUP`eqN=*HVmY4]BpUh9Re_JfaUO!F
%s):(OO;l+"nPfkq_0CKkQM$n<)HpSu/Fn*i#<[2`'HpHuf(]9%KJ&>C$<5na8><JpTGiqS"0+<V^&lps=jL`HNnRT#1pi[)-FP4:
%&$0j0c`!B<KP["B<2c>k6sVn4YrLH?5fg9!^'-ea$OdAi5mc:K5h&*_3jH$,:nOLHq%VI<q'0ouJN?>f(WC5ofG4^H)."#cp"9BT
%TPO=M,D"'2KIi1$$Lg>!18\7)ec@f&/.*A,ZlboK`#35+gp31np"pA/G&;-u;4e`3C(im53uleO]tpfS,2F.KB-],!__AnOW5'/F
%#c<7R/[Boo"!M`*n%QZQja0;'[=IB[63`@3_o0Q8#t0T^!\)4XZ$ccZnneOH[i5E:h^re!d+5qu,e"LbZsA<-OgJs/7"^T0531lL
%:R:%0g9q&S*A=7t'hI7'>AT(']S&kXJ7r0G]&G.AO3KKq:W6rmT%42;e7i!R$Edt3aY$GlL-gT/>="$(bB[/LMK46rT(n$bAQ[&+
%KH[JTnAYMZ2rD#19eeR$=9l8=`]Anp#S-Hl[I8mG2n?&@D@u)f9JXb/fYWd#[hU`ab=8#'@5s_2<^8Hqq=<GTOg!D.U3_G7go`TG
%]:i&LZN17l#cqD6KdeLGKOP>+7%9'h"RH-NJr:RINl/brJT%i^AQi8^ch:2YRhcf-o$q`K,U%4.ppV6^(cgtaW9SboKd*mII2qR7
%Be.k$+4[KIT,Ll9P?=\Z/"k$]hWh@@m8oKgC,?QN'.E%5f]1m<6AbcOE8cWlMZo+Lk0%fI#"!#V]g9YCEeA4EC/BM%3m%O(W]FZO
%W`cH0(`N'!:/Y.]?@gmj7Y]\gd,[UL7o6kG2A1a`9]'/1*>q&fVN*tVEp0he,7+Ri7lhojKTjG_[/D^8"JaE(EbLnhD[G#PfjV<X
%Af5F>9%tOg&BZ.#0)2mWe[EOU<,@\r7PG`i>)D,"]4@qr^<?87'QJ/[9JSok,eM8h?"S'g5T;hr9;YO66d52`Usi1J`gan))0X7?
%Z"UR?B&XL8Ge?W9,m*B'*nuQ'3^B?]a`KpgOss5^,EneU,#\rl/MbiiM?hk03o4AO6`.qfP-*s"-2TG&FW%W8[`QC4n(;*GFtF<I
%682/dRP'>K=cC9q<#9al91<0BU"[^hXURcthdBtO:=:g9PsgS?>0VP*[;t:H*.,k+<i\aR2?ZSB`tD5M)uL!\EFHk[Ycp-&iW^!?
%/RcGH%!X%K71q>P_?AO-qZX@%k6,6`3JP^eD'fPs3d)4f%%pc;NB01B`1lT!\m%@:'fQdhMkMa-X_HT8TaG0r(TS[>6jnfdma.iE
%4B9`2m7Y()!/4+7JKD3Je-c^&kYZEG:&Yp%jC06"IiuhMEBqbhqR#Ym'kGZmf_WQ_Qsk*`G<GRN)6@XMT,'(^<ubrUh0*f##a^<s
%gre"(JK[B%)T'>[@?GOa=MRCl4)>XD$b69Uj"S60:Dg+*rA%s&"!io,Kkr390**qH*]Ka7*?iH</d:WSiOMCDfu5R]p<eX2pn*;c
%:puX#M"*ff[ZM,AHoc[$TF*KqCnEg(<=i:"E80,8_]0+9[OZkkUCAgOe>MOuh?9f!oLM*"a%Vk;J?H/ng_H1/8mEVej%S>=8VUBT
%Sc\h=@$2^D^,U!-i:t]t^bC[o'4a/72/4apI$rbE@Co2GU=B^^("bdmK!mYb"De?`n!uR1(,j%eI&8Cp-14]=I,%F`M"We6Jr/q/
%":g^=_K/Zss&RXjAhg`/L5)JLrl\K>1/rJ].N/PVNZq&EP?[6eB8ab:D+B0t*blpn+Tqt7\O)T"$IRs%K<ZsN1h#SSG8'40@:6F3
%m8a!LN7^<V<lgRkgg*8(S%=BeWC&^O)+k*W#Z-ljg>.HsmA"ON?mmF/T:p*#KAPQ>"jD'KXnb.**]==M&-s34RlIo8@(=F:oKoDg
%Tb3'.3m_\SBP3"Q!aIY:gu+@Mi$Kfm"&jiT)@Cm.6c"3RK6T)?@THaao$a_7cd!Hgm,1oD(^e@EgV4FC7e%-MPNDB10Ifq/Qf[bq
%0^6Iu4g#3iK+j'iL'=9D#!+3g@&W*f%PQ*rf_:e-.7>_$%,j*V(q>D5d7%Hs&GQ(k'T7edh<"0B_tTs@lT)\HEd1?t&mbSO*!YU?
%To">)R0jRJT>bDA5td]_A3M5+]?LcTq6WE:A+9k`"V_7u6I&T>=C5Z=ALR/Q[PiS=n.u9VCZ*351AD5$kIZAO?N;Z.&S?-\\?"8#
%!g9fq2)"USDZXLT?eL6mrJJnaTjPG<iHq.;jM_I31tjK^s4YGOqbTLVNf`:Y,F]nLMl:8-4C1@J?\Efc.]LcJ6'eHEKROMU4d3q;
%.(I'>j1:r:WPHbgC77lt;!8^D9^3bg*3`EaO#,nN\F@I@"kO:g:$lZ"?\H40G4e/34J[;ifAq_e'<tmU'<ZNN+>*AL+rlI`6e@H6
%?l7rPBOP4Mmr7p6$3#qrB7(WR2\VA?i;+Q?]sO:P`.h;'rZ]M_.2Mi8SfhRt<hMm2PE;#TKkfenFVG?LJh7;0%>^?"N5$LR)Y'13
%e&WNg@a?>cTI#>Il<$)q%T6lm5-H]VK,5e[6,5',dq<;,R+Qb5N*Th6L<6R<jYk$j5h?cL0a)=0To_=,T3b&GijgX-_s#2/8rb+U
%%$r*Bd&CU\WKZE^8eGHS"<NNaX;,LCQ%l_qe+$d%9_\p+(&u6=p%VBs'u/9q4k?ZK(lmH\"PBsfH.:Y]&KP%@5iZ"MNlFZ?@54K9
%=i52XePO.*!e.U&d@fTP=(0ba%;I<TT>5)u_6&C+F[r3Q%@6KCLSLHe%[8;U(ljKhk<R@JU59d6`P^((#2.q&\ILip(%R"#i2pYV
%WhMi?"KIYuKBEu0"SM48:^<[O'%FLnokHId.NfpS`=XKiW&UaVXt_B"-6grmH=8dhU2acR2@)pn1'RtYJi^U7]uLY`%nHH;7ZI\-
%b@@G6Y&bTE#?qa.Z\J5*$_>+[m>qKR#>h$u>Y<S*.)1!CZJ[<)]tj.BHD[B^]cOLk8"kb_\hk%IL`AN-,!r'a+9u"L5b=gIE>$fi
%#mSBqRO+=<+kbFc<,4"DH#\8U_I@`"=[7Q8D[6]rS"g5q?NUhnKDZm'E/,MG)gc\kbb=E:g6W(.[R-<?lHl=r'Vc0AflVl`+`pln
%Z7'Ai&4J*!ls%f3cnD%u&@-4[gYrc5Pt8*)+V.a:4E?4U*I&R30ZHEj><W%]R$S;nC`>cibALO;(i/_g_*C9D1^:TuT>r%q2W<Q)
%[_\M=S0<guQQHc+KtsX0q"_=ZLNjY?a@f%QF''(if4'ib.V$0p!`$h\1)^[Y+8n"Bodhh^h]NAU(/@7\7_pJWU%s48^uDBh/[Ruq
%YmkSf;8`IP5m3T>%kZ.:+o7KWp)t..XcGSK*pDCcib=7Kd(j&[`e34rhN$iAc]dA#XQb6sjKu$bhpSYB*SpDA!EMUBl,ZXTOIjJ=
%:JuS(@\2b(*QEqi2)XoJ0\g4&.&sQ!0H@b@dVQWJ]&PQ>!L.oRq[KqE'KD\W%QuND2@M1R#'Lp7EBN4Bkq&U8,lWD/*9AQSjZ(>Y
%[F'SE?,INs<a8_I2HJiK:rn#SP*1p;')\16M3I805(Xs?8YO,XasE)EStek*+p!TQ47$tt5p<AP#R)bgN+cnW[[7kK8-PF;cR'/@
%l4._.O<i7*1JHAf95*Q>e?mIc9O2B\'O.MVJgV[MG(kG3$_9`f)-3:?$H5>$41=Hqa?c.bcpnZiV5f>^G"U:pB2'4]r(q&j>C>]@
%Sktk8`>GAHdNgtJ,@^J;_W<s"*>@SX3KQFn`V`c9`F7g0%+]11IVD^@s-osHmG[/<?[2PIqQp^?*/-6`W;mL;9g'/?NEJaQPIk\m
%SgP\$03Y&qe0^#Me4-ki__.rBHITsSe!=f?7uQ*RINZlFn[T`t]0.?QK95C-"Dqtd7r)72cj$2ZZ2uUk_]Vmh;ClL6W5l)JX7LWG
%[5a&!QDn<EiXR,KUJgi6*Z#X%XDq'E,(#`r/Sdbfck$GV_!FDk$r1"KOiudaH,Hl-iNdB5&ubkI&"RXjdno>D-\<2hEBQ^BOBkXZ
%_&68AE:gn:"Y`9/fruiK"L;IZ'7>'##pC-ec:P8kLT!SG,;T?CA?e,+a97TXUr4c_40b]YI.%)WiV9"H?fecemY^>ra7-U[H[HW"
%*SEd\1AoKlHk,S7(%Qkc.5?uJ588A`plR]do770*inbFWXWs!4d#l$-MPqKq]%B_4C56\Q):aOEBD-/fjmucPa>fAa>'X^ULX__T
%%FpUBfQ=Am*!d@Yo7jW$__E+[DkT<*ZGEdMkB#Q.^P6L>)-+LLn-/tQ@)-Dl_pH_7@,E[ABnlKKRQ-/(_g-P;_pQCo*8AHUPbpG4
%_G9GD6#ldacnON.L?S=U66\<UG7^J-X<XkjM@F=T"nRi/"leel6Dc3WQI(U\)n]"rZ9/T5Dp^rj.-TS`2gLUMRK[%s7,I"T7g-Zq
%(RYo_p&e(rr"=#(RbVj&;HFr_<*aq%:iZ/j)R8DkAX\S1);!tY$utqPHYrT<C,Hnh8/gq=^X@oh0WZsR[2N1Za<QhK(n036Ie/]s
%mKcA=I$DMnmQD`ok+fG]O+Am"<4.(6\cerNNn?%`CcKT+4X/lhNbAXK<>WtMMAqB2hBS.pB\+;f!H)T7Q_\bqW-aTH44b'Y"^"'%
%)iK'(aRd1^(Z33F7mpY7jq/Lq'[T%Mho39!%FXZ-lDV;gQpf%Zcl*Mj*iV)?:.)ej8DWFu0n/SRLm'8OaOeifLV!59W/+*gJu4W"
%EUT$7+'?0+ingFg7cN:"5.peaS.<YfO-b!Dcm?J<:L(-"=@?X12:,u%.,ZIL/U"o1+eG[OP*ac4"B"-[dsW6i%+>aiJ.AW>HRH6F
%N]\44Q[MZR#X!Wq-U2G&1?3@,'3D2a+FXUE:fGmJ*Q%8e)f3\%+Za,L,i:>!6sRmtT*dD_acR/*/MR_!<Y;bik+'aidC6?qq>lY6
%dQS-R_.SapqS&J&RYD*Taj5iug`E,gBHTZEk^4GKVI1^<@kp(JIH(^LOd-Rp%mLY6#b=7ODu#a8)1`umil"r[7*4:/$*Z!FIjojJ
%6DDIb@nOO9]K.U"4:$A_7BRnd/V]'\9-o-Nc<PG5JfYg?677MpmWa-$_Ia87&^k0W*`k`D`']=eSl2*t,&WSj5X);44I[g@2>B(F
%11XF@+ci0khct0*e8gBqbOG;c7l'lO$62]'I*.kQ^?"&P<U<PP+-35XmQX%39kUC*&p"r1;,&d(kg=W:@KV@RcloR9pnn1YVCBTM
%-h`Y;LpX-]0[FtV'lesD;9O!j771JfP%)]NBbH6(qh.OkPJVC("^SAW@WaX2[@*#j*7GPLdkr/K*?CcL(uD=f\^CjZWm)-.moq@0
%_nX_u<221?[#T84C9.>e4<og0f*EK%$lNKh8_/,q^7baTfqbP+5toOM*"ne#&=3J9b90Y9cpktEd31eU.iU/s7*`O^3gjVT8nr5r
%bEl1UAZ4VO.tS"XDOBCuMNC*VM?"2Y>%0o#aH4LHjH>%"Mdn#u"Frc;>PaM54u:M7U+H]4@?H/,9*..Lr4'7=&j/gg7,!e(+Lnh9
%-,GdGQrjt8U+Zfk.[C4=bmb=Z!_*Ub?uS]Q+HG\6Q37`]RMT_]*`Kh"QA,Z/q167,GhQ=f9*1^7%fF-X6+KR-70kR]l0(bAadG<%
%,U?3[r7,297+m`R,2eseMLZ=I#h)T>`0I6Y`/4PV*K'b49[P(`/6B;+/'MpSr8`annb\$oML]^[MPM/28O-),FV7?!B=!6?g7"+R
%jJ%`$fhBhoj/W7XQ)7CPE`KpSZ0SZB<<,;,-X.:8Hn-nhN?kbWG^(l<gf'@E%G7(^\L=+0iee1a\L@7,,\)a!TM7ni-n%Vn'GN#5
%"WrA*M+)uk=f?;=q+sC@gX?rB+>#EUI0Hjg_=[e@7,T?6OAfZTl[bMUg3Na?1N`$&H2nN&bUM-GKP]6^=:YsS"/p!aCcN'.)hs7C
%J>,#XYHJ0P#._X&jT)9D3h;Q='OhEJ-nXlsXot[:q=:`3^d;jqS8ttLhumOG>@.[n>qB$.KZ<0FHV(VHL+<+jg@Rg<K?\?r$]`rT
%_(Ai^1Ou62p[DGk8!m-\ZJ!>(DNlR!-EX@aZe.a0hCOG80Nap9.#>oF-t0+c\RroUM0$caR3Z+'ec@_$=R\0.m4r74#`GgQm&C^0
%M/ll=nq730,jMYHS@G[g4s3;PD7OLP1EQbCV54\FgXbMMchG4+VW9G*bDTM>A]@YWL<*MLl_oUGMK3;?nterZ7Roh/NJ\*^HLKcf
%*iE)dJ;4e$`]ZVh_)AMW$Q*C;7LYmM.1&tDoqp6!N6OQ$s$HV$1`f=B#Q39b*tNN]#4K[\b)(boG)ukOKKpXp?1_Y^.8Y+2L-jW5
%jKLeiK]F:k?o1]`%E%0BjjI>oOO.DZAP#c'0n"am%mWFrW,gO1B<`N+Bkb/tj7DrjG<LD5-h)C@SR(RO`Vjho9S;f,gO)50!+hT$
%+TZgZ5c"%F-&iGD_9QEYgA&C#BX4_O[&UIo+QQ$nRJ#`_aQGL;a@L84E@6QF=<:e9EYq3B-kM!\2p`\]qO&m?U+5BMUDc&VWXePj
%^qWktAMDK3F.$+4\'#r"@.OlNJr0u'SLMqM`NqOt*([m_:Y8U'ID4>\:jhEfNuZ=O>tgniccM:pPk/4:SBFae%EO8h7?%dA1I3#q
%T^2,hq6%c_)^hlc+U&*\\P.0PIQbdA!bm]5'J!.O*iD=9q?cB6.Zro1.Qi+l$n`V3Sl>+kQ!u#"kCShX0+WU&(d!d;>DC<3EF;<<
%j2I]D<X!MP#]a3LnA1fn_h@k;^Ji4630Z%h?iXgD+ID)Z#WZ>o*H%E%<"u^=f*M_dQ8$Aphr8fZSd3R*=TqFW)7"*!MP`2O7WAc[
%kaY[5-?Q2p*BZh'E.Jbe8T=DIF<-JP$aW>I"MG=g@0['s_nfL7@"*EASqIo%`1]+MaV']*N>a:DX]D![gfh=Y(=5+@'bk0aV4u@q
%g;e<smQhsl>-)l?Te\EU$tloc[@UlR8ebO(+Y@kV>8t2)hjkj>a@]O.+LGo1+\&8\/MAm[OkZ@YHs:d6AY!8@?hB%d+C$&kMHJoB
%%_jnoRg9;iK/0spnDe1u1-(31MPco-=KLT=9It9&`t%@RLFS+/]P6WrAcbj<X?u#@XJurW[;&aElF?l0mbs%4GR-G@_^&];TsQ&_
%*YQapEZ:*99^4>70"Z`dbS#R1[V#A0^@R:ZU!<3ipB=4&7P6DnY4+uW@11Nj'gM(M=kqRaH!4lJ9l\sKcX5JaAd8>W0t$4ih4SJK
%.*1S'?Cf'D4S3g9+[Wkp-lTU+CLfuLJb0:2<X9ee!@V3*mfs]bZBP2qL9P;`e<>+;W(+&(`iNpE6)JST"6R'+o$&+bVrO09.mk4#
%Q4(t(QSP?O'Tsf6L]jHB%>@EX7+EW4QV4C/IrpW@]e//G+j8)sGgSpRV*D='9dH`%8Rh4k&kRm7J-%;0Fi8RidND0F4&dF7`EsV`
%72$!h[22O_=OLP5Of3ZT`:8*+2t`mO[OSF[WY\C.09eUs^1`*0j]#,2RLgK!8+QM7-?u^mfZE\Q'*RQOXa8CuT`?n#W95?Yblce7
%aQq/@+;90@8#[k1&>diDnkBcT,aV##4!^Q64b?1Cn^L4k9bWALoJ]M6VCSYCP5_>8K=Moqi?VFlE)a%8^Ne3Q+jKRPP6@*EjoRl`
%iG3A#&7i&MY'SQM#(l9,b=>,8Eg"b=,\14K9m5a5PX&Zma[]ENRSZ`aN#QKaN!5Hth_^Io&:/Mu=ai!\1dQrW=6`KnPW]+-c@scS
%]lTEChq"AUTr\/0dC[,ORSlU<=*r@@V3'u\]5g,%5%u3,q,RfuV=>u<W^$^-o@fBTY/Tk'Qh2Y"A9F`B/`6%H-M@"e</cY]9dCW)
%:c*KGG1T']@5t:;nGAh7nR4^R`SgrE8^liUN*tq_:]k2JoKsC3N"b(Z8$r]nL3r-goMJRmjn^pHHq>#&_5rq,SfLDr6C_[`TU;Z0
%@+re5(E!L4fn;l1#>gQW5?WWVZXXK>"9"5PQO?&?da\WD%p5d=_-."d37Ld)al5<!*"6ZTJ2<mRjUS#OlAbHa2$0@4.ktSmmBOUq
%ao4pi_#[]VE&9Rg2jCJ#S\.@el%JgZd*.IpC9\H70iK)Dai#UW@COGac#c0X'Paj_4'YTRZ]"mlmfSJ@s):g-$?P?]($LZI3OQs9
%L4UI.3Cogd<5S]N8uc9i_u1W=$gE=dU<0WbmM-2J[>S\bd859a%O$9c!YbOj5qLX.-'AZN!R\BM\ABBs#)9YO,HK99X^)CDH%H<@
%'\NjH8-UAjeHWjf$N_&[?sI,1,mJNP._^ts,7D4q>?WhI^d$>[U&`_RKuo)an/\6"-QaLN=1olO0Q.?FH)(eanBm4#XZ?XMXX]PG
%,W[8'rJDM2[!J+B&9:W>c3u!N3i^,8a?7t[N>sNQ;aZnBKJ[GB5"S]__bjD9/J5.M"f2tgfYOj/-"i*%[Ag%R0H<fK.7RD4Y+bGn
%n$A&>>SZ-,_pm<<M)Qi((@1\#QMF\T#.5/m!n@oT$Z@^*M73U%WdB@iPe9<4M"Kk0Dffnoje:8]6'[4/3Kl3/[Ia](*bsLQ<-bF=
%5H+-L97Ke"U"90.Q%th(K-Fg3a?rZ3+f-3FH)RQ,W"T%aA)!+0F861dBP]J/Rq;F2hB2QG.M9(o[4`&jAnu0"UNM?R&lDU*<--ho
%,&5pWP_l>]cVIP&*;trr6(-dni=F(!e/FB9,&63Mb!a_cIo%JdB)\HpLmkl,Qm5<qKZn5)jpXjYpjst-[<1P13b7%_</IPr?Vi&C
%<hIQ'eC#.4M5YQ(:aMhO^7`V9/UbHNMl.+K2Uu=^l2gF^7Yms;]5e'T,&2t7r6j"2e0*!Te5><;@NoPC'OJ=hr._S-_sX0i)6LN'
%1?Z%4b:-8/qm>gIUGqEG@VS(f>=]e8?3"]DS;/Z[YXILSW]P[0L>f(3"&D>0%5QgN)kB*d)b\0WQ4UYOJ<cK;'D*P"F/_16c__('
%bHa/V\h%o#-4(!'hCs^j;WRN1N=F2Q/F2kcSOq>ocPe,+J7ZVk<'XTPGqt4_iWEg)`^igr)T8]tr;B%4k;h9B)CJCQBTWLG"I``'
%Ci)/3[8pe$QkimECc_ON(dqM=?^]IS=mY1.A!O/*+o*H3l;$&jETeaAaca?Bgr/7]]1a_o.h$=r"u9U-9,i^t5f^]324FYVamMk8
%,"0N5`\O9_`u`ReLe2b<oDf.SWW6+C=+QB&-62Sl\-UK"!CECDF%F$B#b>HHKL;*5GbSk4r^RM_`/%S-:]F!Sn0kXF]pR%X92St)
%caLrY"AtrR6!)7gH+4hd*0&X^/NfjHL5[gPs4ZJ1rs06o0du'/AMl`;;PqIU_&e:c=&9P2QR==Q&Km-+ZB(1s@Q"_.JOC^?Lk:lj
%'H+f$]d"2#apa!(Qm!F1=[cVahLZX\mOVtsi.B9"V$O>bOUg2RUZG%%Pg&D@#(cI$4B3=,()&*WkE(p_*MQ52!-7;>*JX\#+e(V!
%O3Dt)G^sQCRU#+8h(?dR.YXA;&gG7o!aVHUV&6FH>W@:J6IV<#IL2I'1ggXsfup>l;h`XP+UJmSqEX^=FHc>oi_Y:p;l$2,j/45b
%gu35VUk-gi&qYCk<+\dSE"7N9qg'ua4b8DB;LhH1g<_/q!'WbQQ?kqjq]R6'4(S)H$*lt;:)k6"'_brPMPi:@5&i_t(Cs#US'k_C
%@%4$o[tB:Kk7BRM/&IaODc+9to>]ho3*bQ#<[l$BKZa?s,-mT4l"ZM9*N,<8nj5)l\i(Wtp6nKLE>(QkB_]_H]q6cNpeU7+ba7Eh
%kNS+9MktR6F;^[NUEtZ3bRQKE+de]NKBOMT%XH8pca.NnC9Z_:V*U@>_=U2*QFBi^%>XMrSo_9W:pPrmlIm#T0QsBPP(]bm<22d*
%cV$ioPGgFW))6f*#oD$"q8JI1>+WiH2>B8\&hPD,P9&[6,q9`=WpalQ<Knb,b%85HO:W.`-:C:sC95O_`<1BW#kKMT8;\=>,g'"n
%C6HHuf-Q,<"-TB7=q)ZGP6/O+4h<0X#tY^L0+EM$TP?j"@0d[)#mt6:(Jbc:Oc\dWT]gGrb/=ifs8KbF'[Z?XF%K1f3ZogjeYOHt
%ci*,?Hbh<X.,#g-TZIrQ]a7HJhA6[`PPs).XN$?sqFL3I/ka-5R':H=L^>G)Dh9cR#S2]K$%Gip5YT]!UH5F$:KbM1:jmhWTdNM^
%&144V1U76:,FKl)Lf0fU`?0L"Qou!5\Yqel8//#+4%YYg$).a6DTJt+Q6"B=`2\FoP[iuId@R#[NEQu%8?OudeV-Bn"aRB_`Ipl(
%eDilM0=#'N6=Pgn]a5jEW4p!E)MY"9`FMs7rSJqt:'BKdqJACpY0qF8pq'/\/`Z:+8B0O5RY\^+:_nPINMuWak_pR3=1Q->n@QgH
%Y.g44^h*:HjT=&Omj]-`%)8iJi%k55Ee3Q8GEiQ+!h$P5c$R?KJQ)=aZPTTGi"UX\M`!!/1;u0m1RVfW$ZE=%b>b*i^8k5kC.p7@
%W35Dbb&/g-c;K3l"p6GNY#9gLoGr&l7p.>27%di:3un3;_XA_FR8ST?$,Mn+^h*:HV#o8dmj]'^4H?7YH->u0&s>SbTdg,ITbrAo
%ao=aYE/L>.QE?tbQOoL0QHrF&V*D=di9GBO$CjHPA-^1Ti&$lG9,"$tJWo0S@:GK/S3=Ppqq%-2ECPj\2jjt7Xc.#%]/!-Z14`(t
%-2=>K4<>0b+>!`"UHD1!nI882gKK<-ToIrO"C@tleg'Z6l*h^"f2.@5Z`R]=L>h>*`o%jF:V1rDlkR\p70u^la@;hB!nF%4=q/AH
%XbIb;LRJX[;ke&k5=DD>Jorn\fC^ej']h[&2FY!))T-0#.m=Q;U!0R'+_!c?cJm.kZ!\)Koqd&9Y,=W%Q>;eWOOOX6h"VIY+[ca.
%eW3QCrZtn:Z?bp6QXF.QU!Cb*7(Mm`\$jJ36=EpWlLmXLB,'Q+p0O@3[UP34ZhQokhg=JT1ens-"=$7CfhGV4C$hS/%\lb'KgQT@
%U6[)-f*\hW<W$051,`p;T(l7fTL8F=PU7A4XHc%=`eMYl,\.;WRiNPPPA_!\<#9.c4LFL6b@j3R0f,hJ?:NUB)i:T=h$?mK"A6WR
%KKR%D4/#%CfJfZR,0KPjJh?eV%k=<uUI-(1[d\2Mauk*S3Y@:ug@\UISA%uD`![EL$WeR*1JOc+OH5M5iGP`2II1+."`PDPc>f(i
%N]lYT;1o"+D):r<>6jlP@)r'4=a1@'EXJn0Dd@@VnX6J_YVo,jX@%kb$?b$EFfdQgV<6-/jg"Ugl`oXpIiV31Jk,]\C,n,d2ibmF
%q5#*aU3+MN#\dKd?UF:sOMqq@"dK[/fl;\^6,YHGXBOm$]\d>2qAd:>25'jE8tc8rddq;^c%emdR3\b`-I6<nNKD/!FG9&'VcX@n
%V-iL,Q>J\@1R`3TlO_flX0<kr!qbQ#RQBa)H)$gIQp*fhj_%'(2B6(lJf`M^PjO;U1RUM\>]S3@TM(:XW\=N#o[qHG/;TX)D8'/m
%C_rE[$.(WI&G6KjGD>9OG,8[1Ro;mL,\%cYd=RG4=>EP='$@j29$E@B'KM1Um80S1o_+@kjN;[W>!EW'fAo#"ZjDJKb@1OOTQ"Cs
%=Mnd+,PRtS@MD6%E\-:h.`;30ZJaiC&]&i[kQAN=>enk%9gU&iMN0HSM$H==1J)Gfo3c%rJ3%39_L=`Z_TB#5O7-UU$@Bh)Zik.8
%6X'U,X7V!m.!CC07NQR+$sd^QjR\P*[8G3.Pmt9)dZhSiM]4+h>2WG8"pXW4JC_UMW3>'%:c`2Jau.L>D77eQ!rO/hpMK[U1e&+#
%d*\S0q^csuP=(*VQG">bU7hd<kZb)?!%Z*%:D:5EUr#f0K:X;f`E]\6,jWl$X\fNB]i2=1)D2](]1gq^"q+`K/'tj8!tBDBd"TRC
%DC0`#:ks-n.$TKDo]f\)X'T_26U[%c/-8hu(=o[j:4mY+-rb:bX%narRGP"50E0_A!p2d[=`s3SEBNdH?p$1Gk%/UuJf^KhH3b3.
%*_8$(PBhC?e`VW7V+$)d.NDWEr<XWrD$Zc[Uc/tNSR7j.ETaf7l%'5VUZ8Z)Q4g[Nq&s4&*@)a`SF*-3'b]44`&B>sEW0$-;UN:1
%eR'<ikIK#T9eb4:'`OUM7thfmE`3bPFaEAl$2CV[1+eHHJ*ZTFj+pn"fFuC/,'_Vak6:ZsCO"^eiK2A<X?*N/o0m.*A^lQ7ce?%l
%/5Cp+C41(3SJE(`Z-g/Ep$q)kGl/SC8!XddG[Zss@53EjSPWC$S":\7k=NWhDV05B7*-B<L`Jl^ic/,4&g=k`S9r7\oXLbqHiW%X
%E!$P$EKi'7Gi9364Wg612FQUd0_rU1%Y*8a/gBcfg145>&N#Fto*l\%mLnurdBa1g/`MJ/-P+\GE=iWDPo8<0`Olh[U##`%"5GA[
%\K2C5Sgr)2h!.H5!G_'EL]DW3'!XWSl2g;u8c`h_L5\s0^?>T8ok]4$i)\/NW6aS3#r9:JT2!\mgZmGp);eK@-HPtjH8\'MDl[La
%o],&uf`ZT5>eQULO-e%co_S)`Q'>U5*NE`cA:.UpS"PMsnpkJ=7=3oWMf5Y?'D+8kH8e,S?*<$Ycm.5DhVm[J'AjiSbi7F]NCW!a
%"<$&smj@8WD=qdu4C,*25*4aj,U>fb6WJA86cB@Qoko@D,-I+'lR0p,]*\<?F7jF&p:5E,6(Tc3mj@6Gbgj<3ie4jg2F3og^SZZV
%rj0-^?VO'ATc30uQFg,/RNPK#(kOkXY!H65>=[3EF7j:"I[#4NlSfg?QL>dVd;AP?Jf^E4:b@^0.MrNL?u-c<dMP_%n*Z'7'BfFi
%NlDB)MdgHZ$qHMdD9Nl,3JgSds52S?X]U`sft@pW5NL#'#h100RpVthR?.OR7n=.'k\Y!e\jcda4eej:d,3$u^+T$;;41RX;)B!?
%.ur@qqf]U<D78#^$(WQaa&7tB;2R1;h1okq-a\+R_,9_#\(q-)&q:%+/=ULs-/O4aCZ$a^p$KF*P.)jbif=LZ(i;_grlE&q:8+9P
%B)Ic1B^nU\L)H!JS+4N<lVdYCs-iIJ/h*Q3_Pg?;s&OC5Ha@[j;Xf3oAbC,P*e+;Bfs_ATU/OBp(@fEO6,_0^DV1$qY?]Lp+bjI+
%=<)^Q[]L<S;&'/tJ-Bc!V`gjja=;qYh:d`qO2=+%mjPh.;>/VhF\2BM3r/)R7(+mtY#n;+'XWWfgR_`a/k1%GGqmt6>P$d:E[WTP
%Xs,MGLqIt!eVgCdpL:.h]f6rJ?C]gW0@'Q[(I),j]pSfA?CW=H([mZW,qn+LU4BlnGHCI=m)=_l>a#uA.K!)"\M6J1`sK=%B49c?
%=XuRS2D70Q3t\'S]d6H$bE+)9gP\34/B28]Do1Z%,*\m%8Vs`#K;$ssJ^<9Hr:tuIO7uNBH"tqoRO*=m8T&V*+0;2sPUA9$G"7f<
%Fff`i7b=0=,$U#\E?*8h\*V7\nZYf9fEj[6$lt*Zf&OK.Omr(X*cueP>jU[#p23n,4Sq#qKnKP&^L081.2:UPRVKRFPZRQTZmf_A
%M99EK:fWKU@EHpQMI^Y$Y>.uO2.J45Dkf_0/M%GAbnkH8fRdM_"!+_=_0sn*=XS<"Q@5p4D\7>hk&d+Yg)IH2b8%5'>lugN*rC$u
%]]`UFqEQ?R4`k^!P.E=uAt^q?Rt"B^p6a_N@NhlCqo#1^IH>[5r4q122-tY7EYF6J4cII">s!BP'Hl/X0"/>.orGpH?h981GQa`n
%Z5<M7BWDd5E`?Y_@uH`@;($#hERkqq'c#MJ'h3UV;,Qt]3l"!(gQZN56Tuj^?8m?>SP0olZT*\EOHiXXiaW1f.oAf[prP9E\U+9q
%K+t*t%_;MNW5*q24,Y-PE)?8uf_k/aJj<'qZ"M$[(kQOhU4FCVfaJNBnWKsTnOk%?bbbO8_Q==?U$,niCA`&W<=HX3Tp8<5]1mh'
%m`194#G[<`_NP.K,7D1ajd!lADj'^t_:5TtUCTiSNBaq+H^%1uQn<&JRCMiMlHrj-`3a(r"f/f!92FDW6SP"52L-.lKojkW_ZT7o
%im%lV)krItR(OGceb8B?R=D^ck<B]JOB!fJEAUkoR*k,S=$k_kZHFnMTtebBQp08gl&f0$#^j"UKg0Zb$7]$1pb'/bFB$Qji9'[L
%dD^p#1^5HSYo]hZ^"68)*Hq<Ic6U/.'2)n9+ht`ZctLbODOQs;*tCH$U+IfLnIHuP6'I;9)5&!"Djik:3%DKh@YV<q@-neKXKC0M
%AD>4ThN=Z]L/e9=*'HUT@paP%?(C/U07L,cgEJJ<o*:TnIrU;\%>-fUFA_a&Y%2MjoPDc=I-JW36LomkY:;lW=^49oYJimMj_ld!
%kY,"i?%0*(%laN%1%(QA;H\>L[-GK+%)Y&VY]W85SO;#+j,>]L1XoZtP>E?rW&Pm@W*Y*_ju+,mX.7B&-j"Y=E2Ib'6>^.-gIu1(
%c^kU;j))PEpdVQ++D$p6+6[835guHX7!FK(Ch_@Vj`b9lA'=>0<b9GnoKk,<n=cLmi::Sq5mi<kej0j)-I?FJPa4IZZHJ<<r9E!r
%4Qqmk%DA.c^Ip>qJ%Z!<B0P!TY(7`-`5P_fLZEajHC<N$W%Fo;07t@e@=Pu7&=#pc["_Cq2APDGHa_2rk5PDokRRG3k>=h)AOdi7
%L]fb8@W?;.Gg&_1D!K]57$.m<2j&EuCdOJ.DV2:U-<(C(;*[5664D5$4dZ6'_;Kf\Ea!N3qI^qK)3P8,kb"[h:n1)QB1^sMo.eWW
%9,A)O#En`*h0D"%7/mZlGa+Ek)3C@H9PWB9p\<LeX:'XjbL%^71Jiqu"oEATMs"/5HN[el7[Dfs_^G>&TFYXa`fU;TQ9Uc8)2[$$
%m"Sf1H]N3X^BON+jMo%84;g`DT>cu'8X&Me!guMSZ9QNjfZ-9Wc[[;!`"73@U34p@*01shH>tIgT4)DqCJ,T*J6nWA3DfHpiH<Gd
%KDc[LLoVfu1E`*Wh<BXl=WDX(/($T)Te;:&hsI0bI.SQPkATuil?b,!=VTrC!=#TG(FkV4(bpZX&G\,b!m$de#EqABEKAkC5<'OM
%,gA%f:?9`P^.melb*_Q_oDB(j-2`#Yk@,n_D-p;08>nE_8M)4_2M"6AY.`*+hkO<SpnH%UeV^-W%<k<CURHo_$/DrU?&;,/%$`Wl
%1O<0MdgH/#i8P<fd!K`s"AU"Smt-r;#:Sc#:UEB,Y68$hG"'aU.,<o^/<13V:M.P8jos823%./C'.UoPV.#4$YrEnX&GS=8=m"rp
%]EL*8PncB\'<S&`1J.g<6Usm^^4Z!7(jakN#1q$O6.alW0Vk;p$A"F/]Es)5U?'/2DNe6;Jt&V>\m$*9l*_H2Q$/."*NaY]S;Y8s
%T/tLQXMi#JN<\eVl@U`;Hf5a8hX2gPF^nUt0_/SsEH(+_P"RR[%&^1KJI^Z;(lE-0W;0MiUBB#,D=nC[l;g^fl\+,^=QpZsTtjJC
%NmVn*DEej@g9S.^oe(P;kZ+*gm9;Cub+6?<r+3=+5o7-NqK?X-atSEl\&oSqk"7urq$``F!e$QcTpjAIEs_SS\i_=IFh8,>N+NC%
%5^A+>W?Ck:o5Wa0V,)j2^BLT@3=h`8AoIRs'\PH(7A;(frWEtIgabFOh1"*T_qT$Fhj>tn[;/2:d1':\Lt9ri)]k8Cc;B[$lfmht
%Kbbp^$'L,>)LUb+2QZGA:RB$X<%$1*;/\_'^2/s<Mk_DQhA9E5NoC]2H3s6KAoZL`kPk%dJ6IZECW=T)%oX#M</B9tE4-ds\g$M1
%%aEQ1Znr4aA8tm7%Da!MX`DK`h4r)C=\&"akqjL$&N!Y.d;32)QecoSmt]b$&ClV3Njk@X-Qp/P.O&*u$:DLiZH-3VGk'+fCm!d%
%H>_=iJ;Oi<TECN%ABf0dbQg^K`6;i7H%6OGM/p:!OJ%uCJN%P'*k8oJj]nVi+t&NTH*p)+SF3<4*T8r=iW:PSQ9O'#83<A0G=]W7
%jQF=]=)o@>C68GuKc*`!3BmQJW>cs06mp?].:]l9P9W0I:3Ai=M;mq1*f+G03h+OAEJEmY%QQ@l/tc4$dltqAOR!K+.d'94e"aD1
%6!RpSS(=qW]<[5sc[>anPc*Ab-9?j4,5*H^OmV'5kmJ<.3._570>;P0k!6g4NI]`R;rlQLZgg*;E%a6%POn=B07T7FEepRX!@7c3
%n]*oF9lX\o?uDL.9tA.S1m`POJPc%S8G@XbK]I.aZGdK?.l1M)?@2g3_tN&EK%)^O:m"h+E'G9@bc[HTEn2k)1=SkZ9g94-'I8B3
%(9R1:W!3?C)ebSc]Xp?7TN)b,h-#=1fj,"(KCj=/Hu:fe/.l7Q0m(RZ"J(ohF,M#(f'nWW!.aFSKo#1H59s2K4?=k,I57ZN9s9k]
%_V\ri"ER?e2_.eulOd'/>8GU62[<QgC:s5iCjjB1\4$V6mIRXlrUO@m@rISC$S%kW:/@$&!KK?-O_-nP,W^J6V(e\Ve<NT7f4b<J
%kiIaqoJ.re&7d\RU6hi]5iKm#/;VA[kS8@?1?Aj&I[P3[&\h#MJr!d2>QMku;m$*$T'G<P+]fce9Z4)4XoOP;'I4d5"G\ODP^Ms5
%*A[T/O=QFNOJr,3>X?#aS+k%6Y>SF%8'\@_R,eSUPn(</J],4DhAm?R$k?9LZ1fX_qch,VYUcVV!SPQU$8d?8=ft#K$OXW":F'!A
%<5RuF3?[ibr/Qk\pB3L&R:%adTTC[ckbApVV"k%Z]A(MQeGNV6$M*_K/!/[8XoYA(J\4NImI'Kg=!1fW5*FDGO8uo>;1Gd!]'&>5
%)0uH&s/b\a-[!-APJX+s&892t+FYc[C)G(n-D@P2TJcBLU;Y)hm2m=a9P"6b@"pK=LE@2*80pEKO8c0SjnF1G,1g!\P)PL8:c7Np
%XTXbl4W@GPP@WMsW8KYG`[hrIH4)T'!t,f6/Z;^*i7!d;eQG%b3;elGXH]1%6[ELE`UYrblko'A+t&"bFMjddI9`'\-a[@)Fh/W-
%%l]mm&;K^$6*5;^!SaEF\s&]KVD#7@g'ggD]"SF!Q*FUC$3GM'8!SgtIWmiYaRh>@I/Bp;dPepMS\JA3$K$q6\q^po#uS2sHM"U"
%Jk<893/N2gs2nsB0nHA3msmKJfkfDGQF$,>n2?"PLX6Z*'p_&^Ydq>5'M"6b/'fPGFK$TG^N@r6?jnlLECmDb+O?S\h]b&tqiMG%
%*ql@+N;Qrl"O#57Z%4j]F0FX5SCjoV`Y*Q//AGg3?1_iQ6<=G[$Y0>p8F++bNFRmhF+Gk49i[M`mBW33X6B]gda]Q0d=M*d+AG4g
%9eWd+ZVC7k0QK,65W/C_s!VeL?65*j,K#:J_9iDh#0.ic[GP##]^hg%P$^+uG-.@YP%f63>,97*-_k4CJ$p8r<j=1E5`A)3<WGLI
%4ZU*Tc%OrhJ%(g2MJRs1,r^n#A$ED?e"dP.[%Im,Tk#[,=p$_<"^6ht?0@GY7Vk#=A=-q93k!^R:W@f;eWK@Y;Y5d9E3gb,.7#CQ
%ESfIDh50<a>))gQ8JH4u(:We2`C=/a/O*9gC^">c;W<K(STniOAO)(!F+D/Sa-I%/%TA7eWQO2;Hca94D"&(+2>T1=P[7E!"k!'H
%2<=Ft5@&q4NsdGTG?HQUDNt%3CXm@IqE\(d_BK7hK5essWS.Z*S$8S*fXL\@HSh>ofj$N-3b;HO)bUENamP`"d5(4f4eE?8#U.,8
%U'*bf-0-)2H3"A/,&,YUOHOCUk^DPQ&I29%$kp5I3Io4\Rse-I#Tql[4cdjWU"f*rkuTXJMGPc:f42;W4clf:r!r)T'NZ]O;LX:^
%]b%R,YEfW:H3kocn:^)b&SS1^1nfLf1^ufdo>KS_1$h)HWe-8lJJpGKo"?*"V4V:29Mc&01IeEOio&fYkEkj^c7^+b3Bp3#fo=)K
%AUc`'pM='Zq9`Ouk=6gqcL405-)`ui=6p's-N.oX%rKj.acuEZdFp_C=Z?:bl^lNbf&I+6i>A[#a(2,*Hp5!QnnN/R60Bgn\;Ma0
%cAddkfK6@rH;U*sB$eM7L;)KtMfO9P;O'+3]OT^%WSC1?DnM3*It1)80[%R`D+NBZi"2QX]4?d(lsPt)kOaPcN^[']FG@_:m9)s8
%FB"d!NiNn$;I;:clPA8leb6/$Q_iA;=`A`e<$6NeM6Q3!<@<+8]nQfReCp89LTt8hW!sPk<phWg2b/r=NAb9n,rB!RjDjsVB-aGX
%DF_l&bO3"Y)cU@7UYGXi7YS+X%TY<%0c<is<COl+)@I5na1e!Re-d8%f-.1>qOQI5j3l5d94+fQ0q([&%FaBQY(7!Pq*1\hLoiFC
%?]R@>kQ%Ff+JCAgVa?]O3_MH&:QdC)W9Q^kpPj8l"YE_1:Y*a>G%.p*<VE@\M_U0I2ZlsX9L)Scg[#_c6#Wl%Y6$io;Z(Yp&n+@6
%Mr5-kTkKZ5(tcD<EsJJ25f[;F;s#US.=E*(C>;OF(Tf/^V/L/,9VmEVD1g&FmIfWQ9Cr6Dkn\tpY9MLt>G0,VbboN=qFa(k+-s8%
%a.[i<3Obt\'Pph:=k0)W)sg!@F6p2L[(JmpNma!Q,Jlpu<1LttF&cet^%])TWX>XuUNlk5V9B$m5rK:Q>T3RFRlF^ier;sI]'BHb
%N<A%IF(s''X&Z+r)!X>rI+AG#Y@Le\''rS3,D0UgbTFA'%K!:_3IsK"o427mg[,^FbGQ#&f[9&]B%L^kSpF$="pZ6B8.ZtA;KS#]
%`Zth`dGB$YKU@oA'<906W$INFhA47NU`9O!2Gsu.*Xsh0cY]Hn"Qq[@$R0U1W<EmENRWR<gdZ$EE,Ho.+<n:W=qHhN8=k6i*@K5u
%`K$3s?SZ1*4%=cE#*JB7q/(.i,=NQ?V><Of@PgEJ"$XqMDBm+CVDLc,H]N3X^P*NCjN/SM;'r1M0o/A<U_j4^2c:&.OrLC_&D7MI
%aPdf/r!&p^i(,R.btqBfJoJXjhVQ"uO&)PS&^Q1C6mO]h#XX^o7]%+k&<Ya=+c&[,I(+a>q1Yk!Pp!fk6*oa=gdi`I5Z?T,P8i^4
%6(-LNP`cuc">M8YDX.5be4'^%E,$UD+#l,D.&Sf*KR<=n%qgO7eq4hZNXY>."L/b'puLYnN5@N<_hLgo8$dl@Q"n)&^(qf[Be;ZF
%@At3>D_oP\!&m;kC0[K4!^mmdkfZ%9@KJ\]!3Bc+.$a;.El0E,UTC-)4n;%`k%0<k.HE2UdM[2QH!)6LYcRe(H)7G,J\b\h$V]c!
%!teQu;T"ueJZ:][r7gKa"Xb!cR?-ahL@_n?F"_hZ7:>c0%VDB,5bHnTD]6uo?:][t1lV6Ve`n0>4U$4RqmG'E\\Zt%HZX__5F,UY
%j-*@(it+n/c(W?GM*;VRML,Rsn3M)0JBmi<+:)WBf$1/L-hQ3^Qd8N4'@L/?1e4YK]l4>][;kjV^$t("Zu2k'$&Z_*R]VV0Z>\'T
%H259X9"BgRNsL23(2dXQG4_I2\99@?d@RYu@)ERb0nNG3+MJb>Y+\3YaDl2e:ZcZ1#//5t*-$XmmH'Cm<P9#sW&96SZ`,qQgp:i]
%d/9`@0S,&\=bb,8LQ;:%GO6fOTf5T%D;o.uZD=]#XJ=qc#6YB=>ZGJDWn*9bpl<Y>O/LI(;$TD:QjM;D;fU['B?U3lj5W8Nct/?3
%dO,QIFS:)Pae@fi_ce_?K%Y8>Hr#/gECFGsW*2PpW-nk5FDe+*Xn3miUr?EgVS*WS[pqb4_-'r`lY;V*DtJc4g:3+8o\n84:EtN'
%M):7f^_tKU_G7$>`DKkMfMV)ohFAN_nK.>]EnQeVMseuPS5U9Iai@8IV7\dVbFWPA_p)OIQ&;'N)tH02E6(]NUEj4?:NqEM)^j,?
%""MTO%'#X`S89AY3"Ya\;4W)\O7U4p#=6k,$.W'TESe/PbIhcj*u:YEL1S)D9gn9b+-;0A%MC;(d0D@g(TJ/1(tFR;N%1js3)d8=
%@T:J5:,/aoFH:'eceW)160HN:Wha]s&67/h7u/YZgc7cfFRDgEOEBp,+-:U4_&j5!flT)5\[)$GG1*o+I6c5kkKA+!PnX3@g3)Bc
%831t/kFZkabTDpgmMq/-EpqE5L-OT:2g.6+ZB<VH#CSkc\MJY!d^]U25k;/bI/lXqm>4_kMG^,Z836LTs.?CP9HT@<mS"^aFRJe2
%e%#^35gm2!I6c5k#CSl.\HdPuGIhJ#!$'E^3qmRcd-Nfu#:,jeTZPV'quI4;Ll,#<&4ej+jpJVtrI]`%6+kJtW[)KF#SWmGNQM<?
%_%2K$29=[sm"I-D*+h)M+?dR]khD'MOfc+'KR5OK0_SOII?U<rfC1)]>iB9'kjP/Y@/sle./aH(fA?dDGU0#;ERggo9-$=>Y'8G@
%+l#KW``(l)%[`@6\YoV:<$iE8"68]HA^b^0YFh!%*0r$r;)WJSJ/O:Al-Sau<U$FhrtS6gK#ZV>1=YZ8F?`5>W">`Ig0Trg:3WP_
%LQ]1(S[u9-j9J]14eb-NpZcBmE%ZbdZ5J;N.e((MAR"=9ED`qCEP+6T1;2Io72,=K;hH\\1\C(c<ch"=m)rVf/X9Lc;6^^"mF7W0
%EdKim`PjbYEfNV^mU@DN2ki^^Yf]p%[P3FV3s&CKBV)'j?U#,u[s1a`Eq/*3E#aI5jR(opk%a5aa)JrhB_(u)[\c`<W`LJoAqU1;
%&_!Va7ibn-J<uLtf*ZIBAJ?HBD*]'`-V`Z)B=S0q#??G-CK.nq?Q5e7OJ"U;+imA8r(rj\E;+R9ikSEajO^F9=-$7;'@SJ.QQ/TN
%S$LDqM*<r<X^m;he@Er^[4K..:MA?)NVprV6fk,)3.g#)`K;$K@>(5#pVT4E64R\n$Tk>4_U<:312EGX)(Qlm#jLngeJQb1UFFSn
%?`O&qDT(;)7IM5kTdHHtlRSTCS09n9DpKbFI.pcKJb?E1p\QF[#('=kT7Y/d4]=[<3??Qbo`LK/!jnP+J/cWN`Xe4=<Vl-=?R.9.
%898uqra7PL)u.8+m>&`j-jO@lJJ5oLq>]gaG9>b<(F`dCUF*tdmJ7!:,e%EG'u:u__J3)3W.ua=jS0QQg5W;S+>_HuO$<M]`7TTm
%kbCr2pM&-^`()k35KkY:I6bYF+l*u*CC43Cngo`=5q[pe1##l+;dpT'om>n!nl.jibXObM:c:N7FHOPZJF3:krfPZn5Xuuh>ZYFj
%0ls1.%$G6^+%YsXd,C#F5BXFif6eWtcb93;=oI!s3Vhr"P/DT1fA3';7f(`kn_]WiC[khgf27CqU-od':(EF8[]GI<.kBc,a&'<g
%!LDeq%-CJ#s4hS4ahDU8>QAl7XkEc_DA,?D';8NH[\AaQ'R(%o4KlW(7Vu9OrF]u(7b]Y-lC$C]9]4:`XV#gnZap-M%$4h.e./=C
%M3lbVWJniT(JpR/3W#(ig;>9[pqkI'n'u$.1HR=Vq\_EYNA`IYo/*.@-)TS&kdd_A'"sHL[8YX3[3e[^EjHQQ=K4,W%eqf+O:>mR
%o5)CLB&`farVX2mCLst:2Bod,7F>"\_lI6_=LZ7,0=cuiniPlF*kbB&GZg\Rbb$:d+_dT8_HgknJZMK"H:"n=lap_hjZ3t`U"D-I
%M,#rl^`nglp,c,QOQ+mW(Kd+d"kJqW$BiRk]8@<%E!.AAb:XG1HsMc\/=<<WRa\rT,s,1>h*pJmnmBGW:Hge`#TjN-%tadcNl278
%%M@3A:k;q+[%l$A1bYSK--npG<1_(*aD+cZFUPN"<m^4lTVuK))S6Zhm+'4i2a*6K&`j(J$Lss!NU0"7+ded"^`?MB49dTPN4,Z=
%c@KG#[#\ZTeV"o;[Qi<ABnE3$Jkl1s\(FqV,90<HqQWaU4N_dh8nUq'fE18?Fn9S_V1!Br-i`6u``U`8o%m<RW@3=P\kMQ^9NuXS
%e,*=n<%O'tR5#qQh/IhpW@=,KU.]f-'p]!73PO?VV<5`Bk:tgGAR!\RNja7i8uX"s,`kQq.)KZq)=1I"kadJ]1o45U%bO0f%#d.U
%e+=Z>U3&B'I_RVRbD-QEU8BPM+%-;FBDZ_-$Dc+n%fN"q69'@qJ`\$u3o(7.F(Bf3#9cp,($#)_k3+"@0h&(fJCJ!uf>DXUFtL<j
%WFpATb$BDjS]5f71r/(T-Dq+ag@Unh4Bk[Ae8[,!p7fd^kF7deiR$]fZ;1am%e^sneu!I1#H+i1_.aF>G9Zf0gIFfd7&J:QB)8Am
%<AH`Z2TV.`mWnqs%gK<n[JDIZB6558S^00k+#Y&2`F=e+@C9K"C*%M^LrlB,@h$`B5,<V,2NXRNI5aL[+VE7>_In+:0s6(-A[&!Q
%nFk*:&ZW>f,"-j+EgGC.pbVB.A/-q&M(><-1k[.p?.,Z_@!(^%mhPaqeAt(?%/S4S><-Y`p/R[V(daOAK3F%nMsodMk<$[B#=r;i
%ddHL!NZ,t]b0<:B&Q0D?_KE>*Mm+nKQ9+Y9MHaQ;emTtnpNJqonHQ$an%-iokVZ>[?g]K7b;%Hf9HOpY[.9&U^mOno*IW;Zmd!,p
%]c&p\f[Vd2/Bt\d?WRPI//RmC]%[\?X99)(n8+%.01:9VfRq;L*=VLS!+T:AZ!UR8^Qf3(2:/+imk<@td9ogi8G6id6f2PMl\:<:
%E7P9!?NZO(8[;\^4f69df7;opapV,UbLi\aGd:]"\;9G[_1%qnj8!97Va`5f3$<pe<>57PTFYYLDR`NlO$9mW=53mC/Eak2hP4?D
%Do$lc3HD?2:I_Vi#b^=];gP<+-QV7(FS9L<:kZ_>kc4_U&:bpEpI(.'4dIk0?akpCb8A0H%7<d=,^GaZH=?O55i(Pp,\]@^m+6c@
%=WuJ%j_``%n799La$ldRfrpm(o@s9C5$GfnO$`KjhrplkH+AXY-Mm$.K@d\7M[Lfi(4RM(ldfTf1:(=XBoh#+5<*kP/CcI#:@-S`
%^.g$N?e_:+TsB>uPY1`@m+9cYim.5bkrh[\p1pL6#kVt'i>A%j-D_@Cd4E-/YM5qF?1_t%QPnllm>/i1kW\WVTV157C[I!sFsT@L
%n@\Rd_:/uB)Bjq&X$Z\qbT4;MP+:`N[q%dg/NXY3H>ArlY^Ys/XJ<D1[(&)7e89W6(X$C'3(iSE]bpFZD+<?(kk3N:'`XlA$J/Q<
%mdW-(Tk:emJO";l"mB3L.9WRQ*Xd(=OLo_0f^sbo-Y@G]kQN4d'o'0,1HC$LA>=O0?J;82:9JcjW5>UDf\<n#*fN.bC*8Bq]1-Uo
%%:eVVXgojB"n$"L9q4D;"/.jtWgGma7'0IU3G@L$*VC4sMbYR+4gR89)^tSGQ-8C<OJTJ,BQb&Zg3\`Q,t*g_dJ6-70=*DB?sG[G
%DF8s^pIm^]XQeXamD_'cBHUZlMZ0%q*Y18qUG<@AVV*o:!@ALdhZ/gTj-Y\rG%s:G`e#\oDLoq5-:&PL,,&s@9m5gM]!2HL]&"O1
%_LO'$h7K7c(:,H2:dXqnRo)TdMPPro/AY%,*Mj6_+.O.h(2:u@2CM.o`E"cebRRUT&ts6EE%=u&9rlGL]`]>%X%g@kL@N/n&cknc
%@`I;9f*:I:]$0s*pr_""g?cd-dgmR(Yqrc+J8deY0f&9rbNrk@;ArPQ<FGK\pn$u383P#gSE/TnA6E^(;qLT$(l1Qk[F%KAbNL7r
%J6n4B=(6FH_hHr<f7f'9/Y]l>=@I<7WP,/A&JG3h`b]9`)JK-@`ZRIcEp0jPr!2\S'We[[L5;QtQL<af@U!449;kMR&$X_BeNXOr
%b]%0kr#os+*`f=<-H4t=OQs$X)PIsI>E)-14r=3=MgjZPmhokG`qu>Z]E<lcp'<R&)dr)2+*P@Q4TB3KIr^iD9m)udLpN+c"A01k
%h\\LHYB*.G%A.E;3Lb/P:*j;hn*d#M$,Z"TO3LI=FrB]hjlc6A\4=(4);3Q.Dntfj[E3iZ;D/4/JqqKe?_5#$Ko'd)joXs:d@NS*
%cekK'O(fAk$Fg0M;6!7K6I4Pa;ujV"H^%,.+1T4cVo+/T;1:_-ocE3-dc9fDW<E6ahEeoS>^A>6_EF?kS4g@\aciZVGL1G.0&[l5
%00`+>6htel"B>/#s2#W'872$QqTIp>caQ>jRF1Ku"M`ZtT5Vcj0/Lb)j@FNVIVmm=q6lA<1J4i4N-'i'X^OHO'YnXII?;2>>P'G*
%qY@RUq9=?>0__uPc%bkoF>i4P4m)NZO+(rQqY@R]fi>cL;u^Um/gf[$hO-4Xl5fT+nbqX?!oA'b1s\>]bDlAo[YXZB!W%godB>Iq
%kM&>[s2_r9R!u/W]H4]pV0s&i^BUb+U0SDs48N?.s$2F4+6aZ=65Wm*[HN<ir&HpXW24.4'$mgn@jjL(m/E6A8Tt,)m0(%N,\W@t
%T+a%QmiMk)V"]oQ:"&o[JgTa\29p'Wcp@+2[-jLLr?Xg0#LiQCoQqGlqK0tGpR0lFU>Kg!HN/472_UDiho*EnU^;k'-@5\WV#sK]
%01#PK))\>dk?L[rH]N3P^BM;8qf:-^PDu*h?_B0AhHu5"CuFV,UA'u_:"bB[?P53]H8(N]StID<ApSsKcEt.r]t^@E,lAK!o)Y8o
%gWOfj*+%n.oC8LJ#?6bTl2B^4%\p*5H@PHgS4H;!J'#tAEV]A*VgG$-`6%s2hHAb+:@@t9;g]C%s$2dS?a;J1'SbE&ekek\]d"q;
%F)q:/nSqe1=5EO>Oo'3O-@#GK]949L0st8"r80e)1-L8"@;EWTB9o^@i9"],Tb_3bRnL7]kOctY8M6J;4821iLk8Q-ZC:m/9cuB(
%Mf@30>&cK#f)iqDSi"9hRkA=Pp)TBLcc%o=hFEW8Uk?uVHOC$c*LA,mQgWg(mRX'NKi,]MHEhJC9i,b#JJ$$>DO(KU#NZ:INfJ)g
%gWLVOl*j%*XZ3+*0^p`u]-RpI32);TGfA27W3'H:LXLaX"D\@Gc&a5,??JMQe2XS@\3gdoF1o)-;@]T^o`f^P/@uKSYj=%+^n.[O
%qrI[Uk\mj?VfBltCA-.5Kn1R*X!GNmOfg3%.Nm.:[3"u5YeY`m9e0fAQ52PpOb46<*AZ9iU5B4_QD_NsdT)!Fm87fXH6qm9YDG>V
%ctkW>m%2Jpp/.SBaMd0]d(*%]6lO;ug"X=cjq&L;=QK[LJKegTAFd^%#4\dF&2+X#Y?--/d>h_`=W3q:-^h<lJ6oa:JNe0\nR4?t
%5P11$=2IeB`_gKZ(RKQ^g?%E$'2`]Xk5km9V&.T"HEk/WD#A0K!Y_qWH?>b+-L:h>>'#goXOa&2\VZ&9[\q0pUg?P8g_NA]d90Xp
%mE%+JhY=Sj+_'$1`a*LVk,Q-/k`A33L58,@M1\J8<;b6DTG>MnGNHc5;9_-k-(%qt+shPN!d`BT.MqRG6Vj=DE=>FP0D_cEdDj3A
%[Ea"CeE&(4I&-3QWh"D)I7#[%D^`6i=V))9c]C\/?@76$r];_BVj=RUTm@0Z35;.'kE![4WM>W0\2B4KZa71*gllS=d/9!.`,i9\
%*M(ID-s<qp1%Yn)H<dN^[?G+^@D@YROaQP!X[0;d*M'=)O,$T=P(]bg$sKF4[-65-ANnQ;)s!A=VAJT.Ger%&&DB2!"ZdGLj_B!9
%hMseQIJhT0h^5rSFKrHO(V@`JC!W_'+`7aaf'Fs5\ot@#0,jdjMm^O6ef_>2qN!UpYmj02R<-\T'U$EXUjD,0Mt"k;++M=6&\1\f
%D7LXBJ:*ih[D=FobIKk)Z9FCLZji^s@Y5'6G03Ou.YhI2NE89./-I@\LkT=c.Zo5bA.p8i@V<"KZM.rY6QNT/VL$5RpgGpt<6:g]
%lD$'e\kbGA>?KX^PZUbXd1_8g6)\'(KSBsqK:LH-/+6B<fZPO+(>#unZQd,jXENraN;rO93/f&M=i-"Lc.e.S"@uaXXk*8t<*?B_
%L<QYB]dP^/o=)EuB<W3"I63o_Wi]3=j&(;]$VcOO<Z0;%l_9<R/QG31P\A%U5MJlf9Znos\?'^":$WcBGc%C,Runo:G@IGW4$L6L
%?DFPoI'q.r4GuFANV0PB8hrq9?<LK3/ZPN4-u:=[TerE"+9RF@6um8U]jG'$Gq#Whh2:c-!*N=$U`jbq06Pb%(:\p8C%t,(iF306
%Lg&IJ<h7^8mMZ]=ACnAmY^.>D4M;Esd#/)q9Jsi;LSAs]3$6148\*P-=/Zo-JRamECL^h-;,sVo)X_,&Y$kr.Tk`A^ppZ[m$6a&5
%ar.AE9'7uG&D2,2<8VOqB&c+hV<J(t`^\Ktis;?,)^LE9UZ$!4s(Y;0!+.:_RW#'bMmi@S&YV`.836Q]@C&r=b+].*L?o3DLT5tt
%9f:#C`Ee1Xq1gk[8TBNCjOpT"HM@>"<MuWY*G%/E];7FcU(D9L9EESQ]/CJI<;?U)bi@8\^\j)ifGmtUY1nY\D:3Y7nA-"RJW`QV
%gd'R@"So+k,4R?u\-Va9=4@g"/oM(C\5M=;&mQmU&<DRa6R90>j+.kKWUUN+Y1.]P"BT>#E.TSt*r#q;C-9ELUssXF.nE7*cdt7A
%6JnqiN*54-mroUW^5>&6$[I2lSDd'p#.YN!/g:gW5$6ls0-R15_j&B&EpljXpU:]ZQs<c^*pVgo+nD:_QI/7a5qaDG`RklMcq?nk
%#s-]ZUgo"titJ77(SQ9_.5`1+&lHd\n/\<(H/LbT.J&X^LX&9B5t[[Q^4VY2%rhh'FWTNPde>i&^B432;X!(DSWnGmQ]P,/+je_W
%LhfNa;5/tG@nCp@ci`/b\uGS%dp+';^hKs9FPntjTlf=N9"7AU0[V0_DFMT2nf6KB'bU^n<'oJSZm`iNgK_TYRO.mUiXKpaqOCEj
%_G.SR&q*]#l,S6i`e\-2N:&X()7_QZbN2KRLc<Cd^o<!q(shL_]sO-S)KKn'3'APO!HmEU>3f&[NDODa$F!)_!=/3:'nXUHI4FtC
%n%ab=!r-!mYD9.^,g,M`HPc.EP?g;_5,4UU+AkCNjKZLKdcJ*r/5Nc;jncNY=c;*8OIKJd(FZ[i(5i_L@uR<I0Y><C7G07FXtjm7
%;9KH?25p=g/F'-#YI@Qo2k>HK>=gk7Oi7_d40G'NhujclO0Vko8oAVLWaKZB*T,iXg+DdBc3<UuPR`QJ'gm"sC\X*MasF2Abjnh?
%kGl#`m7D49Y&Ndi1O$ZQF`:^Z%N!kGmr7)bMuEC?55_VIpUTQ(-(39]eHu#j+FEQ;9oDd>HRO5ZQ?ir,.fT0S;r=nK=1"U#_eY:C
%pXS[Pc_tg#XRq\C[n6i`[hcQ&lZEV^[`hhEIMhY!?T*TqL]C&'WIR9OQu<MG3@.PQUS]`(7ACE0?0)/PTtOYu[VSd1BG_LqDT5h3
%<m<pcn+`QVN6O%j`rM85V+4b:k/G'Zib)FW-u3=6Xdb$7)sHB;oU>VdYqSJJ<+u/`Z6or)KrRrnHF5CK;]i.ILrOrO%ce9MeSOW:
%7iV0oP!@#tO?ceo')QMW<FNTuftbRK`rOdmEpQks%9c<7CWm@S)>Vpbh]tR/%HOmH<##oeZXt^Qd;M.[c+#&NCBpI?dH+pgTWR[+
%ZNq?%[e8",R2md6IkiX:gc,AiD'ERg`(5<-U-t57A7]k`Vg"5k&@%$\6rVo(3E.L[.'G]3XEN^@KJm\s:qP_CdP1^b)V2gS(#K,8
%(h$q*&"@<79uTYrCY@HTp,;.76F,t2cX1V(T?!tkQfq8i^?PGqE'Ka%CD!,l<F2f0ZJi<1;hk63,`5Q?=E"\PY?!LnkgsSJXP.^F
%0!*-35]dS(]#mjXb1GD!>fMQn(5@=ThuKUs_noUj'Y!jhl%0]bbBB6)X1dleSC>D&p-k;8jj<reH..m;p],;I&B@#mF9AQ#'L%:a
%)Ifi>Y+`&(<YYAngr.nBce\YsXgniQ8<8Mj4H#;0h(2f5f!<Fkd,cMK^59;BP;QZbD=ig'otPJ(m`SD[BCMo3'.unRYQAN[N'n,V
%9u9])C+*AS#!,/1-LEP#,GnDjE3F4bh(hX\D(@.o%q6E7U=m8@4uerjb[YW(F4EMo-pYDe<I$9>i&J*Hj_Q!RaDb+BBWQ2)e@l-V
%AZ[gLs1$7T0g9$E*Ip-@fefmVp6o%4S*+*gFZb&&G9"l%VmnYp7)ia$q6E>.8Mh$;jZf9m?L4@Z5-X=Wle#cXCX'Aqn13T_"4Tpb
%Z#\\Ye5Sa$XXa]/M`!\UGD?"e,1^>.N-e0pq9_dY<1QQ9nic6J,m$d=)2fX/=eiJ2ig(=2g;@!IZX#bBa?cugd)ubU.FF&l8iP:I
%/^Vq-)8"Q+;3I(mhE+otKjjP*A/Ak,jB@Jt[nqc$ELq("11Yq9a>AL,1"aXT^+TWCE',`Yau&^HUT#I7\h+,O@B3ld40)+97deO!
%n`nTJ\S0Qnj3li:>:Y*=T^im9r=C;=SLt^A&0SSl4^;8\Bs<M/Q79VAF1anR!VK1HasXPT-)-aVg"L9_OoU6`fNI*-^KkB(Fh#cV
%=*?h:]4-t*KW`6?g,+/D"#RN7(W]-qYZT9TFT?9,&G(@r!][t%ZFT/T^>>:9CBje=&KD:/P4T0:nPc.$6'ALX-pAjndnH"$pl&Aj
%5H=3DI("^&paLe^;>_-EM.]0Y-_gC0K#9nP<5FD6I]D<o&3j063/F1V3#]^o%@Bu.d3(WoAO?X!\_LggN*(=HSM`kr4IS#b&]7B^
%S9u@'09a8J,Zd>fr05%V=F83KkiIOF:d;addJ>Eg*rTqbq!U2JbM\JA>QuQBpaLj5+oIS@nIU/lfL-";+`d<F.>1KqK^`%U_9ihl
%+:T;\bhZ8#a$Fc$<PZ^h>l_p>pBM#_B_:.`9LAeMU\COH!00P;p[,T+1Me_\qinnl<puiUDb@Z%8`0`?au10N#=WGq'YJ'8KD-gG
%'.#h[C]E>^I>HEmoKL633;-)q`Ta^Z>OV`)pE8JFKg*QFKf!u&943V(N7)bRpZN='#KN_`=dgiLP[\'/leG\`=7l!\Q_VF3\eVj2
%+U$1ZZFsK/Yq.c2<`N'b6C1\O>"j,EnP,-2872[`W,Xd%LcsuV[29.07?>8_q63:n\/i(BA(u3B01_6[3)d$90%><)?>g9D+_IE'
%/VQQk?RF8/@*H8f416YcDYTNOa^V&_>t@(te$NQ]"<B(mGm+g!,3tSQHN^g@FL=!LA$ko2)00N(9anF[rS*8T.XrioZW3_69ImRV
%.=o`S?F&5i8W2^uG0\?"<hPQHN?)`&-i,HJZPd+LPsI^kP=B*Rc+m'+M'hk6PT:\M!2ZdcUAQU'_^$A]6P5DBL6gco0>_d`V7$9q
%#UV(R^_UX@,D`q*gsq&*'A>;LGU_7`FTaj/7um#LVmE+/KQ=WJe8sJ4ffDoI_M4Hn_=QSRK&+0i]%17CP=ZjOVi7`ODV,9G]8b1G
%S9e0:pprm4&U1e$8A;6u'pD<.VDpTOPgHI+?:$'b5O<jb=p`DrR8V(KGiOau9U7ZMJ%;ip"gm]hN7*b<+X/UMF;IZs[i+hA#Ba_W
%KYVEfJol+\=MtGu<`aLlVRd\%3Z^0rT?FQ.KcKe`$'JrQE/XK7R&U\oU"iHHF=8T.&=>>UGIJGQ#g<9c`P5SbQPQM';kN0gpkP=g
%`4Xdh>YDarCG5<O!)iV&-SRnXG,0),B*;ho]s[DR!^n6e5t`O4+PV\tJ!l*tN%q1OG'Y=ASfn.OX5EDe!]-LoE_t0?Y&Th"Keef"
%ArJ'j)55tBPPH`p:_#9[gFrj`3i$OU4r]^<`mPmD9?&&D&t#M`nooo`l)+ab13p9`Y4RA/,lK'f)E6beV@Ouffq^611g%o1D0MY9
%Pj&IA,Ki78j39M/h1!oB#ZLgCcYUnXIb(LH('\4gg`p]I+HWo+`M<OR@"sQ%(V]+.L*Gl4%,Ks$b0>B#[7f!^H*Lp:kh%F82HH<)
%E<9VD[,'*$[C4i96p<l/IC&91?+8ghnA.NT,.S`":,6j?HkCE^->XnK4>`'#7%$LRn9r6K?D?@FhfH("IJ,)Gr1`V5njQo.2:WRY
%8%3ogG('E,.9pgn_)-NIF[UCRJ3;&_\>!\,$I_fOpD/TTW0r4V],&Rd8jd5^hN'P6:k+gm)>0?1_6`i$SoO9LhTUg/KYOH+![?cH
%HRj7g8'#<C=nDa^gdQI<TkJ)5gs-43%nHaneK1dJT[h#QDU8c@&r&O`'A44KGQmR/3k1%R$NEndrI7/W!@\IW@W*1Z?oEZ6@]so]
%e+(F1_.-`r^j>T\W5dM1P=#SWmUYhFP8q1e(2RXr.@1me]3X&NoJ273eTLCXA[Q*(\[s%=]!Sm66Eu;T,%R1(6?o3l;>r7$L/Rb=
%6\$XDb$qDjOke:lOBbW8>_M.AmR(@Fjjpg\[)cPsm+:SFbIWqb68>l:8#?0H8odmq7Jc-LIQ16Md&m\q(Z!Y'$KdX`m[.[/GDo->
%8%GRYKsepoQ`9),5'5dE<7*lNa5UWgcBSrOXa.0ON1nhna,G<\Z][#\ZQ5si4*t?VAQE,;O3phXd18s!iJ>1G]J(%:-'[+ETu,ik
%PnXV>+31rfp,(uB:IEBuG(DOm`u8>VBJh9-TQoXQdQ='tm@mQXfacLKK3iH?pl-HF?Q4&YTi=f0=WD!O3Z^fKCq=GX'+3ieD;?e3
%<CFoVK!rC\S4fU>IK>e>\@>8J#d2dPf=?lqb*FW$$01Q\gR:/R+c';XU"X<4c9(c:S(Cl&nWlB#pUjL5FR+>(_'ktjD3I6kU:*gq
%[Zu^hqEqE0d'M7K2Y2^s\[ZriDgcM2()PeOlL4&@'mr7%YD2g])j"'d5>c<V8MY$VLmuMbod>ZU?MCM>CsUV_D762meu:W`pfU+^
%JQZ6"j/Kes[oW9i4SB</n>1(oKut'RUaN.75TcUh.O\-AqS?naZ$h@GQu0H+"Vki)EPC`nULI#b$3DImjOouP?:ZUq^^$nD"WDDI
%5X`^>jar@XnS0POLg6%K"hWKQ$UUUW`[U#$ZldH*O`E`fDLU,=/uU\`mQ6>%\KF-H2a:5u"d%g5?<E'gG-.ERH*CTdd!"!(H9q@!
%T&1qjcD9dT+beK#H9m*G=>'rnl?g)*"VpD'Rh=7@\b@M=qci7f:#6k96'IF101[4r\JTWY!YsbQ$,%I,&aMa:5k&]^gR42npdEkf
%/T%'/Jguf/@:,=85uheQXs=eDa9ube3U$IFpAk-E:^X4Ce+#Cg.0u#+I(I(.mKGe4cs%t'_&"Dnnbqn?ej&%19*Ka=Ira.\A>\^W
%<)A+=!E?n&\?-\pB'pIu$EB2Cdt7uV'bmK-DCb_E*+)>7`/lrM"U4`\8Hn)Ln?Jo=8W!T*U0PPGkFt==(u'u+'lXQ=TS?,[S*Kbp
%qDP*._QoZ,;3l0^AdLd1]:=4FKO^kd#q`_45p:SD>K[aEf*?=f1Jk<oDA]GXC2JMqbV5lQU65PS__^rGn;12r21g-Jh6iECGAnDa
%33$HY5D]l`'E'haX%#sr&nHH+R9G6Dg6t+]B($YukK]K@fEqhrhV+*tIGbiA2')=q63QYuN1PB;-sX9I7;uj.AR+PS9%urip87S5
%LuD@g#8"Ten!?bYVbKRk=h6(=>S4\=N$&64*J`DsL>iDDZdpDUoUH%c,+OnPe=%:<)Vf.j!0$W>4(m\a.i@o)CId(sN5JXq`$:#a
%$k^(BIKF]$UT*g[>-<b4)MY/4e+Y4+K4UW8C[&H_kJ@o(=c#YRRI(Qr=cDPg+DL+L1q`Y%h$%Jt3%-Fs?:.](Dl1dCm?9hKmG&)$
%XLn2-UIZ#6p5p]Un/@'E/mk-_#I"8%CP4>C+/tb2OV2kJi<1VhMR[^o"Y^f[&M[W2bC:93oqKOs<%#@&D]HG\mfGf+f@O4ci(m4k
%0e;#AbD]mR2UisjLeRabX>#gRkiTBqNkkPEeRge.>`/GU6ek,U'"$=S#+:P5n>AL(A`Kn+EB?oPqQD.cCiAFf[R';u4X<&KRscE8
%$q+bILf'so<qQ^$A(=Kgg_cI59/sPk)Qmj2DE6uSA:feKO;ZEI'gGB]H?!JCW]/gt[uXjkpOXOa:7hE7L([YJaG!kJAl8P66%q'm
%:uj=f$l&u-(j&2!8rb#eT1$cb>f4X2E.$lW*R33Prh8fO402u+iYZ#\>M;g3$e2TGq@3CB<>$Jr?dQ>_,a7b0hbC7pONBpd*>J1t
%&DUXq2c_,Y_UsKlF\OU(9jfc;%4]-XS!8YXk!_N+C:!'-R^/-9#6b2oqIKcDNu=GX8BjM[$\mch0ICYF3g#Ub@eB%A8CZ3somQYZ
%WOVi!$Yk0FZ:m.+9RGAC^:F]P-ZN$Qls7u^EnL%5W<G2ANJkKhW^Ee1c5%VV0f8Q]-J8_E;pm9TVT9Zg=f3@EZ!tPWK;+I54\TA.
%M(4]+g+8"2!Aukd"_]#``K8KYfX$U<^V%hLq(LM4PWE@P$V9\]87Sa5f_65DrNVKKg)tn\m5>Iiq/PnkZ6RIIVB>4j`KViB:rW.F
%jWj*._k\I?-#L5gO]U4n2-E\*c&dkpYIC:H>Nk^i\XRIgAN4,ep[pAO9Zl'KUUYQZ%Q1i9iro&Hf=^BRKp6<o=1%:U?tnE,e-IWc
%=[ubH>JeaGi[U3S*4I(=H#BhWXNfsm*PRtjrtRU]Qr#kEEEBNufL;4(V5"PiRp<uAoUO!%GP$QmhS^Br6-WI[KJ%R8P)I5#MX<3$
%X2rK>63V54XK39Lir,=YS6*L&[U_jO%2*2cf!-1+]_l0K6`pKjmWsMID.)SHoS0Y?_41\Cbm>lEW0@VEPXp[i425#sDfEAo?&W^c
%`VP=p<NQmgZ8FEfc0"#eF#UQ'5kA%h<4H&f^tJJeP"EL$Z(;%Q6QQ1V(YaT<A&7So8isM+X/OK[XTm%YGBC:,UL[9+A;7`SN*<Qu
%\7'-<=1eBDbDZAd3\:7VpI8cD4$)-Q;6hX&KLia3<:oasCj`c@^[>ocE&SsFch/4K1:PZXL[LLpA)$cubk6!R0e8ZbBFUZlCb!^l
%pM?>nc2Zge0VKS`+jk<B":FekM$/A2,t/n$@>']#TN.u0?TsVE%jtd&[3SFH&o!SH%4>R^&r<kJW<neLS.Gj]1e`c.E>g/mJLh8J
%U-Oiq8PpVt8O$fa+AKb\I23!l4:I,LBc^mP,eB_$DETJ8U+7#C?>!7\bJS.l$5B]*k,hOSS)eoA2)6ea5_2N<>STdC0f;e$1usTg
%(42*_Z+kuB&3G!6!g/II'hIpMfN*\UOQBnE"2\&hj@*ma!+]6"0dH,W$$$Y*6%nh`I=rr/k#&o)):C>BRD[d[GLRU=21b>gjJ?R6
%ln1/H1_4(Xld,d_4Npht'1g+mM<02qHb/5pA;*nski/3,*V\XO=$>UuaT;X7C-S/DfuaG/.Y^dE`Jdq8-q\mBf)EM-Qk]&KA5"BO
%E@)uCJL'KS3t;l'\j\h?'n\2kmC6[;[-R@((bKQsD_k!W(FnAbbn<D[BUD2pDN:0*Z*"el=R:3]Yf?BH]qWM\BcAmmhujXuE2[c1
%;XVs+.lqM;k"VR(^WQ=3s0b``44.q$hfB`on]/l@D0C5B7\B$T#/VEpFL.m`cV6euE^GVsbpYO=r,Qu700c/[%'&\9c.\t5LF&*.
%Y4:V2i[Q\p9cI_q;K`.[oWm[d=NJAGLB`ipNIG9r.@WVDRN<qIP/$kLPdMr`CdcVS^?\YIn<g@KF!7,#2@sP=8dY^.(]0b.DZNah
%oMX[Q+CUZ]7%`j<#HJ?B,LYP6p1q>IjC+CLqWm]']/]qHk^sL3=bKTJ^T8+U*,_^M*o$>),=6cKf-BBY(Lo"YC6)5?!`\t=1c[tn
%oIL$9[5FL;Q/bY=%m;32&oGn50m_mS-tng;"[S/F/VaO#Yh*IkF@RbFPT;:M8UHO0[aCio*"<T/LPU*<%l^Li33^>,/5CNB]=8NV
%iTaE3QN1mQT@F2o5p5[]nN%?6[2]q5P]p*l4]_HF?SI]K$I';^\S;1:#ra-j=LGb5p,_;g5p0T"e+G$o+HP/u]toC=-W*_93rDaK
%/t*9nInH.phXEQW9.EMg)05Qi7QhJ*U/2JJ#7HBu+NVS+lH<&<c(\aI@hK9VMFXkNNQpY,Z3hj%6UGB7V;7ddXt`E4\dRZh*7BE.
%Z.a1L`0"UgFH2c8PZm(NgLegtH"&d9o;[GDLF@.`?*>NJk'e;b!:#0AXHA[u1m\?d^EgumGip7]IYd^5(@r*__2gY1`?>%g7U+'t
%LH0=sPu7A4[bZDo7hY$lo[<m6nSY9!Xe0M9qq'RO^ugAtHJYp.Q^M,-c1^Ji#O2tD&k3+OEQkHGDr$Oi3YTJ*:JiLnNSSK@ftk(,
%:$1=K4b%oHRj]7]RNSs=f=;R6Nq.ieRGk3ohd="ia,Y%N5Rs(I9%81r=!;YWTr?Zq:dBpM=k.!Aa:-1hoqKbNMH/6)kL4'C2#+!^
%W!9A)M7(?sQ`9),4qq"#rBLTG0t'!K8nLUt,:*QZ/Uq#&*@eB.2oL[rVqj7Keme)FCg*(RrF0LaJNbCpX"=Gs*aHK48C)eDXua0#
%VPj%!?!P@rfi9#gGE(Q%XPDkc+?jQ+`DbtP0FBZPYSE9^>6!8o%@TFk13C5u6hs_d,r\#-nJ#d7lm^LQWl*)#A&Wdb_0(h0j=#c.
%N\Z$X;8=cNci5n`!jRUD3i4l_E>1dn;2/tYAk4nF0:n>F@7DOk`h$WD?r&N@i[J^.oFsZ*#EVPqHt)d`Du&FN8f-/\bRc^V]QKLn
%Q*b[W'h;n<RD.&si"jQ"5;H-Gkc0D$"Zu.ca9c#?'G2G?-Mq0eYEUSH`<gQT+d==G):a!UlA3P,gVS#-1n1Bafaehs.45"j\e7lZ
%"NAlS.(dTSC'V).0Z0(`3KWCOHaB2L.=DK^27lGS1s8]%pZT(Hb"(^.9IYl2<T/m*C9L%F+r+;Zg'C&kLd'38@mR&+/>A<O=En=8
%@?D0US?PPDQ[Ch^?6Wg?+toIj8<K60=JX#2,V2jSKbG4No"t,j;WK,VNhj`h,V2hXK2:X-IKlFg:Q_!R30GI=q,X*E.1^VO`^0ui
%'RAZ]6AiG.c&l/hAP,ZbZ1mI#PH];PSO;FkCucKfOg%B9(J\).`eu,o;PV5"NQar'I%lk2@+=V(Ur&&IrCE=g\i5fK/p)"Wj^$m!
%:j7bD7B3uh]oc9<M0gJHmLo7`^>D$.pe?+pl7UuZS^d>F2j3GYJYm*Rg`0`No+cr@h%:HIiB&5B<I]+r,",Nm=ckHlS89<f(F1?9
%P*FTKj)U',A@b,&CjXFFKPk;\^A2e0hSlFaI!_>U\4<HT%8_JXA2+,mbpk!'.Kjta^)c[;Gt&3QrQ>("URQ9%#:a!YFr[V4k:?=8
%gJ[BcH&-%]>u`=2#cdOsa17Yq/Z(!Vneo<<"t,7MXR!Pf0!$Q>!nVb$Ea3Z.>DEe/,g=aCZP[o;T\!Ds^9J/Brj>6QM+d+G>QLkj
%R6\CRmG$)&G"0)+jOEk2VKG-ql)!iVE=q(#Z<@5u%KOdNE26:.d]6;d<R:J^]bY")eL"Mt0ULeO"a.Z`i8!)"*l=5blQJ4\H=J;k
%'(:\4Qr%g*YT,=n]-+YbE9`a/7Cu/!V@Q$OeGWBQ392nC(WP-h\o$fNTn8@Y9Mi5Q@ID!3R(G'&RP(+iEt?P+\-#Z"aap(Dapq*p
%,mU<1aFSu/591S?m+YRnK-;MGGU=q'(fO9Prq2-R6VsLo)gh&W--JNJ-4l9X\Hc'HjMB>2GN#4A:D]o-OpdIjaG$6<`\*5G^NeV[
%DjQ"YIOsNhPXHqsYfg%[LN6U"ULnud-&8Cah4rFN/u[qi440Y?UcTtGmHtT'JkPP/'>",VpKd]MEYj2Hkn9WeF<;4X2AF30r191/
%ag'jYHbFn(=Nf3l6)"l'FIh/o#O3te75X=TlGSl(4t9<f=&FAJ<"H[O0!"NTYRD5-n7V(LWGK0:[\YraXG\hh_.QHn'.F;/7)NK:
%iBX7kq%3ik<0BRiL1I'-Nb:d<^*GiaHgbjPN_i6m*E<8s^'o)'q2I$C%6@^id$@0h91p_M^=lcI210r^SV/i4M%482M)7ck,#'9H
%9HqJ-4l-t'R&k\l&Y)%jW*]G(NEPR^eJDFFD7U1Jc!<9g9[3\n#O_Ig%CC1%.lt)9H=SDW>uqd+VV]j',;Ntf(L>d?36Fqgd+M+5
%0!al=>"%uaOJ:Wnl^Mo4,C61GWO)$jhTt;ZgdMPLGgR70d7Bl+dR+J=1<Sj'b2PQ2><NksjTFoboG3o;W2q4E?oi[YY1V.i1<U::
%'.&q^P'l#B:2Q$6TVL@8kYMRTY!f@iPEr\t+Bp/A6[U//3.BSM7dm(]KWO#HIF_82j5Z##B<m]anrmp>nTa`1*NVLSCiMg6SJL,B
%k_5Qm-.K3s)*UOkfkJ,L#APk^gP<lm#Ki>TFOQlqeH&hB!NDT*N'f6s_]=.RWdFPdH5'GgM`M+ff1FI2rj\]N_5JQ:n8(JKn&l#k
%i[=W.+T,\QE=HA:qNt*/l&VfsH^%.tR*@a*:R0_8OONIM,&5$7p)F7sjsiuj2a[st!+5A$6a;n@/(OVT.[H`"+JZD:'I6lBd&XTp
%P?YEd6YqK&hNc&7,k\n8]#@Kaj5Z##B;1RUnrmp>oK<JN9$<FoX'Pb$[b+'h>!-oP/__?/+!05f9#jf%k,ub3"dO-6<CjuC`Z>af
%!$iPVdMNGV$af3Q^:TIi:u('J3_\+f;HSJSW?B).mG6>,h)(OqI@K>;"VjpV3B+3i&5hGTdbQZpM'9p(h#actXZe)D`*-]+b/_4S
%*8\EB1l.(SWU+:i4(<KnDDjfNbp4btU,9bAJYed3Q.:FA?404gDi+Y#[Va\iRsl,#XeW*,6DYIn2/rCu(q&fYl:Ag"XRa9R0)&e-
%27GC[WkW4Pb_010PTdEfGqoUnKM\gR!pO@^'4`?-X$2uN%P:YK%mX*p5qd9]%CJVsXb0,$;0eC9Cg"j_7;E2%AlE^#[jSfcE6BK5
%=(G0e,IH"nkK+!a?>OO.gN6@?$\h]PRVQ!bj*#QP-f_DqKj:fI068'AI4/i3)tNO:']5i%L9`[n7^KG2khMA=I_>KO_`Zq7ATW.S
%T4$AK51JFAd'B/#XJ"BF",t[PcuLE9$]q[+Q]FngMat?:"bi?06/f!IhfM/#>kj<\Z3rXj\=,s]6Nq\S@X5->0WQV9(B'r!K`LdU
%mhQPcB*C%lBZ_6UQ?bI$:IE][ct)J"i;-_O%rq0$[)FG]SJ#HCP"qG.Z5Lg'?D<t5B%1kS;+Dn,ZRq]j:8'JhAZ*sZ4s!U7Oin66
%1JVMZe6/TQ;sGo3fdV'`WU,j1j&C1oSOG"iV9U9M*F_p:.nhZHc5!5+=_+g:l7Ci7o,FO>"%eYQ-9J'L39?Z.B9^M5V)-D"B<h3p
%Dj/:la-frlCeQa-WO'ZVVplSsZ;^&41>+*Vk*bQR$&;<@1>.Ui-9IL<4<'iK>Em6)V)-8)Vp\^3lUkfPa\JZgc=Ej$=_+g:kq"UC
%hs6e@HV%bGdb2)j-hTS8fr9'/BF:+q,+G9"A.tDglkDM@V"IID+.UI`8M\S%Vkb3nTh4I,fFCj/ljis74>qGc:T(l;&q\P;6\-4l
%B/D9oE=)C'PfHPlY..I(AOa3sSA-K,qe/IhTlkK1^"O2as*]!$9*DWh:9,cV2&+7!YuinqD)RNHk]V2?B>FfVZ)+;aQJ.YT&OT$\
%.*jYpXoOAZEqF7+$;iIB)QIG%jk>aF4%`j/i?f#@c<6;T2:Z))^VqNagoB8>_88Ttg\mk+giDDGR4+3,H*QZL;P5.f'7LBAI:l+%
%[f35!HF;f#$489pT[J^'g^t8:JTa]Z3)LL-gARUrge\TRX6+%5ehP\HIJ8(M:.@(8iA<7?G4]Fsa`sn<`F9Ru8I9&MLJs$MDWi:u
%,Q]S0RMVbY^[\Ujo`Eg+(C&-9Dc_&=H6T#b9.7Qd#Y9/WOtKu5BT'R6U%aN90l0K7oT=tm>hp9D^&8iuF3K.$WdFA,^GHB="_urP
%Wb`''!_SOB<PC;/KcNhhB,tZ7NGJVe[e+ul`_2S9Qls.$2ks%'[14\rWn*q=[2SMuX1$ZM=7rjGGJ[7S4K`5OQn=L^eJij4hAD4L
%WXfi7H=G-mr2bah.GENs*ViI^<ZSdi`Egb>HRrn^eLt;7\h9is24&i?I%sroVtRE7N7AEIaaMjE>AnI=a12Z`I8buRf%,IOq2Q4T
%'U7f[\SOVa!On^bo@\amCB"WpT6@UXTkp'5CPE]Id;GR>TQa@ZVUQ;gY#`$TliDg!k,/i6p'?MWS37.Pfjd?kp4*@&IrdYr5]FVs
%^hE:@,mrIQnlXN-Rnk*h7GmrQnlSW$SL+lG]!]\%#PF#;%^`aTb*0l70AS":$&ZiWd%!3F:rh]u1a@;6J5T_FP6Nae!8Y]@PK18&
%LgWt!X.3b8bT.+ha/gWV2l"9Ne`PqDp$K1DTs6l=cS3?!!H`&$IOh`pVuu2K0gS!M&4j.JK^.p/%co:>fd$,/VV0utcW@UGoDq)[
%h5SHe!O8J<@HdCXF6"Krr^tWE4uKrc9%-99-Kaq$r@rMASNY>N&sq^.p-;E=b<MkbFng=Ufn5ES4;cSYK?Ec,K.<_>,9,fe#PGmq
%%N8>\mNAj_h!o3^YF\)Ve_=l];bDZ=r4EVHYr2R6jVYb-%n/p%1smYlV;2gL,.'oQHtY<Y4%<G*4s^pKNRP'$;-pFl02iMnI+UJG
%KM_5RXPf,d\W-uR`XqF;VW,7,:R:h(Ok?`9e/%qi?#8unCjS[oU`pY3Z(.nCr,bmSl=I=GcGR*2L%fU][Pqm.]n%!SqpT(RY@E0Y
%0o8B#Zaf5RP@]3Qm3TuMV\F;f<//Kf]#j=M7n(S"96^\3CH#==$>@7!S/6V)ct1&@%=N.'QK-U]B,q.:*]UfpN="fKRj`mWr50PU
%f4-:jU!<64"8!?mY,HK^l_"_P=lof,+!_)d>ohhLMrPc!No*k5HA7aI3p%R@[>M5p2!iAGQ2TR5amU7?rB?f"GP4''b-k!:[[BbZ
%Sitcg""f"Q^O'3;Ds512L9a7o[8TB@DLs-QGqhJ5.smaZ^Yq^dSP3tKCjH1:VY@"1Ug=9le<gQm<`="p[jT@HSF*AINOV`kNm>(W
%PY>8]b(J#:),F0_dWY4q?bn0Oca40VVKZu;I6=&9odU6@VG*qsR7d(B4k\pANj-p8f(C*G(Ca*1KB&Pr-s4Vla"!G;YdM:2Q;neP
%QZM@s1lHm*\P5MK+>tO'J`k<taE:@M`EbnF&lBSGeN*!.W+RtZ>atpYRK_Gm<L$ZPjnpL!h61TIUAs!3$lP-C%W"1>DbWgZr6\A8
%lSseEeO[lX*A8=6:i:)dnmZ*91DY*"gT$sbI4`'8^rE`e`T"j9A,#30\rO!Dp9<^ZFL6J#iNM^*P6_Hdl^=M^[VhOcPEngAcbCLN
%kec$9Ao!lJ-[:aa;5qiPd8STYH=chZ$b7i(eq-rmTl^1<L^SFr5d,6%%C.Za48*1\iShhO7.JqSDu4EIdm+T46+\<>+O/[=1Qc4M
%FJ;sSDeLM!9j$*slh%c#RE)GC4uQ!!->DC;)S<2MWa:!o'H`jF@7s(&&R"D%"OGNn5*Xo)?I7&oiZR!25kOjf<N[1c;ObDQA!fh5
%6i!I;=rn`AUgf51*Fr/R%>pI^$_6F,Bsaj#&)*q*Fomg>O6E1/%n4fQU%74Gjsj5b`.B.:XB11Z2>5b8A`6$,<*a^$9VM*_CPf/R
%F;E]OXmBX[$l1&)LFL<#Ab?`.Y(ZJ??ISP/_:=h5E[Xf"%?^P?CcE!Weq]r>1(_/*W\knh=4c;6j;<L,eXX.$puteZ3Ca_Z5"??I
%o[QmjqT2Ja<Q#ZkkBKr$B9;O!S!Si-*59>%7&;dESZ%DhC?t5AA+.>4+<It\fX1?plb8`M7u0c\H/)ThQTm2ghXTI;++O%LYQ"B:
%s*jm`J,&((I/O!DrS^Peqjdb;pP47rV`tNA\#'*l(&77nEc?o=Sg3UmGlW9jO&(8u2tH:\j^3Fbr:)?!+9'OBroqc/rh!Nsr(m@j
%a5?p]s*amUK)PHDo_<?Ss6i2PgX#`^IlMrVmlpcrhu8%,ro*eNq58`8q-W0;rso&pVuB^PNrSjeVZ-7<q>EPWiP5BVp]'l?LAp5J
%r;Q`oiUcO<pr@m`oC)_WL];f%l17.=kn!gbkC<K[+$T_Js8(pY$Nq!Z"+U:$s5?3Ba%q3XrrG!^n1"~>
%AI9_PrivateDataEnd
